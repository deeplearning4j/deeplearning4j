// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DType } from '../../sd/graph/dtype.js';
import { FlatArray } from '../../sd/graph/flat-array.js';
import { IntPair } from '../../sd/graph/int-pair.js';
import { VarType } from '../../sd/graph/var-type.js';


export class FlatVariable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlatVariable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlatVariable(bb:flatbuffers.ByteBuffer, obj?:FlatVariable):FlatVariable {
  return (obj || new FlatVariable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlatVariable(bb:flatbuffers.ByteBuffer, obj?:FlatVariable):FlatVariable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlatVariable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id(obj?:IntPair):IntPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new IntPair()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dtype():DType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DType.INHERIT;
}

shape(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

shapeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ndarray(obj?:FlatArray):FlatArray|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new FlatArray()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

device():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

variabletype():VarType {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : VarType.VARIABLE;
}

controlDeps(index: number):string
controlDeps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
controlDeps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

controlDepsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

controlDepForOp(index: number):string
controlDepForOp(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
controlDepForOp(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

controlDepForOpLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

controlDepsForVar(index: number):string
controlDepsForVar(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
controlDepsForVar(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

controlDepsForVarLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFlatVariable(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addDtype(builder:flatbuffers.Builder, dtype:DType) {
  builder.addFieldInt8(2, dtype, DType.INHERIT);
}

static addShape(builder:flatbuffers.Builder, shapeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, shapeOffset, 0);
}

static createShapeVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startShapeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addNdarray(builder:flatbuffers.Builder, ndarrayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, ndarrayOffset, 0);
}

static addDevice(builder:flatbuffers.Builder, device:number) {
  builder.addFieldInt32(5, device, 0);
}

static addVariabletype(builder:flatbuffers.Builder, variabletype:VarType) {
  builder.addFieldInt8(6, variabletype, VarType.VARIABLE);
}

static addControlDeps(builder:flatbuffers.Builder, controlDepsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, controlDepsOffset, 0);
}

static createControlDepsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startControlDepsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addControlDepForOp(builder:flatbuffers.Builder, controlDepForOpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, controlDepForOpOffset, 0);
}

static createControlDepForOpVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startControlDepForOpVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addControlDepsForVar(builder:flatbuffers.Builder, controlDepsForVarOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, controlDepsForVarOffset, 0);
}

static createControlDepsForVarVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startControlDepsForVarVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFlatVariable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
