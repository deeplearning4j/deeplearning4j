// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class IntTriple {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IntTriple {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIntTriple(bb:flatbuffers.ByteBuffer, obj?:IntTriple):IntTriple {
  return (obj || new IntTriple()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIntTriple(bb:flatbuffers.ByteBuffer, obj?:IntTriple):IntTriple {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IntTriple()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

first():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

second():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

third():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startIntTriple(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFirst(builder:flatbuffers.Builder, first:number) {
  builder.addFieldInt32(0, first, 0);
}

static addSecond(builder:flatbuffers.Builder, second:number) {
  builder.addFieldInt32(1, second, 0);
}

static addThird(builder:flatbuffers.Builder, third:number) {
  builder.addFieldInt32(2, third, 0);
}

static endIntTriple(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createIntTriple(builder:flatbuffers.Builder, first:number, second:number, third:number):flatbuffers.Offset {
  IntTriple.startIntTriple(builder);
  IntTriple.addFirst(builder, first);
  IntTriple.addSecond(builder, second);
  IntTriple.addThird(builder, third);
  return IntTriple.endIntTriple(builder);
}
}
