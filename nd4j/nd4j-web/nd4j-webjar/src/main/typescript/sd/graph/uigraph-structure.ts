// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { IntPair } from '../../sd/graph/int-pair.js';
import { UIOp } from '../../sd/graph/uiop.js';
import { UIVariable } from '../../sd/graph/uivariable.js';


export class UIGraphStructure {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UIGraphStructure {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUIGraphStructure(bb:flatbuffers.ByteBuffer, obj?:UIGraphStructure):UIGraphStructure {
  return (obj || new UIGraphStructure()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUIGraphStructure(bb:flatbuffers.ByteBuffer, obj?:UIGraphStructure):UIGraphStructure {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UIGraphStructure()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

inputs(index: number):string
inputs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
inputs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

inputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

inputsPair(index: number, obj?:IntPair):IntPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new IntPair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

inputsPairLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

outputs(index: number):string
outputs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
outputs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

outputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

variables(index: number, obj?:UIVariable):UIVariable|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new UIVariable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

variablesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ops(index: number, obj?:UIOp):UIOp|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new UIOp()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

opsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startUIGraphStructure(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addInputs(builder:flatbuffers.Builder, inputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, inputsOffset, 0);
}

static createInputsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInputsPair(builder:flatbuffers.Builder, inputsPairOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, inputsPairOffset, 0);
}

static createInputsPairVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInputsPairVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOutputs(builder:flatbuffers.Builder, outputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, outputsOffset, 0);
}

static createOutputsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOutputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVariables(builder:flatbuffers.Builder, variablesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, variablesOffset, 0);
}

static createVariablesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVariablesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOps(builder:flatbuffers.Builder, opsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, opsOffset, 0);
}

static createOpsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOpsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endUIGraphStructure(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUIGraphStructure(builder:flatbuffers.Builder, inputsOffset:flatbuffers.Offset, inputsPairOffset:flatbuffers.Offset, outputsOffset:flatbuffers.Offset, variablesOffset:flatbuffers.Offset, opsOffset:flatbuffers.Offset):flatbuffers.Offset {
  UIGraphStructure.startUIGraphStructure(builder);
  UIGraphStructure.addInputs(builder, inputsOffset);
  UIGraphStructure.addInputsPair(builder, inputsPairOffset);
  UIGraphStructure.addOutputs(builder, outputsOffset);
  UIGraphStructure.addVariables(builder, variablesOffset);
  UIGraphStructure.addOps(builder, opsOffset);
  return UIGraphStructure.endUIGraphStructure(builder);
}
}
