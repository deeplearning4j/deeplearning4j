// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class LongTriple {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LongTriple {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLongTriple(bb:flatbuffers.ByteBuffer, obj?:LongTriple):LongTriple {
  return (obj || new LongTriple()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLongTriple(bb:flatbuffers.ByteBuffer, obj?:LongTriple):LongTriple {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LongTriple()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

first():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

second():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

third():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startLongTriple(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFirst(builder:flatbuffers.Builder, first:bigint) {
  builder.addFieldInt64(0, first, BigInt('0'));
}

static addSecond(builder:flatbuffers.Builder, second:bigint) {
  builder.addFieldInt64(1, second, BigInt('0'));
}

static addThird(builder:flatbuffers.Builder, third:bigint) {
  builder.addFieldInt64(2, third, BigInt('0'));
}

static endLongTriple(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLongTriple(builder:flatbuffers.Builder, first:bigint, second:bigint, third:bigint):flatbuffers.Offset {
  LongTriple.startLongTriple(builder);
  LongTriple.addFirst(builder, first);
  LongTriple.addSecond(builder, second);
  LongTriple.addThird(builder, third);
  return LongTriple.endLongTriple(builder);
}
}
