// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FrameIteration } from '../../sd/graph/frame-iteration.js';
import { UIEventSubtype } from '../../sd/graph/uievent-subtype.js';
import { UIEventType } from '../../sd/graph/uievent-type.js';


export class UIEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UIEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUIEvent(bb:flatbuffers.ByteBuffer, obj?:UIEvent):UIEvent {
  return (obj || new UIEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUIEvent(bb:flatbuffers.ByteBuffer, obj?:UIEvent):UIEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UIEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventType():UIEventType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : UIEventType.ADD_NAME;
}

eventSubType():UIEventSubtype {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : UIEventSubtype.NONE;
}

nameIdx():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

iteration():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

epoch():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

variableId():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

frameIter(obj?:FrameIteration):FrameIteration|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new FrameIteration()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

plugin():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startUIEvent(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addEventType(builder:flatbuffers.Builder, eventType:UIEventType) {
  builder.addFieldInt8(0, eventType, UIEventType.ADD_NAME);
}

static addEventSubType(builder:flatbuffers.Builder, eventSubType:UIEventSubtype) {
  builder.addFieldInt8(1, eventSubType, UIEventSubtype.NONE);
}

static addNameIdx(builder:flatbuffers.Builder, nameIdx:number) {
  builder.addFieldInt32(2, nameIdx, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(3, timestamp, BigInt('0'));
}

static addIteration(builder:flatbuffers.Builder, iteration:number) {
  builder.addFieldInt32(4, iteration, 0);
}

static addEpoch(builder:flatbuffers.Builder, epoch:number) {
  builder.addFieldInt32(5, epoch, 0);
}

static addVariableId(builder:flatbuffers.Builder, variableId:number) {
  builder.addFieldInt16(6, variableId, 0);
}

static addFrameIter(builder:flatbuffers.Builder, frameIterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, frameIterOffset, 0);
}

static addPlugin(builder:flatbuffers.Builder, plugin:number) {
  builder.addFieldInt16(8, plugin, 0);
}

static endUIEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
