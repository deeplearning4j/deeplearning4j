// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlatArray } from '../../sd/graph/flat-array.js';
import { UIHistogramType } from '../../sd/graph/uihistogram-type.js';


export class UIHistogram {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UIHistogram {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUIHistogram(bb:flatbuffers.ByteBuffer, obj?:UIHistogram):UIHistogram {
  return (obj || new UIHistogram()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUIHistogram(bb:flatbuffers.ByteBuffer, obj?:UIHistogram):UIHistogram {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UIHistogram()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():UIHistogramType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : UIHistogramType.DISCRETE;
}

numbins():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

binranges(obj?:FlatArray):FlatArray|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FlatArray()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

y(obj?:FlatArray):FlatArray|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new FlatArray()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

binlabels(index: number):string
binlabels(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
binlabels(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

binlabelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startUIHistogram(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addType(builder:flatbuffers.Builder, type:UIHistogramType) {
  builder.addFieldInt8(0, type, UIHistogramType.DISCRETE);
}

static addNumbins(builder:flatbuffers.Builder, numbins:number) {
  builder.addFieldInt32(1, numbins, 0);
}

static addBinranges(builder:flatbuffers.Builder, binrangesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, binrangesOffset, 0);
}

static addY(builder:flatbuffers.Builder, yOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, yOffset, 0);
}

static addBinlabels(builder:flatbuffers.Builder, binlabelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, binlabelsOffset, 0);
}

static createBinlabelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBinlabelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endUIHistogram(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
