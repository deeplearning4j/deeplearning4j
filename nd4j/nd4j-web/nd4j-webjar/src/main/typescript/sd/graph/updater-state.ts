// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlatArray } from '../../sd/graph/flat-array.js';


export class UpdaterState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdaterState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdaterState(bb:flatbuffers.ByteBuffer, obj?:UpdaterState):UpdaterState {
  return (obj || new UpdaterState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdaterState(bb:flatbuffers.ByteBuffer, obj?:UpdaterState):UpdaterState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdaterState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

paramName():string|null
paramName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
paramName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

updaterStateKeys(index: number):string
updaterStateKeys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
updaterStateKeys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

updaterStateKeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

updaterStateValues(index: number, obj?:FlatArray):FlatArray|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FlatArray()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

updaterStateValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startUpdaterState(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addParamName(builder:flatbuffers.Builder, paramNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, paramNameOffset, 0);
}

static addUpdaterStateKeys(builder:flatbuffers.Builder, updaterStateKeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, updaterStateKeysOffset, 0);
}

static createUpdaterStateKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUpdaterStateKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUpdaterStateValues(builder:flatbuffers.Builder, updaterStateValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, updaterStateValuesOffset, 0);
}

static createUpdaterStateValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUpdaterStateValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endUpdaterState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdaterState(builder:flatbuffers.Builder, paramNameOffset:flatbuffers.Offset, updaterStateKeysOffset:flatbuffers.Offset, updaterStateValuesOffset:flatbuffers.Offset):flatbuffers.Offset {
  UpdaterState.startUpdaterState(builder);
  UpdaterState.addParamName(builder, paramNameOffset);
  UpdaterState.addUpdaterStateKeys(builder, updaterStateKeysOffset);
  UpdaterState.addUpdaterStateValues(builder, updaterStateValuesOffset);
  return UpdaterState.endUpdaterState(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):UpdaterState {
  return UpdaterState.getRootAsUpdaterState(new flatbuffers.ByteBuffer(buffer))
}
}
