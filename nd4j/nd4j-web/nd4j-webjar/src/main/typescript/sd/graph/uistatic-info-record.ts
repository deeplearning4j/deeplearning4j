// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { UIInfoType } from '../../sd/graph/uiinfo-type.js';


export class UIStaticInfoRecord {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UIStaticInfoRecord {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUIStaticInfoRecord(bb:flatbuffers.ByteBuffer, obj?:UIStaticInfoRecord):UIStaticInfoRecord {
  return (obj || new UIStaticInfoRecord()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUIStaticInfoRecord(bb:flatbuffers.ByteBuffer, obj?:UIStaticInfoRecord):UIStaticInfoRecord {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UIStaticInfoRecord()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

infoType():UIInfoType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : UIInfoType.GRAPH_STRUCTURE;
}

static startUIStaticInfoRecord(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addInfoType(builder:flatbuffers.Builder, infoType:UIInfoType) {
  builder.addFieldInt8(0, infoType, UIInfoType.GRAPH_STRUCTURE);
}

static endUIStaticInfoRecord(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUIStaticInfoRecord(builder:flatbuffers.Builder, infoType:UIInfoType):flatbuffers.Offset {
  UIStaticInfoRecord.startUIStaticInfoRecord(builder);
  UIStaticInfoRecord.addInfoType(builder, infoType);
  return UIStaticInfoRecord.endUIStaticInfoRecord(builder);
}
}
