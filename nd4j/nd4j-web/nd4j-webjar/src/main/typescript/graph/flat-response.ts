// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class FlatResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlatResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlatResponse(bb:flatbuffers.ByteBuffer, obj?:FlatResponse):FlatResponse {
  return (obj || new FlatResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlatResponse(bb:flatbuffers.ByteBuffer, obj?:FlatResponse):FlatResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlatResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startFlatResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addStatus(builder:flatbuffers.Builder, status:number) {
  builder.addFieldInt32(0, status, 0);
}

static endFlatResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFlatResponse(builder:flatbuffers.Builder, status:number):flatbuffers.Offset {
  FlatResponse.startFlatResponse(builder);
  FlatResponse.addStatus(builder, status);
  return FlatResponse.endFlatResponse(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):FlatResponse {
  return FlatResponse.getRootAsFlatResponse(new flatbuffers.ByteBuffer(buffer))
}
}
