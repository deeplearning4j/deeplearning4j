// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class IntPair {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IntPair {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIntPair(bb:flatbuffers.ByteBuffer, obj?:IntPair):IntPair {
  return (obj || new IntPair()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIntPair(bb:flatbuffers.ByteBuffer, obj?:IntPair):IntPair {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IntPair()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

first():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

second():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startIntPair(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFirst(builder:flatbuffers.Builder, first:number) {
  builder.addFieldInt32(0, first, 0);
}

static addSecond(builder:flatbuffers.Builder, second:number) {
  builder.addFieldInt32(1, second, 0);
}

static endIntPair(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createIntPair(builder:flatbuffers.Builder, first:number, second:number):flatbuffers.Offset {
  IntPair.startIntPair(builder);
  IntPair.addFirst(builder, first);
  IntPair.addSecond(builder, second);
  return IntPair.endIntPair(builder);
}
}
