// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class FrameIteration {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FrameIteration {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFrameIteration(bb:flatbuffers.ByteBuffer, obj?:FrameIteration):FrameIteration {
  return (obj || new FrameIteration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFrameIteration(bb:flatbuffers.ByteBuffer, obj?:FrameIteration):FrameIteration {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FrameIteration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

frame():string|null
frame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
frame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

iteration():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startFrameIteration(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFrame(builder:flatbuffers.Builder, frameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, frameOffset, 0);
}

static addIteration(builder:flatbuffers.Builder, iteration:number) {
  builder.addFieldInt16(1, iteration, 0);
}

static endFrameIteration(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFrameIteration(builder:flatbuffers.Builder, frameOffset:flatbuffers.Offset, iteration:number):flatbuffers.Offset {
  FrameIteration.startFrameIteration(builder);
  FrameIteration.addFrame(builder, frameOffset);
  FrameIteration.addIteration(builder, iteration);
  return FrameIteration.endFrameIteration(builder);
}
}
