// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlatArray } from '../graph/flat-array.js';


export class UISummaryStatistics {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UISummaryStatistics {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUISummaryStatistics(bb:flatbuffers.ByteBuffer, obj?:UISummaryStatistics):UISummaryStatistics {
  return (obj || new UISummaryStatistics()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUISummaryStatistics(bb:flatbuffers.ByteBuffer, obj?:UISummaryStatistics):UISummaryStatistics {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UISummaryStatistics()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bitmask():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

min(obj?:FlatArray):FlatArray|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FlatArray()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

max(obj?:FlatArray):FlatArray|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FlatArray()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

mean():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

stdev():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

countzero():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

countpositive():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

countnegative():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

countnan():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

countinf():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startUISummaryStatistics(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addBitmask(builder:flatbuffers.Builder, bitmask:number) {
  builder.addFieldInt32(0, bitmask, 0);
}

static addMin(builder:flatbuffers.Builder, minOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, minOffset, 0);
}

static addMax(builder:flatbuffers.Builder, maxOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, maxOffset, 0);
}

static addMean(builder:flatbuffers.Builder, mean:number) {
  builder.addFieldFloat64(3, mean, 0.0);
}

static addStdev(builder:flatbuffers.Builder, stdev:number) {
  builder.addFieldFloat64(4, stdev, 0.0);
}

static addCountzero(builder:flatbuffers.Builder, countzero:bigint) {
  builder.addFieldInt64(5, countzero, BigInt('0'));
}

static addCountpositive(builder:flatbuffers.Builder, countpositive:bigint) {
  builder.addFieldInt64(6, countpositive, BigInt('0'));
}

static addCountnegative(builder:flatbuffers.Builder, countnegative:bigint) {
  builder.addFieldInt64(7, countnegative, BigInt('0'));
}

static addCountnan(builder:flatbuffers.Builder, countnan:bigint) {
  builder.addFieldInt64(8, countnan, BigInt('0'));
}

static addCountinf(builder:flatbuffers.Builder, countinf:bigint) {
  builder.addFieldInt64(9, countinf, BigInt('0'));
}

static endUISummaryStatistics(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
