// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlatConfiguration } from '../graph/flat-configuration.js';
import { FlatVariable } from '../graph/flat-variable.js';


export class FlatInferenceRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlatInferenceRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlatInferenceRequest(bb:flatbuffers.ByteBuffer, obj?:FlatInferenceRequest):FlatInferenceRequest {
  return (obj || new FlatInferenceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlatInferenceRequest(bb:flatbuffers.ByteBuffer, obj?:FlatInferenceRequest):FlatInferenceRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlatInferenceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

variables(index: number, obj?:FlatVariable):FlatVariable|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FlatVariable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

variablesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

configuration(obj?:FlatConfiguration):FlatConfiguration|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FlatConfiguration()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startFlatInferenceRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, id:bigint) {
  builder.addFieldInt64(0, id, BigInt('0'));
}

static addVariables(builder:flatbuffers.Builder, variablesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, variablesOffset, 0);
}

static createVariablesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVariablesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addConfiguration(builder:flatbuffers.Builder, configurationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, configurationOffset, 0);
}

static endFlatInferenceRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFlatInferenceRequestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFlatInferenceRequestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
