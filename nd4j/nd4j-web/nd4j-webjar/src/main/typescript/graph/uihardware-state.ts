// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UIHardwareState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UIHardwareState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUIHardwareState(bb:flatbuffers.ByteBuffer, obj?:UIHardwareState):UIHardwareState {
  return (obj || new UIHardwareState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUIHardwareState(bb:flatbuffers.ByteBuffer, obj?:UIHardwareState):UIHardwareState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UIHardwareState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

gpuMemory(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

gpuMemoryLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hostMemory():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startUIHardwareState(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addGpuMemory(builder:flatbuffers.Builder, gpuMemoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, gpuMemoryOffset, 0);
}

static createGpuMemoryVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startGpuMemoryVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addHostMemory(builder:flatbuffers.Builder, hostMemory:bigint) {
  builder.addFieldInt64(1, hostMemory, BigInt('0'));
}

static endUIHardwareState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUIHardwareState(builder:flatbuffers.Builder, gpuMemoryOffset:flatbuffers.Offset, hostMemory:bigint):flatbuffers.Offset {
  UIHardwareState.startUIHardwareState(builder);
  UIHardwareState.addGpuMemory(builder, gpuMemoryOffset);
  UIHardwareState.addHostMemory(builder, hostMemory);
  return UIHardwareState.endUIHardwareState(builder);
}
}
