// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlatTiming } from '../graph/flat-timing.js';
import { FlatVariable } from '../graph/flat-variable.js';


export class FlatResult {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlatResult {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlatResult(bb:flatbuffers.ByteBuffer, obj?:FlatResult):FlatResult {
  return (obj || new FlatResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlatResult(bb:flatbuffers.ByteBuffer, obj?:FlatResult):FlatResult {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlatResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

variables(index: number, obj?:FlatVariable):FlatVariable|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FlatVariable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

variablesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

timing(index: number, obj?:FlatTiming):FlatTiming|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FlatTiming()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

timingLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

footprintForward():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

footprintBackward():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startFlatResult(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, id:bigint) {
  builder.addFieldInt64(0, id, BigInt('0'));
}

static addVariables(builder:flatbuffers.Builder, variablesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, variablesOffset, 0);
}

static createVariablesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVariablesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTiming(builder:flatbuffers.Builder, timingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, timingOffset, 0);
}

static createTimingVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTimingVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFootprintForward(builder:flatbuffers.Builder, footprintForward:bigint) {
  builder.addFieldInt64(3, footprintForward, BigInt('0'));
}

static addFootprintBackward(builder:flatbuffers.Builder, footprintBackward:bigint) {
  builder.addFieldInt64(4, footprintBackward, BigInt('0'));
}

static endFlatResult(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFlatResultBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFlatResultBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createFlatResult(builder:flatbuffers.Builder, id:bigint, variablesOffset:flatbuffers.Offset, timingOffset:flatbuffers.Offset, footprintForward:bigint, footprintBackward:bigint):flatbuffers.Offset {
  FlatResult.startFlatResult(builder);
  FlatResult.addId(builder, id);
  FlatResult.addVariables(builder, variablesOffset);
  FlatResult.addTiming(builder, timingOffset);
  FlatResult.addFootprintForward(builder, footprintForward);
  FlatResult.addFootprintBackward(builder, footprintBackward);
  return FlatResult.endFlatResult(builder);
}
}
