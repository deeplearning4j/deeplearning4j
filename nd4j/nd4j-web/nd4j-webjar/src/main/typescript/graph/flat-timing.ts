// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LongPair } from '../graph/long-pair.js';


export class FlatTiming {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlatTiming {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlatTiming(bb:flatbuffers.ByteBuffer, obj?:FlatTiming):FlatTiming {
  return (obj || new FlatTiming()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlatTiming(bb:flatbuffers.ByteBuffer, obj?:FlatTiming):FlatTiming {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlatTiming()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

timing(obj?:LongPair):LongPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new LongPair()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startFlatTiming(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addTiming(builder:flatbuffers.Builder, timingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, timingOffset, 0);
}

static endFlatTiming(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
