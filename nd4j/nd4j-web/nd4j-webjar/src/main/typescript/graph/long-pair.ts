// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class LongPair {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LongPair {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLongPair(bb:flatbuffers.ByteBuffer, obj?:LongPair):LongPair {
  return (obj || new LongPair()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLongPair(bb:flatbuffers.ByteBuffer, obj?:LongPair):LongPair {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LongPair()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

first():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

second():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startLongPair(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFirst(builder:flatbuffers.Builder, first:bigint) {
  builder.addFieldInt64(0, first, BigInt('0'));
}

static addSecond(builder:flatbuffers.Builder, second:bigint) {
  builder.addFieldInt64(1, second, BigInt('0'));
}

static endLongPair(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLongPair(builder:flatbuffers.Builder, first:bigint, second:bigint):flatbuffers.Offset {
  LongPair.startLongPair(builder);
  LongPair.addFirst(builder, first);
  LongPair.addSecond(builder, second);
  return LongPair.endLongPair(builder);
}
}
