// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UIOp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UIOp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUIOp(bb:flatbuffers.ByteBuffer, obj?:UIOp):UIOp {
  return (obj || new UIOp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUIOp(bb:flatbuffers.ByteBuffer, obj?:UIOp):UIOp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UIOp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

opName():string|null
opName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

inputs(index: number):string
inputs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
inputs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

inputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

outputs(index: number):string
outputs(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
outputs(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

outputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

controlDeps(index: number):string
controlDeps(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
controlDeps(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

controlDepsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

uiLabelExtra():string|null
uiLabelExtra(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uiLabelExtra(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startUIOp(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addOpName(builder:flatbuffers.Builder, opNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, opNameOffset, 0);
}

static addInputs(builder:flatbuffers.Builder, inputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, inputsOffset, 0);
}

static createInputsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOutputs(builder:flatbuffers.Builder, outputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, outputsOffset, 0);
}

static createOutputsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOutputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addControlDeps(builder:flatbuffers.Builder, controlDepsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, controlDepsOffset, 0);
}

static createControlDepsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startControlDepsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUiLabelExtra(builder:flatbuffers.Builder, uiLabelExtraOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, uiLabelExtraOffset, 0);
}

static endUIOp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUIOp(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, opNameOffset:flatbuffers.Offset, inputsOffset:flatbuffers.Offset, outputsOffset:flatbuffers.Offset, controlDepsOffset:flatbuffers.Offset, uiLabelExtraOffset:flatbuffers.Offset):flatbuffers.Offset {
  UIOp.startUIOp(builder);
  UIOp.addName(builder, nameOffset);
  UIOp.addOpName(builder, opNameOffset);
  UIOp.addInputs(builder, inputsOffset);
  UIOp.addOutputs(builder, outputsOffset);
  UIOp.addControlDeps(builder, controlDepsOffset);
  UIOp.addUiLabelExtra(builder, uiLabelExtraOffset);
  return UIOp.endUIOp(builder);
}
}
