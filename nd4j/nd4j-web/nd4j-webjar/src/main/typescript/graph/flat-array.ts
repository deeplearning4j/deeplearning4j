// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BufferChunk } from '../graph/buffer-chunk.js';
import { ByteOrder } from '../graph/byte-order.js';
import { DType } from '../graph/dtype.js';


export class FlatArray {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlatArray {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlatArray(bb:flatbuffers.ByteBuffer, obj?:FlatArray):FlatArray {
  return (obj || new FlatArray()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlatArray(bb:flatbuffers.ByteBuffer, obj?:FlatArray):FlatArray {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlatArray()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

shape(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

shapeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

buffer(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

bufferLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bufferArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

dtype():DType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DType.INHERIT;
}

byteOrder():ByteOrder {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ByteOrder.LE;
}

bufferChunks(index: number, obj?:BufferChunk):BufferChunk|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new BufferChunk()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

bufferChunksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

totalBufferSize():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

externalDataFilename(index: number):string
externalDataFilename(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
externalDataFilename(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

externalDataFilenameLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

isExternal():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startFlatArray(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addShape(builder:flatbuffers.Builder, shapeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, shapeOffset, 0);
}

static createShapeVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startShapeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addBuffer(builder:flatbuffers.Builder, bufferOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bufferOffset, 0);
}

static createBufferVector(builder:flatbuffers.Builder, data:number[]|Int8Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createBufferVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createBufferVector(builder:flatbuffers.Builder, data:number[]|Int8Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startBufferVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addDtype(builder:flatbuffers.Builder, dtype:DType) {
  builder.addFieldInt8(2, dtype, DType.INHERIT);
}

static addByteOrder(builder:flatbuffers.Builder, byteOrder:ByteOrder) {
  builder.addFieldInt8(3, byteOrder, ByteOrder.LE);
}

static addBufferChunks(builder:flatbuffers.Builder, bufferChunksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, bufferChunksOffset, 0);
}

static createBufferChunksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBufferChunksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTotalBufferSize(builder:flatbuffers.Builder, totalBufferSize:bigint) {
  builder.addFieldInt64(5, totalBufferSize, BigInt('0'));
}

static addExternalDataFilename(builder:flatbuffers.Builder, externalDataFilenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, externalDataFilenameOffset, 0);
}

static createExternalDataFilenameVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExternalDataFilenameVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIsExternal(builder:flatbuffers.Builder, isExternal:boolean) {
  builder.addFieldInt8(7, +isExternal, +false);
}

static endFlatArray(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFlatArray(builder:flatbuffers.Builder, shapeOffset:flatbuffers.Offset, bufferOffset:flatbuffers.Offset, dtype:DType, byteOrder:ByteOrder, bufferChunksOffset:flatbuffers.Offset, totalBufferSize:bigint, externalDataFilenameOffset:flatbuffers.Offset, isExternal:boolean):flatbuffers.Offset {
  FlatArray.startFlatArray(builder);
  FlatArray.addShape(builder, shapeOffset);
  FlatArray.addBuffer(builder, bufferOffset);
  FlatArray.addDtype(builder, dtype);
  FlatArray.addByteOrder(builder, byteOrder);
  FlatArray.addBufferChunks(builder, bufferChunksOffset);
  FlatArray.addTotalBufferSize(builder, totalBufferSize);
  FlatArray.addExternalDataFilename(builder, externalDataFilenameOffset);
  FlatArray.addIsExternal(builder, isExternal);
  return FlatArray.endFlatArray(builder);
}
}
