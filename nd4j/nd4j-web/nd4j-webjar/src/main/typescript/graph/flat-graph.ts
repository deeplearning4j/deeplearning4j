// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlatConfiguration } from '../graph/flat-configuration.js';
import { FlatNode } from '../graph/flat-node.js';
import { FlatVariable } from '../graph/flat-variable.js';
import { IntPair } from '../graph/int-pair.js';
import { SameDiffSubInstance } from '../graph/same-diff-sub-instance.js';
import { UpdaterState } from '../graph/updater-state.js';


export class FlatGraph {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlatGraph {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlatGraph(bb:flatbuffers.ByteBuffer, obj?:FlatGraph):FlatGraph {
  return (obj || new FlatGraph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlatGraph(bb:flatbuffers.ByteBuffer, obj?:FlatGraph):FlatGraph {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlatGraph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

variables(index: number, obj?:FlatVariable):FlatVariable|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FlatVariable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

variablesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

nodes(index: number, obj?:FlatNode):FlatNode|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FlatNode()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

nodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

outputs(index: number, obj?:IntPair):IntPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new IntPair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

outputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

configuration(obj?:FlatConfiguration):FlatConfiguration|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new FlatConfiguration()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

placeholders(index: number):string
placeholders(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
placeholders(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

placeholdersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

lossVariables(index: number):string
lossVariables(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
lossVariables(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

lossVariablesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

trainingConfig():string|null
trainingConfig(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trainingConfig(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

updaterState(index: number, obj?:UpdaterState):UpdaterState|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new UpdaterState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

updaterStateLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

metadataKeys(index: number):string
metadataKeys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
metadataKeys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

metadataKeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

metadataValues(index: number):string
metadataValues(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
metadataValues(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

metadataValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

subInstances(index: number, obj?:SameDiffSubInstance):SameDiffSubInstance|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new SameDiffSubInstance()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

subInstancesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFlatGraph(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addId(builder:flatbuffers.Builder, id:bigint) {
  builder.addFieldInt64(0, id, BigInt('0'));
}

static addVariables(builder:flatbuffers.Builder, variablesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, variablesOffset, 0);
}

static createVariablesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVariablesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNodes(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nodesOffset, 0);
}

static createNodesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOutputs(builder:flatbuffers.Builder, outputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, outputsOffset, 0);
}

static createOutputsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOutputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addConfiguration(builder:flatbuffers.Builder, configurationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, configurationOffset, 0);
}

static addPlaceholders(builder:flatbuffers.Builder, placeholdersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, placeholdersOffset, 0);
}

static createPlaceholdersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlaceholdersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLossVariables(builder:flatbuffers.Builder, lossVariablesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, lossVariablesOffset, 0);
}

static createLossVariablesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLossVariablesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrainingConfig(builder:flatbuffers.Builder, trainingConfigOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, trainingConfigOffset, 0);
}

static addUpdaterState(builder:flatbuffers.Builder, updaterStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, updaterStateOffset, 0);
}

static createUpdaterStateVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUpdaterStateVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMetadataKeys(builder:flatbuffers.Builder, metadataKeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, metadataKeysOffset, 0);
}

static createMetadataKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMetadataKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMetadataValues(builder:flatbuffers.Builder, metadataValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, metadataValuesOffset, 0);
}

static createMetadataValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMetadataValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSubInstances(builder:flatbuffers.Builder, subInstancesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, subInstancesOffset, 0);
}

static createSubInstancesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubInstancesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFlatGraph(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFlatGraphBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFlatGraphBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):FlatGraph {
  return FlatGraph.getRootAsFlatGraph(new flatbuffers.ByteBuffer(buffer))
}
}
