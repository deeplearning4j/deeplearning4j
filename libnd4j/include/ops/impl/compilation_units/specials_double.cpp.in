/*
* ******************************************************************************
* *
* *
* * This program and the accompanying materials are made available under the
* * terms of the Apache License, Version 2.0 which is available at
* * https://www.apache.org/licenses/LICENSE-2.0.
* *
* * See the NOTICE file distributed with this work for additional
* * information regarding copyright ownership.
* * Unless required by applicable law or agreed to in writing, software
* * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* * License for the specific language governing permissions and limitations
* * under the License.
* *
* * SPDX-License-Identifier: Apache-2.0
* *****************************************************************************
*/

//
// @author raver119@gmail.com
// @date Dec 26, 2024 // Adjusted date format/value to match example style
//

#include <ops/specials_double.hpp> // Original include
#include <system/type_boilerplate.h> // For type lists like SD_NUMERIC_TYPES_PART_X
#include <loops/pairwise_instantiations.h> // For ITERATE_COMBINATIONS macro
// Note: Instantiations are generated to prevent compiler memory issues

namespace sd {

// Instantiation for DoubleMethods class template
// Based on the types defined by the combination of partitions @COMB1@ and @COMB2@
ITERATE_COMBINATIONS(
   SD_NUMERIC_TYPES_PART_@COMB1@,
   SD_NUMERIC_TYPES_PART_@COMB2@,
   template class sd::DoubleMethods, // Template pattern for the class
   DoubleMethods,                   // Base name (used internally by macro/CMake)
   ;                                // Trailing semicolon for the instantiation
)

// Instantiation for SpecialTypeConverter::convertGeneric function template
// Based on the types defined by the combination of partitions @COMB1@ and @COMB2@
// NOTE: Using ITERATE_COMBINATIONS_3 pattern for function signature, adapting for 2 types
INSTANTIATE_PAIRWISE_FUNCTION(
   SD_NUMERIC_TYPES_PART_@COMB1@,
   SD_NUMERIC_TYPES_PART_@COMB2@,
   sd::SpecialTypeConverter, // Class containing the static method (or namespace if free function)
   convertGeneric,          // Method/Function name
   // Signature of the function template being instantiated
   (sd::Pointer * extras, void *dx, sd::LongType N, void *dz)
)

} // namespace sd