/*
* ******************************************************************************
* *
* *
* * This program and the accompanying materials are made available under the
* * terms of the Apache License, Version 2.0 which is available at
* * https://www.apache.org/licenses/LICENSE-2.0.
* *
* * See the NOTICE file distributed with this work for additional
* * information regarding copyright ownership.
* * Unless required by applicable law or agreed to in writing, software
* * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* * License for the specific language governing permissions and limitations
* * under the License.
* *
* * SPDX-License-Identifier: Apache-2.0
* *****************************************************************************
*/

//
// @author raver119@gmail.com
// Standardized template using partitioned type system
//

#include <ops/impl/specials_double.hpp>
#include <system/type_boilerplate.h>
#include <loops/pairwise_instantiations.h>

// Standardized generation using partitioned types
// This template generates instantiations for double-precision special operations

namespace sd {

    // Use the standardized combination system for class instantiation
    ITERATE_COMBINATIONS(
        SD_COMMON_TYPES_PART_@COMB1@,
        SD_COMMON_TYPES_PART_@COMB2@,
        INSTANT_PROCESS_CLASSCOMBINATION,
        sd::DoubleMethods,
        ()
    )

    // Use the standardized combination system for function instantiation
    ITERATE_COMBINATIONS(
        SD_COMMON_TYPES_PART_@COMB1@,
        SD_COMMON_TYPES_PART_@COMB2@,
        INSTANT_PROCESS_COMBINATION,
        sd::SpecialTypeConverter::convertGeneric,
        (sd::Pointer * extras, void *dx, sd::LongType N, void *dz);
    )

}
