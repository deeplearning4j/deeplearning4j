/* ******************************************************************************
*
*
* This program and the accompanying materials are made available under the
* terms of the Apache License, Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0.
*
*  See the NOTICE file distributed with this work for additional
*  information regarding copyright ownership.
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*
* SPDX-License-Identifier: Apache-2.0
******************************************************************************/

//
// Created by raver on 6/12/2018.
//

#ifndef LIBND4J_TYPE_BOILERPLATE_H
#define LIBND4J_TYPE_BOILERPLATE_H

/*
*
* Selector Macros:
SELECTOR_TRIPLE_3, SELECTOR_TRIPLE_2, SELECTOR_TRIPLE, SELECTOR_SINGLE, SELECTOR_SINGLE_THRICE, SELECTOR_SINGLE_TWICE, SELECTOR_PARTIAL_SINGLE: These macros are used to generate switch-case statements for different combinations of types. They help in selecting the appropriate template instantiation based on the provided types.
Template Macros:
TEMPLATE_SINGLE_TWICE: This macro is used to instantiate a template with two identical types.
Random Macros:
RANDOMSINGLE, RANDOMSINGLEU, RANDOMDOUBLE, RANDOMDOUBLE2, RANDOMPAIRWISE, RANDOMTRIPLE3, RANDOMTRIPLE2, RANDOMTRIPLE: These macros are used to generate template instantiations for various combinations of types.
Broadcast Macros:
BROADCAST, BROADCAST_BOOL: These macros are used to create tuples for broadcast operations.
Type Lists:
ALL_STRINGS, ALL_INDICES, ALL_INTS, ALL_FLOATS: These macros define lists of data types for strings, indices, integers, and floating-point numbers.
Utility Macros:
EXPAND, CAT, PP_NARGS, GET, GET_FIRST, GET_SECOND: These macros are utility functions for manipulating and expanding macro arguments.
Combination Iteration Macros:
PROCESS_COMBINATION, CALLBACK_PROCESS_COMBINATION, INNER_LOOP_*, OUTER_LOOP_*, ITERATE_COMBINATIONS: These macros are used to iterate over combinations of types and apply a callback function to each combination.
Three-Level Combination Iteration Macros:
PROCESS_COMBINATION_3, CALLBACK_PROCESS_COMBINATION_3, INNER_LOOP_*_3, MIDDLE_LOOP_*_3, OUTER_LOOP_*_3, ITERATE_COMBINATIONS_3: These macros extend the combination iteration to three levels.
Template Instantiation Macros:
INSTANT_PROCESS_COMBINATION, INSTANT_PROCESS_COMBINATION_3, INSTANT_PROCESS_COMBINATION_CLASS, INSTANT_PROCESS_COMBINATION_CLASS_3: These macros are used to instantiate templates for specific type combinations.
* */

#define EXPAND(...) __VA_ARGS__
#define EXPAND2(...) __VA_ARGS__
#define EXPAND3(...) __VA_ARGS__
#define EXTRACT(...) EXTRACT __VA_ARGS__
#define NOTHING_EXTRACT
#define PASTE(x, ...) x##__VA_ARGS__
#define PASTE2(x, ...) x##__VA_ARGS__
#define PASTE3(x, ...) x##__VA_ARGS__
#define EVALUATING_PASTE(x, ...) PASTE(x, __VA_ARGS__)
#define EVALUATING_PASTE2(x, ...) PASTE2(x, __VA_ARGS__)
#define EVALUATING_PASTE3(x, ...) PASTE3(x, __VA_ARGS__)
#define UNPAREN(x) EVALUATING_PASTE(NOTHING_, EXTRACT x)
#define UNPAREN2(x) EVALUATING_PASTE2(NOTHING_, EXTRACT x)
#define UNPAREN3(x) EVALUATING_PASTE3(NOTHING_, EXTRACT x)
#define EVAL(x) x
#define EVALX(x) x
#define EVAL0(...) EVAL1(EVAL1(EVAL1(__VA_ARGS__)))
#define EVAL1(...) EVAL2(EVAL2(EVAL2(__VA_ARGS__)))
#define EVAL2(...) EVAL3(EVAL3(EVAL3(__VA_ARGS__)))
#define EVAL3(...) EVAL4(EVAL4(EVAL4(__VA_ARGS__)))
#define EVAL4(...) EVAL5(EVAL5(EVAL5(__VA_ARGS__)))
#define EVAL5(...) __VA_ARGS__

#define SEL_T_1(WHAT, NAME, SIGNATURE, TYPE_A) WHAT(NAME, SIGNATURE, TYPE_A)
#define SEL_T_2(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_1(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_3(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_2(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_4(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_3(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_5(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_4(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_6(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_5(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_7(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_6(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_8(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_7(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_9(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_8(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_10(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_9(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_11(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_10(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_12(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_11(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_13(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_12(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_14(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_13(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_15(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_14(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_16(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_15(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_17(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_16(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_18(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_17(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_19(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_18(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define SEL_T_20(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(SEL_T_19(WHAT, NAME, SIGNATURE, __VA_ARGS__))

#define SEL_TT1_1(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)
#define SEL_TT1_2(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_1(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_3(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_2(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_4(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_3(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_5(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_4(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_6(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_5(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_7(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_6(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_8(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_7(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_9(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_8(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_10(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_9(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_11(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_10(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_12(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_11(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_13(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_12(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_14(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_13(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_15(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_14(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_16(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_15(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_17(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_16(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_18(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_17(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_19(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_18(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT1_20(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(YTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT1_19(WHAT, YTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))

#define SEL_P1_1(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)
#define SEL_P1_2(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P1_1(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_3(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P1_2(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_4(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P1_3(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_5(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P1_4(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_6(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P1_5(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_7(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P1_6(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_8(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P1_7(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_9(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P1_8(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_10(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_9(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_11(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_10(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_12(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_11(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_13(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_12(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_14(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_13(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_15(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_14(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_16(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_15(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_17(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_16(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_18(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_17(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_19(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_18(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P1_20(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P1_19(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))

#define SEL_P2_1(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)
#define SEL_P2_2(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P2_1(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_3(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P2_2(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_4(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P2_3(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_5(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P2_4(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_6(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P2_5(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_7(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P2_6(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_8(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P2_7(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_9(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                      \
 EVAL(SEL_P2_8(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_10(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_9(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_11(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_10(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_12(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_11(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_13(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_12(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_14(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_13(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_15(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_14(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_16(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_15(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_17(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_16(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_18(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_17(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_19(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_18(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_P2_20(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B)                       \
 EVAL(SEL_P2_19(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))

#define SEL_TT2_1(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B) WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B)
#define SEL_TT2_2(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_1(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_3(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_2(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_4(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_3(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_5(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_4(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_6(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_5(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_7(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_6(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_8(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_7(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_9(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_8(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_10(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_9(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_11(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_10(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_12(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_11(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_13(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_12(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_14(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_13(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_15(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_14(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_16(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_15(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_17(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_16(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_18(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_17(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_19(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_18(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define SEL_TT2_20(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(SEL_TT2_19(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))

#define DS_1(WHAT, NAME, SIGNATURE, TYPE_A) WHAT(NAME, SIGNATURE, TYPE_A)
#define DS_2(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_1(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_3(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_2(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_4(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_3(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_5(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_4(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_6(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_5(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_7(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_6(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_8(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_7(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_9(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_8(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_10(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_9(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_11(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_10(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_12(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_11(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_13(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_12(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_14(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_13(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_15(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_14(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_16(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_15(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_17(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_16(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_18(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_17(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_19(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_18(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DS_20(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DS_19(WHAT, NAME, SIGNATURE, __VA_ARGS__))

#define DP_1(WHAT, NAME, SIGNATURE, TYPE_A) WHAT(NAME, SIGNATURE, TYPE_A)
#define DP_2(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_1(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_3(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_2(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_4(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_3(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_5(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_4(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_6(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_5(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_7(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_6(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_8(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_7(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_9(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_8(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_10(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_9(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_11(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_10(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_12(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_11(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_13(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_12(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_14(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_13(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_15(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_14(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_16(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_15(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_17(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_16(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_18(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_17(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_19(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_18(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_20(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_19(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_21(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_20(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_22(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_21(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_23(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_22(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_24(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_23(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_25(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_24(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_26(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_25(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_27(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_26(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_28(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_27(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_29(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_28(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_30(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_29(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_31(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_30(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_32(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_31(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_33(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_32(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_34(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_33(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_35(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_34(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_36(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_35(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_37(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_36(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_38(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_37(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_39(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_38(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_40(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_39(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_41(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_40(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_42(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_41(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_43(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_42(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_44(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_43(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_45(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_44(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_46(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_45(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_47(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_46(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_48(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_47(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_49(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_48(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_50(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_49(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_51(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_50(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_52(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_51(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_53(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_52(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_54(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_53(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_55(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_54(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_56(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_55(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_57(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_56(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_58(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_57(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_59(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_58(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_60(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_59(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_61(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_60(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_62(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_61(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_63(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_62(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_64(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_63(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_65(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_64(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_66(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_65(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_67(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_66(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_68(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_67(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_69(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_68(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_70(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_69(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_71(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_70(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_72(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_71(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_73(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_72(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_74(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_73(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_75(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_74(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_76(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_75(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_77(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_76(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_78(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_77(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_79(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_78(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_80(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_79(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_81(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_80(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_82(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_81(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_83(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_82(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_84(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_83(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_85(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_84(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_86(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_85(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_87(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_86(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_88(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_87(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_89(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_88(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_90(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_89(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_91(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_90(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_92(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_91(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_93(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_92(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_94(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_93(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_95(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_94(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_96(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_95(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_97(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_96(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_98(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_97(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_99(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_98(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_100(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_99(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_101(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_100(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_102(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_101(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_103(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_102(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_104(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_103(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_105(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_104(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_106(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_105(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_107(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_106(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_108(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_107(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_109(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_108(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_110(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_109(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_111(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_110(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_112(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_111(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_113(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_112(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_114(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_113(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_115(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_114(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_116(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_115(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_117(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_116(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_118(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_117(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_119(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_118(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_120(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_119(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_121(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_120(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_122(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_121(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_123(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_122(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_124(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_123(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define DP_125(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A) EVAL(DP_124(WHAT, NAME, SIGNATURE, __VA_ARGS__))

#define DT_1(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B) WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B)
#define DT_2(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_1(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_3(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_2(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_4(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_3(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_5(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_4(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_6(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_5(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_7(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_6(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_8(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_7(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_9(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_8(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_10(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_9(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_11(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_10(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_12(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_11(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_13(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_12(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_14(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_13(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_15(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_14(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_16(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_15(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_17(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_16(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_18(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_17(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_19(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_18(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT_20(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT_19(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))

#define DT2_1(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B) WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B)
#define DT2_2(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_1(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_3(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_2(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_4(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_3(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_5(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_4(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_6(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_5(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_7(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_6(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_8(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_7(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_9(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_8(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_10(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_9(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_11(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_10(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_12(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_11(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_13(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_12(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_14(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_13(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_15(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_14(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_16(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_15(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_17(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_16(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_18(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_17(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_19(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_18(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define DT2_20(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B) EVAL(DT2_19(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))

#define TTT1_1(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)
#define TTT1_2(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT1_1(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_3(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT1_2(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_4(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT1_3(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_5(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT1_4(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_6(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT1_5(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_7(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT1_6(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_8(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT1_7(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_9(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT1_8(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_10(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_9(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_11(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_10(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_12(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_11(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_13(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_12(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_14(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_13(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_15(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_14(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_16(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_15(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_17(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_16(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_18(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_17(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_19(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_18(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT1_20(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT1_19(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))

#define TTT2_1(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)
#define TTT2_2(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT2_1(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_3(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT2_2(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_4(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT2_3(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_5(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT2_4(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_6(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT2_5(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_7(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT2_6(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_8(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT2_7(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_9(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT2_8(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_10(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_9(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_11(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_10(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_12(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_11(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_13(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_12(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_14(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_13(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_15(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_14(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_16(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_15(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_17(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_16(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_18(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_17(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_19(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_18(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT2_20(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT2_19(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))

#define TTT3_1(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)
#define TTT3_2(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT3_1(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_3(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT3_2(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_4(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT3_3(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_5(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT3_4(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_6(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT3_5(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_7(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT3_6(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_8(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT3_7(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_9(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                    \
 EVAL(TTT3_8(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_10(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_9(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_11(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_10(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_12(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_11(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_13(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_12(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_14(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_13(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_15(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_14(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_16(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_15(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_17(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_16(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_18(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_17(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_19(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_18(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TTT3_20(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)                     \
 EVAL(TTT3_19(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))

#define TT1_1(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)
#define TT1_2(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_1(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_3(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_2(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_4(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_3(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_5(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_4(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_6(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_5(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_7(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_6(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_8(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_7(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_9(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_8(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_10(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_9(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_11(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_10(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_12(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_11(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_13(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_12(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_14(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_13(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_15(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_14(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_16(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_15(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_17(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_16(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_18(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_17(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_19(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_18(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT1_20(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT1_19(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))

#define TT2_1(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)
#define TT2_2(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_1(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_3(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_2(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_4(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_3(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_5(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_4(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_6(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_5(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_7(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_6(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_8(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_7(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_9(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_8(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_10(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_9(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_11(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_10(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_12(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_11(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_13(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_12(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_14(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_13(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_15(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_14(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_16(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_15(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_17(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_16(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_18(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_17(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_19(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_18(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT2_20(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT2_19(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))

#define TT3_1(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C)
#define TT3_2(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_1(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_3(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_2(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_4(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_3(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_5(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_4(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_6(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_5(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_7(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_6(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_8(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_7(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_9(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_8(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_10(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_9(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_11(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_10(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_12(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_11(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_13(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_12(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_14(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_13(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_15(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_14(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_16(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_15(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_17(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_16(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_18(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_17(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_19(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_18(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))
#define TT3_20(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C, ...) \
 WHAT(NAME, SIGNATURE, TYPE_A, TYPE_B, TYPE_C) EVAL(TT3_19(WHAT, NAME, SIGNATURE, TYPE_A, TYPE_B, __VA_ARGS__))

#define GET_MACRO_SEL_T(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, \
                       NAME, ...)                                                                                 \
 NAME
#define GET_MACRO_SEL_P1(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, \
                        NAME, ...)                                                                                 \
 NAME
#define GET_MACRO_SEL_P2(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, \
                        NAME, ...)                                                                                 \
 NAME
#define GET_MACRO_SEL_TT1(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, \
                         NAME, ...)                                                                                 \
 NAME
#define GET_MACRO_SEL_TT2(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, \
                         NAME, ...)                                                                                 \
 NAME
#define GET_MACRO_DS(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, NAME, \
                    ...)                                                                                             \
 NAME
#define GET_MACRO_DT(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, NAME, \
                    ...)                                                                                             \
 NAME
#define GET_MACRO_DP(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, \
                    _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,  \
                    _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59,  \
                    _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78,  \
                    _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97,  \
                    _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113,   \
                    _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, NAME, ...)              \
 NAME
#define GET_MACRO_DT2(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, NAME, \
                     ...)                                                                                             \
 NAME

#define GET_MACRO_TT1(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, NAME, \
                     ...)                                                                                             \
 NAME
#define GET_MACRO_TT2(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, NAME, \
                     ...)                                                                                             \
 NAME
#define GET_MACRO_TT3(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, NAME, \
                     ...)                                                                                             \
 NAME

#define GET_MACRO_TTT1(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, \
                      NAME, ...)                                                                                 \
 NAME
#define GET_MACRO_TTT2(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, \
                      NAME, ...)                                                                                 \
 NAME
#define GET_MACRO_TTT3(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, \
                      NAME, ...)                                                                                 \
 NAME

#define FOR_EACH_S1(WHAT, NAME, SIGNATURE, ...)                                                                       \
 EXPAND(GET_MACRO_SEL_T(__VA_ARGS__, SEL_T_20, SEL_T_19, SEL_T_18, SEL_T_17, SEL_T_16, SEL_T_15, SEL_T_14, SEL_T_13, \
                        SEL_T_12, SEL_T_11, SEL_T_10, SEL_T_9, SEL_T_8, SEL_T_7, SEL_T_6, SEL_T_5, SEL_T_4, SEL_T_3, \
                        SEL_T_2, SEL_T_1)(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define FOR_EACH_S2(WHAT, YTYPE, NAME, SIGNATURE, TYPES_A, ...)                                                 \
 EXPAND(GET_MACRO_SEL_TT1(__VA_ARGS__, SEL_TT1_20, SEL_TT1_19, SEL_TT1_18, SEL_TT1_17, SEL_TT1_16, SEL_TT1_15, \
                          SEL_TT1_14, SEL_TT1_13, SEL_TT1_12, SEL_TT1_11, SEL_TT1_10, SEL_TT1_9, SEL_TT1_8,    \
                          SEL_TT1_7, SEL_TT1_6, SEL_TT1_5, SEL_TT1_4, SEL_TT1_3, SEL_TT1_2,                    \
                          SEL_TT1_1)(WHAT, YTYPE, NAME, SIGNATURE, TYPES_A, __VA_ARGS__))
#define FOR_EACH_P1(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_A, ...)                                       \
 EXPAND(GET_MACRO_SEL_P1(__VA_ARGS__, SEL_P1_20, SEL_P1_19, SEL_P1_18, SEL_P1_17, SEL_P1_16, SEL_P1_15, SEL_P1_14, \
                         SEL_P1_13, SEL_P1_12, SEL_P1_11, SEL_P1_10, SEL_P1_9, SEL_P1_8, SEL_P1_7, SEL_P1_6,       \
                         SEL_P1_5, SEL_P1_4, SEL_P1_3, SEL_P1_2,                                                   \
                         SEL_P1_1)(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_A, __VA_ARGS__))
#define FOR_EACH_P2(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_A, ...)                                        \
 EXPAND2(GET_MACRO_SEL_P2(__VA_ARGS__, SEL_P2_20, SEL_P2_19, SEL_P2_18, SEL_P2_17, SEL_P2_16, SEL_P2_15, SEL_P2_14, \
                          SEL_P2_13, SEL_P2_12, SEL_P2_11, SEL_P2_10, SEL_P2_9, SEL_P2_8, SEL_P2_7, SEL_P2_6,       \
                          SEL_P2_5, SEL_P2_4, SEL_P2_3, SEL_P2_2,                                                   \
                          SEL_P2_1)(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_A, __VA_ARGS__))
#define FOR_EACH_S3(WHAT, NAME, SIGNATURE, TYPE_A, ...)                                                         \
 EXPAND(GET_MACRO_SEL_TT2(__VA_ARGS__, SEL_TT2_20, SEL_TT2_19, SEL_TT2_18, SEL_TT2_17, SEL_TT2_16, SEL_TT2_15, \
                          SEL_TT2_14, SEL_TT2_13, SEL_TT2_12, SEL_TT2_11, SEL_TT2_10, SEL_TT2_9, SEL_TT2_8,    \
                          SEL_TT2_7, SEL_TT2_6, SEL_TT2_5, SEL_TT2_4, SEL_TT2_3, SEL_TT2_2,                    \
                          SEL_TT2_1)(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define FOR_EACH_DS(WHAT, NAME, SIGNATURE, ...)                                                                       \
 EXPAND(GET_MACRO_DS(__VA_ARGS__, DS_20, DS_19, DS_18, DS_17, DS_16, DS_15, DS_14, DS_13, DS_12, DS_11, DS_10, DS_9, \
                     DS_8, DS_7, DS_6, DS_5, DS_4, DS_3, DS_2, DS_1)(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define FOR_EACH_DT(WHAT, NAME, SIGNATURE, TYPES_A, ...)                                                              \
 EXPAND(GET_MACRO_DT(__VA_ARGS__, DT_20, DT_19, DT_18, DT_17, DT_16, DT_15, DT_14, DT_13, DT_12, DT_11, DT_10, DT_9, \
                     DT_8, DT_7, DT_6, DT_5, DT_4, DT_3, DT_2, DT_1)(WHAT, NAME, SIGNATURE, TYPES_A, __VA_ARGS__))
#define FOR_EACH_DT2(WHAT, NAME, SIGNATURE, TYPE_A, ...)                                                            \
 EXPAND(GET_MACRO_DT2(__VA_ARGS__, DT2_20, DT2_19, DT2_18, DT2_17, DT2_16, DT2_15, DT2_14, DT2_13, DT2_12, DT2_11, \
                      DT2_10, DT2_9, DT2_8, DT2_7, DT2_6, DT2_5, DT2_4, DT2_3, DT2_2,                              \
                      DT2_1)(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define FOR_EACH_DP(WHAT, NAME, SIGNATURE, ...)                                                                       \
 EXPAND(GET_MACRO_DP(                                                                                                \
     __VA_ARGS__, DP_125, DP_124, DP_123, DP_122, DP_121, DP_120, DP_119, DP_118, DP_117, DP_116, DP_115, DP_114,    \
     DP_113, DP_112, DP_111, DP_110, DP_109, DP_108, DP_107, DP_106, DP_105, DP_104, DP_103, DP_102, DP_101, DP_100, \
     DP_99, DP_98, DP_97, DP_96, DP_95, DP_94, DP_93, DP_92, DP_91, DP_90, DP_89, DP_88, DP_87, DP_86, DP_85, DP_84, \
     DP_83, DP_82, DP_81, DP_80, DP_79, DP_78, DP_77, DP_76, DP_75, DP_74, DP_73, DP_72, DP_71, DP_70, DP_69, DP_68, \
     DP_67, DP_66, DP_65, DP_64, DP_63, DP_62, DP_61, DP_60, DP_59, DP_58, DP_57, DP_56, DP_55, DP_54, DP_53, DP_52, \
     DP_51, DP_50, DP_49, DP_48, DP_47, DP_46, DP_45, DP_44, DP_43, DP_42, DP_41, DP_40, DP_39, DP_38, DP_37, DP_36, \
     DP_35, DP_34, DP_33, DP_32, DP_31, DP_30, DP_29, DP_28, DP_27, DP_26, DP_25, DP_24, DP_23, DP_22, DP_21, DP_20, \
     DP_19, DP_18, DP_17, DP_16, DP_15, DP_14, DP_13, DP_12, DP_11, DP_10, DP_9, DP_8, DP_7, DP_6, DP_5, DP_4, DP_3, \
     DP_2, DP_1)(WHAT, NAME, SIGNATURE, __VA_ARGS__))

#define FOR_EACH_TT1(WHAT, NAME, SIGNATURE, TYPES_X, TYPES_Y, ...)                                                  \
 EXPAND(GET_MACRO_TT1(__VA_ARGS__, TT1_20, TT1_19, TT1_18, TT1_17, TT1_16, TT1_15, TT1_14, TT1_13, TT1_12, TT1_11, \
                      TT1_10, TT1_9, TT1_8, TT1_7, TT1_6, TT1_5, TT1_4, TT1_3, TT1_2,                              \
                      TT1_1)(WHAT, NAME, SIGNATURE, TYPES_X, TYPES_Y, __VA_ARGS__))
#define FOR_EACH_TT2(WHAT, NAME, SIGNATURE, TYPE_Z, TYPES_X, ...)                                                   \
 EXPAND(GET_MACRO_TT2(__VA_ARGS__, TT2_20, TT2_19, TT2_18, TT2_17, TT2_16, TT2_15, TT2_14, TT2_13, TT2_12, TT2_11, \
                      TT2_10, TT2_9, TT2_8, TT2_7, TT2_6, TT2_5, TT2_4, TT2_3, TT2_2,                              \
                      TT2_1)(WHAT, NAME, SIGNATURE, TYPE_Z, TYPES_X, __VA_ARGS__))
#define FOR_EACH_TT3(WHAT, NAME, SIGNATURE, TYPE_Z, TYPE_Y, ...)                                                    \
 EXPAND(GET_MACRO_TT3(__VA_ARGS__, TT3_20, TT3_19, TT3_18, TT3_17, TT3_16, TT3_15, TT3_14, TT3_13, TT3_12, TT3_11, \
                      TT3_10, TT3_9, TT3_8, TT3_7, TT3_6, TT3_5, TT3_4, TT3_3, TT3_2,                              \
                      TT3_1)(WHAT, NAME, SIGNATURE, TYPE_Z, TYPE_Y, __VA_ARGS__))

#define FOR_EACH_TTT1(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_Z, TYPES_Y, ...)                                     \
 EXPAND(GET_MACRO_TTT1(__VA_ARGS__, TTT1_20, TTT1_19, TTT1_18, TTT1_17, TTT1_16, TTT1_15, TTT1_14, TTT1_13, TTT1_12, \
                       TTT1_11, TTT1_10, TTT1_9, TTT1_8, TTT1_7, TTT1_6, TTT1_5, TTT1_4, TTT1_3, TTT1_2,             \
                       TTT1_1)(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_Z, TYPES_Y, __VA_ARGS__))
#define FOR_EACH_TTT2(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_X, TYPES_Z, ...)                                             \
 EXPAND(GET_MACRO_TTT2(__VA_ARGS__, TTT2_20, TTT2_19, TTT2_18, TTT2_17, TTT2_16, TTT2_15, TTT2_14, TTT2_13, TTT2_12, \
                       TTT2_11, TTT2_10, TTT2_9, TTT2_8, TTT2_7, TTT2_6, TTT2_5, TTT2_4, TTT2_3, TTT2_2,             \
                       TTT2_1)(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_X, TYPES_Z, __VA_ARGS__))
#define FOR_EACH_TTT3(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_X, TYPE_Y, ...)                                              \
 EXPAND(GET_MACRO_TTT3(__VA_ARGS__, TTT3_20, TTT3_19, TTT3_18, TTT3_17, TTT3_16, TTT3_15, TTT3_14, TTT3_13, TTT3_12, \
                       TTT3_11, TTT3_10, TTT3_9, TTT3_8, TTT3_7, TTT3_6, TTT3_5, TTT3_4, TTT3_3, TTT3_2,             \
                       TTT3_1)(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_X, TYPE_Y, __VA_ARGS__))

#define _EXEC_SELECTOR_T(WHAT, NAME, SIGNATURE, ...) EVAL(FOR_EACH_S1(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define _EXEC_SELECTOR_P_1(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_A, ...) \
 EVAL(FOR_EACH_P1(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_A, __VA_ARGS__))
#define _EXEC_SELECTOR_P_2(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, ...) \
 EVAL(FOR_EACH_P2(WHAT, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define _EXEC_SELECTOR_TT_1(WHAT, YTYPE, NAME, SIGNATURE, TYPES_A, ...) \
 EVAL(FOR_EACH_S2(WHAT, YTYPE, NAME, SIGNATURE, TYPES_A, __VA_ARGS__))
#define _EXEC_SELECTOR_TT_2(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 EVAL(FOR_EACH_S3(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define _EXEC_SINGLE_T(WHAT, NAME, SIGNATURE, ...) EVAL(FOR_EACH_DS(WHAT, NAME, SIGNATURE, __VA_ARGS__))
#define _EXEC_DOUBLE_T(WHAT, NAME, SIGNATURE, TYPES_A, ...) \
 EVAL(FOR_EACH_DT(WHAT, NAME, SIGNATURE, LIST(TYPES_A), __VA_ARGS__))
#define _EXEC_DOUBLE_T2(WHAT, NAME, SIGNATURE, TYPE_A, ...) \
 EVAL(FOR_EACH_DT2(WHAT, NAME, SIGNATURE, TYPE_A, __VA_ARGS__))
#define _EXEC_DOUBLE_P(WHAT, NAME, SIGNATURE, ...) EVAL(FOR_EACH_DP(WHAT, NAME, SIGNATURE, __VA_ARGS__))

#define _EXEC_SELECTOR_TTT_1(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_Z, TYPES_Y, ...) \
 EVAL(FOR_EACH_TTT1(WHAT, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_Z, TYPES_Y, __VA_ARGS__))
#define _EXEC_SELECTOR_TTT_2(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_X, TYPES_Z, ...) \
 EVAL(FOR_EACH_TTT2(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_X, TYPES_Z, __VA_ARGS__))
#define _EXEC_SELECTOR_TTT_3(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_X, TYPE_Y, ...) \
 EVAL(FOR_EACH_TTT3(WHAT, ZTYPE, NAME, SIGNATURE, TYPE_X, TYPE_Y, __VA_ARGS__))

#define _EXEC_TRIPLE_T3(WHAT, NAME, SIGNATURE, TYPE_Z, TYPE_Y, ...) \
 EVAL(FOR_EACH_TT3(WHAT, NAME, SIGNATURE, TYPE_Z, TYPE_Y, __VA_ARGS__))
#define _EXEC_TRIPLE_T2(WHAT, NAME, SIGNATURE, TYPE_Z, TYPES_X, ...) \
 EVAL(FOR_EACH_TT2(WHAT, NAME, SIGNATURE, TYPE_Z, LIST(TYPES_X), __VA_ARGS__))
#define _EXEC_TRIPLE_T1(WHAT, NAME, SIGNATURE, TYPES_X, TYPES_Y, ...) \
 EVAL(FOR_EACH_TT1(WHAT, NAME, SIGNATURE, LIST(TYPES_X), LIST(TYPES_Y), __VA_ARGS__))

#define DISPATCH_PAIRWISE(NAME, SIGNATURE, TYPE, TYPES_B) \
 EVAL(_EXEC_DOUBLE_T2(RANDOMPAIRWISE2, NAME, SIGNATURE, TYPE, TYPES_B))
#define DISPATCH_PAIRWISE2(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE, ...) \
 EVAL(_EXEC_SELECTOR_P_2(SELECTOR_PAIRWISE_2, XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE, __VA_ARGS__))

#define DISPATCH_DTYPES(NAME, SIGNATURE, TYPE, TYPES_B) \
 EVAL(_EXEC_DOUBLE_T2(RANDOMDOUBLE2, NAME, SIGNATURE, TYPE, TYPES_B))
#define DISPATCH_DTYPES2(NAME, SIGNATURE, TYPE, ...) \
 EVAL(_EXEC_SELECTOR_TT_2(SELECTOR_DOUBLE_2, NAME, SIGNATURE, TYPE, __VA_ARGS__))

#define DISPATCH_TTYPES2(ZTYPE, NAME, SIGNATURE, TYPE_X, TYPES_Z, ...) \
 EVAL(_EXEC_SELECTOR_TTT_2(SELECTOR_TRIPLE_2, ZTYPE, NAME, SIGNATURE, TYPE_X, TYPES_Z, __VA_ARGS__))
#define DISPATCH_TTYPES3(ZTYPE, NAME, SIGNATURE, TYPE_X, TYPE_Y, ...) \
 EVAL(_EXEC_SELECTOR_TTT_3(SELECTOR_TRIPLE_3, ZTYPE, NAME, SIGNATURE, TYPE_X, TYPE_Y, __VA_ARGS__))

#define BUILD_SINGLE_UNCHAINED_TEMPLATE(NAME, SIGNATURE, TYPES) \
 EVAL(_EXEC_SINGLE_T(RANDOMSINGLEU, NAME, (SIGNATURE), TYPES))
#define BUILD_SINGLE_TEMPLATE(NAME, SIGNATURE, TYPES) EVAL(_EXEC_SINGLE_T(RANDOMSINGLE, NAME, (SIGNATURE), TYPES))
#define BUILD_SINGLE_TEMPLATE_TWICE(NAME, SIGNATURE, TYPES) \
 EVAL(_EXEC_SELECTOR_T(TEMPLATE_SINGLE_TWICE, NAME, SIGNATURE, TYPES))
#define BUILD_DOUBLE_TEMPLATE(NAME, SIGNATURE, TYPES_A, TYPES_B) \
 EVAL(_EXEC_DOUBLE_T(RANDOMDOUBLE, NAME, (SIGNATURE), (TYPES_A), TYPES_B))
#define BUILD_SINGLE_SELECTOR(XTYPE, NAME, SIGNATURE, TYPES)                   \
 switch (XTYPE) {                                                             \
   EVAL(_EXEC_SELECTOR_T(SELECTOR_SINGLE, NAME, SIGNATURE, TYPES));           \
   default: {                                                                 \
     printf("[ERROR] Unknown dtypeX=%d on %s:%d", XTYPE, __FILE__, __LINE__); \
     fflush(stdout);                                                          \
     THROW_EXCEPTION("bad data type");                               \
   }                                                                          \
 }
#define BUILD_SINGLE_SELECTOR_TWICE(XTYPE, NAME, SIGNATURE, TYPES)             \
 switch (XTYPE) {                                                             \
   EVAL(_EXEC_SELECTOR_T(SELECTOR_SINGLE_TWICE, NAME, SIGNATURE, TYPES));     \
   default: {                                                                 \
     printf("[ERROR] Unknown dtypeX=%d on %s:%d", XTYPE, __FILE__, __LINE__); \
     fflush(stdout);                                                          \
     THROW_EXCEPTION("bad data type");                               \
   }                                                                          \
 }
#define BUILD_SINGLE_SELECTOR_THRICE(XTYPE, NAME, SIGNATURE, TYPES)            \
 switch (XTYPE) {                                                             \
   EVAL(_EXEC_SELECTOR_T(SELECTOR_SINGLE_THRICE, NAME, SIGNATURE, TYPES));    \
   default: {                                                                 \
     printf("[ERROR] Unknown dtypeX=%d on %s:%d", XTYPE, __FILE__, __LINE__); \
     fflush(stdout);                                                          \
     THROW_EXCEPTION("bad data type");                               \
   }                                                                          \
 }

#define BUILD_SINGLE_PARTIAL_SELECTOR(XTYPE, NAME, SIGNATURE, TYPES)           \
 switch (XTYPE) {                                                             \
   EVAL(_EXEC_SELECTOR_T(SELECTOR_PARTIAL_SINGLE, NAME, SIGNATURE, TYPES));   \
   default: {                                                                 \
     printf("[ERROR] Unknown dtypeX=%d on %s:%d", XTYPE, __FILE__, __LINE__); \
     fflush(stdout);                                                          \
     THROW_EXCEPTION("bad data type");                               \
   }                                                                          \
 }
#define BUILD_DOUBLE_SELECTOR(XTYPE, YTYPE, NAME, SIGNATURE, TYPES_A, TYPES_B)                \
 switch (XTYPE) {                                                                            \
   EVAL(_EXEC_SELECTOR_TT_1(SELECTOR_DOUBLE, YTYPE, NAME, (SIGNATURE), (TYPES_B), TYPES_A)); \
   default: {                                                                                \
     printf("[ERROR] Unknown dtypeX=%d on %s:%d", XTYPE, __FILE__, __LINE__);                \
     fflush(stdout);                                                                         \
     THROW_EXCEPTION("bad data type");                                              \
   }                                                                                         \
 }
#define BUILD_TRIPLE_SELECTOR(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_X, TYPES_Y, TYPES_Z)                 \
 switch (XTYPE) {                                                                                             \
   EVAL(_EXEC_SELECTOR_TTT_1(SELECTOR_TRIPLE, YTYPE, ZTYPE, NAME, SIGNATURE, (TYPES_Z), (TYPES_Y), TYPES_X)); \
   default: {                                                                                                 \
     printf("[ERROR] Unknown dtypeX=%d on %s:%d", XTYPE, __FILE__, __LINE__);                                 \
     fflush(stdout);                                                                                          \
     THROW_EXCEPTION("bad data type");                                                               \
   }                                                                                                          \
 }
#define BUILD_TRIPLE_TEMPLATE(NAME, SIGNATURE, TYPES_X, TYPES_Y, TYPES_Z) \
 EVAL(_EXEC_TRIPLE_T1(RANDOMTRIPLE, NAME, (SIGNATURE), (TYPES_X), (TYPES_Y), TYPES_Z))
#define BUILD_PAIRWISE_TEMPLATE(NAME, SIGNATURE, TYPES_A) \
 EVAL(_EXEC_DOUBLE_P(RANDOMPAIRWISE, NAME, (SIGNATURE), TYPES_A))
#define BUILD_PAIRWISE_SELECTOR(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_A, TYPES_B)                      \
 switch (XTYPE) {                                                                                           \
   EVAL(_EXEC_SELECTOR_P_1(SELECTOR_PAIRWISE, XTYPE, YTYPE, ZTYPE, NAME, (SIGNATURE), (TYPES_B), TYPES_A)); \
   default: {                                                                                               \
     printf("[ERROR] Unknown dtypeX=%d on %s:%d", XTYPE, __FILE__, __LINE__);                               \
     fflush(stdout);                                                                                        \
     THROW_EXCEPTION("bad data type");                                                             \
   }                                                                                                        \
 }




// Helper macro to apply a macro to arguments, forcing expansion
#define APPLY(macro, args) macro args

#define LIST(...) __VA_ARGS__

#define _SELECTOR_DOUBLE_2(NAME, SIGNATURE, TYPE_A, ENUM, TYPE_B) \
 case ENUM: {                                                    \
   NAME<TYPE_A, TYPE_B> SIGNATURE;                               \
   break;                                                        \
 };
#define SELECTOR_DOUBLE_2(NAME, SIGNATURE, TYPE_A, TYPE_B) \
 EVALUATING_PASTE2(_SELECT, OR_DOUBLE_2(NAME, UNPAREN3(SIGNATURE), TYPE_A, UNPAREN3(TYPE_B)))

#define _SELECTOR_DOUBLE(YTYPE, NAME, SIGNATURE, ENUM, TYPE_A, ...)                \
 case ENUM: {                                                                     \
   switch (YTYPE) {                                                               \
     EXPAND(DISPATCH_DTYPES2(NAME, SIGNATURE, TYPE_A, __VA_ARGS__));              \
     default: {                                                                   \
       printf("[ERROR] Unknown dtypeX=%d on %s:%d\n", YTYPE, __FILE__, __LINE__); \
       fflush(stdout);                                                            \
     }                                                                            \
   };                                                                             \
   break;                                                                         \
 };
#define SELECTOR_DOUBLE(YTYPE, NAME, SIGNATURE, TYPES_B, TYPE_A) \
 EVALUATING_PASTE(_SELECTOR, _DOUBLE(YTYPE, NAME, SIGNATURE, UNPAREN(TYPE_A), UNPAREN(TYPES_B)))

#define _SELECTOR_PAIRWISE_2(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, ENUM, TYPE_B) \
 case ENUM: {                                                                           \
   if (ZTYPE == YTYPE) {                                                                \
     NAME<TYPE_A, TYPE_B, TYPE_B> SIGNATURE;                                            \
   } else if (XTYPE == ZTYPE) {                                                         \
     NAME<TYPE_A, TYPE_B, TYPE_A> SIGNATURE;                                            \
   } else {                                                                             \
     printf("[ERROR] Unknown dtypeX=%d on %s:%d\n", YTYPE, __FILE__, __LINE__);         \
     fflush(stdout);                                                                    \
     THROW_EXCEPTION("Unknown Z operand");                                     \
   };                                                                                   \
   break;                                                                               \
 };
#define SELECTOR_PAIRWISE_2(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, TYPE_B) \
 EVALUATING_PASTE2(_SELECT, OR_PAIRWISE_2(XTYPE, YTYPE, ZTYPE, NAME, UNPAREN3(SIGNATURE), TYPE_A, UNPAREN3(TYPE_B)))
#define _SELECTOR_PAIRWISE(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, ENUM, TYPE_A, ...)          \
 case ENUM: {                                                                               \
   switch (YTYPE) {                                                                         \
     EXPAND(DISPATCH_PAIRWISE2(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPE_A, __VA_ARGS__)); \
     default: {                                                                             \
       printf("[ERROR] Unknown dtypeX=%d on %s:%d\n", YTYPE, __FILE__, __LINE__);           \
       fflush(stdout);                                                                      \
     }                                                                                      \
   };                                                                                       \
   break;                                                                                   \
 };
#define SELECTOR_PAIRWISE(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_B, TYPE_A) \
 EVALUATING_PASTE(_SELECTOR, _PAIRWISE(XTYPE, YTYPE, ZTYPE, NAME, SIGNATURE, UNPAREN(TYPE_A), UNPAREN(TYPES_B)))

#define _SELECTOR_TRIPLE_3(NAME, SIGNATURE, TYPE_X, TYPE_Y, ENUM_Z, TYPE_Z) \
 case ENUM_Z: {                                                            \
   NAME<TYPE_X, TYPE_Y, TYPE_Z> SIGNATURE;                                 \
 }; break;
#define SELECTOR_TRIPLE_3(ZTYPE, NAME, SIGNATURE, TYPE_X, TYPE_Y, TYPE_Z) \
 EVALUATING_PASTE3(_SELECTOR, _TRIPLE_3(NAME, SIGNATURE, TYPE_X, TYPE_Y, UNPAREN3(TYPE_Z)))
#define _SELECTOR_TRIPLE_2(ZTYPE, NAME, SIGNATURE, TYPE_X, ENUM_Y, TYPE_Y, TYPES_Z)         \
 case ENUM_Y: {                                                                            \
   switch (ZTYPE) {                                                                        \
     EXPAND2(DISPATCH_TTYPES3(ZTYPE, NAME, SIGNATURE, TYPE_X, TYPE_Y, UNPAREN3(TYPES_Z))); \
     default: {                                                                            \
       printf("[ERROR] Unknown dtypeZ=%d on %s:%d\n", ZTYPE, __FILE__, __LINE__);          \
       ;                                                                                   \
       fflush(stdout);                                                                     \
     }                                                                                     \
   }                                                                                       \
   break;                                                                                  \
 };
#define SELECTOR_TRIPLE_2(ZTYPE, NAME, SIGNATURE, TYPE_X, TYPES_Z, TYPE_Y) \
 EVALUATING_PASTE2(_SELECTOR, _TRIPLE_2(ZTYPE, NAME, SIGNATURE, TYPE_X, UNPAREN2(TYPE_Y), TYPES_Z))
#define _SELECTOR_TRIPLE(YTYPE, ZTYPE, NAME, SIGNATURE, ENUM_X, TYPE_X, TYPES_Z, ...) \
 case ENUM_X: {                                                                      \
   switch (YTYPE) {                                                                  \
     EXPAND(DISPATCH_TTYPES2(ZTYPE, NAME, SIGNATURE, TYPE_X, TYPES_Z, __VA_ARGS__)); \
     default: {                                                                      \
       printf("[ERROR] Unknown dtypeY=%d on %s:%d\n", YTYPE, __FILE__, __LINE__);    \
       ;                                                                             \
       fflush(stdout);                                                               \
     }                                                                               \
   }                                                                                 \
   break;                                                                            \
 };
#define SELECTOR_TRIPLE(YTYPE, ZTYPE, NAME, SIGNATURE, TYPES_Z, TYPES_Y, TYPE_X) \
 EVALUATING_PASTE(_SELECTOR, _TRIPLE(YTYPE, ZTYPE, NAME, SIGNATURE, UNPAREN(TYPE_X), TYPES_Z, UNPAREN(TYPES_Y)))

#define _SELECTOR_SINGLE(A, B, C, D) \
 case C: {                          \
   A<D> B;                          \
   break;                           \
 };
#define SELECTOR_SINGLE(A, B, C) EVALUATING_PASTE(_SEL, ECTOR_SINGLE(A, B, UNPAREN(C)))

#define _SELECTOR_SINGLE_THRICE(A, B, C, D) \
 case C: {                                 \
   A<D, D, D> B;                           \
   break;                                  \
 };
#define SELECTOR_SINGLE_THRICE(A, B, C) EVALUATING_PASTE(_SEL, ECTOR_SINGLE_THRICE(A, B, UNPAREN(C)))

#define _SELECTOR_SINGLE_TWICE(A, B, C, D) \
 case C: {                                \
   A<D, D> B;                             \
   break;                                 \
 };
#define SELECTOR_SINGLE_TWICE(A, B, C) EVALUATING_PASTE(_SEL, ECTOR_SINGLE_TWICE(A, B, UNPAREN(C)))

#define _TEMPLATE_SINGLE_TWICE(A, B, C, D) A<D, D> B;
#define TEMPLATE_SINGLE_TWICE(A, B, C) EVALUATING_PASTE(_TEM, PLATE_SINGLE_TWICE(A, B, UNPAREN(C)))

#define _SELECTOR_PARTIAL_SINGLE(A, B, C, D) \
 case C: {                                  \
   A D, UNPAREN2(B);                        \
   break;                                   \
 };
#define SELECTOR_PARTIAL_SINGLE(A, B, C) EVALUATING_PASTE(_SEL, ECTOR_PARTIAL_SINGLE(A, B, UNPAREN(C)))

#define _RANDOMSINGLE(A, B, C, D) A<D> B;
#define _RANDOMSINGLEU(A, B, C, D) A D B;
#define RANDOMSINGLE(A, B, C) EVALUATING_PASTE(_RAND, OMSINGLE(A, UNPAREN(B), UNPAREN(C)))
#define RANDOMSINGLEU(A, B, C) EVALUATING_PASTE(_RAND, OMSINGLEU(A, UNPAREN(B), UNPAREN(C)))
#define RANDOMDOUBLE(A, B, C, D) EXPAND(DISPATCH_DTYPES(A, UNPAREN(B), D, UNPAREN(C)))

#define _RANDOMDOUBLE2(A, B, C, D, E, F) A<F, D> B;
#define RANDOMDOUBLE2(A, B, C, D) EVALUATING_PASTE(_RAND, OMDOUBLE2(A, B, UNPAREN(C), UNPAREN(D)))

#define _RANDOMPAIRWISE2(A, B, C, D, E) A<B, C, D> E;
#define RANDOMPAIRWISE(A, B, C) EVALUATING_PASTE(_RANDOM, PAIRWISE2(A, UNPAREN(C), UNPAREN(B)))

#define _RANDOMTRIPLE3(A, B, ZN, ZT, YN, YT, XN, XT) A<XT, YT, ZT> B;
#define RANDOMTRIPLE3(A, B, Z, Y, X) \
 EVALUATING_PASTE(_RANDOM, TRIPLE3(A, UNPAREN(B), UNPAREN(Z), UNPAREN(Y), UNPAREN(X)))

#define _RANDOMTRIPLE2(NAME, SIGNATURE, TYPE_Z, TYPE_Y, TYPES_X) \
 EVALX(_EXEC_TRIPLE_T3(RANDOMTRIPLE3, NAME, SIGNATURE, TYPE_Z, TYPE_Y, UNPAREN(TYPES_X)))
#define RANDOMTRIPLE2(NAME, SIGNATURE, TYPE_Z, TYPES_X, TYPE_Y) _RANDOMTRIPLE2(NAME, SIGNATURE, TYPE_Z, TYPE_Y, TYPES_X)
#define _RANDOMTRIPLE(NAME, SIGNATURE, TYPE_Z, TYPES_X, TYPES_Y) \
 EVAL(_EXEC_TRIPLE_T2(RANDOMTRIPLE2, NAME, SIGNATURE, TYPE_Z, TYPES_X, UNPAREN(TYPES_Y)))
#define RANDOMTRIPLE(NAME, SIGNATURE, TYPES_X, TYPES_Y, TYPE_Z) _RANDOMTRIPLE(NAME, SIGNATURE, TYPE_Z, TYPES_X, TYPES_Y)

#define BROADCAST(NAME) sd::BroadcastOpsTuple::custom(sd::scalar::NAME, sd::pairwise::NAME, sd::broadcast::NAME)
#define BROADCAST_BOOL(NAME) \
 sd::BroadcastBoolOpsTuple::custom(sd::scalar::NAME, sd::pairwise::NAME, sd::broadcast::NAME)

#define ALL_STRINGS sd::DataType::UTF8, sd::DataType::UTF16, sd::DataType::UTF32
#define ALL_INDICES sd::DataType::INT32, sd::DataType::INT64
#define ALL_INTS                                                                                           \
 sd::DataType::INT8, sd::DataType::UINT8, sd::DataType::INT16, sd::DataType::UINT16, sd::DataType::INT32, \
     sd::DataType::UINT32, sd::DataType::INT64, sd::DataType::UINT64
#define ALL_FLOATS sd::DataType::HALF, sd::DataType::FLOAT32, sd::DataType::DOUBLE, sd::DataType::BFLOAT16


#define EXPAND(...) __VA_ARGS__
#define CAT(a, b) CAT_IMPL(a, b)
#define CAT_IMPL(a, b) a##b

#define PP_NARGS(...) PP_NARGS_IMPL(__VA_ARGS__, PP_RSEQ_N())
#define PP_NARGS_IMPL(...) PP_ARG_N(__VA_ARGS__)
#define PP_ARG_N(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,N,...) N
#define PP_RSEQ_N() 16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0


#define GET(n, list) CAT(GET_, n) list

#define GET_0(t1, ...) t1
#define GET_1(t1, t2, ...) t2
#define GET_2(t1, t2, t3, ...) t3
#define GET_3(t1, t2, t3, t4, ...) t4
#define GET_4(t1, t2, t3, t4, t5, ...) t5
#define GET_5(t1, t2, t3, t4, t5, t6, ...) t6
#define GET_6(t1, t2, t3, t4, t5, t6, t7, ...) t7
#define GET_7(t1, t2, t3, t4, t5, t6, t7, t8, ...) t8
#define GET_8(t1, t2, t3, t4, t5, t6, t7, t8, t9, ...) t9
#define GET_9(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, ...) t10
#define GET_10(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, ...) t11
#define GET_11(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, ...) t12
#define GET_12(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, ...) t13
#define GET_13(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, ...) t14
#define GET_14(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, ...) t15
#define GET_15(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, ...) t16

#define GET_FIRST_IMPL(a, b) a
#define GET_FIRST(tuple) GET_FIRST_IMPL tuple


#define GET_SECOND_IMPL(a, b) b
#define GET_SECOND(tuple) GET_SECOND_IMPL tuple


#define PROCESS_COMBINATION(a1, b1, a2, b2,FUNC_NAME,ARGS) \
   std::cout << "(" << a1 << ", " << b1 << ", " << a2 << ", " << b2 << ")\n";


#define INNER_LOOP_1(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(0, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_2(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_1(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(1, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_3(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_2(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(2, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_4(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_3(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(3, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_5(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_4(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(4, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_6(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_5(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(5, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_7(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_6(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(6, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_8(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_7(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(7, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_9(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_8(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(8, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_10(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_9(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(9, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_11(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_10(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(10, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_12(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_11(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(11, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_13(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_12(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(12, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_14(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_13(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(13, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_15(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_14(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(14, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_16(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_15(OUTER_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, GET(15, INNER_LIST),FUNC_NAME,ARGS)

#define OUTER_LOOP_1(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(0, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_2(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_1(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(1, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_3(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_2(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(2, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_4(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_3(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(3, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_5(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_4(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(4, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_6(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_5(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(5, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_7(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_6(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(6, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_8(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_7(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(7, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_9(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_8(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(8, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_10(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_9(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(9, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_11(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_10(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(10, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_12(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_11(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(11, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_13(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_12(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(12, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_14(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_13(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(13, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_15(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_14(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(14, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_16(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_15(OUTER_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(INNER_LOOP_, INNER_SIZE)(GET(15, OUTER_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)


#define ITERATE_COMBINATIONS(OUTER_LIST, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CAT(OUTER_LOOP_, PP_NARGS(EXPAND OUTER_LIST))(OUTER_LIST, INNER_LIST, PP_NARGS(EXPAND INNER_LIST), CALLBACK,FUNC_NAME,ARGS)


#define INNER_LOOP_1_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(0, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_2_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_1_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(1, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_3_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_2_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(2, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_4_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_3_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(3, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_5_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_4_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(4, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_6_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_5_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(5, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_7_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_6_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(6, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_8_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_7_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(7, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_9_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_8_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(8, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_10_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_9_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(9, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_11_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_10_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(10, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_12_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_11_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(11, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_13_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_12_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(12, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_14_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_13_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(13, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_15_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_14_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(14, INNER_LIST),FUNC_NAME,ARGS)

#define INNER_LOOP_16_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   INNER_LOOP_15_3(OUTER_ELEMENT, MIDDLE_ELEMENT, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CALLBACK(OUTER_ELEMENT, MIDDLE_ELEMENT, GET(15, INNER_LIST),FUNC_NAME,ARGS)

#define MIDDLE_LOOP_1_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(0, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_2_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_1_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(1, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_3_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_2_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(2, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_4_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_3_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(3, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_5_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_4_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(4, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_6_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_5_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(5, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_7_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_6_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(6, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_8_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_7_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(7, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_9_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_8_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(8, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_10_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_9_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(9, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_11_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_10_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(10, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_12_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_11_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(11, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_13_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_12_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(12, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_14_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_13_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(13, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_15_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_14_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(14, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define MIDDLE_LOOP_16_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   MIDDLE_LOOP_15_3(OUTER_ELEMENT, MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(INNER_LOOP_, INNER_SIZE),_3)(OUTER_ELEMENT, GET(15, MIDDLE_LIST), INNER_LIST, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_1_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(0, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_2_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_1_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(1, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_3_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_2_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(2, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_4_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_3_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(3, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_5_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_4_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(4, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_6_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_5_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(5, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_7_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_6_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(6, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_8_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_7_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(7, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_9_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_8_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(8, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_10_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_9_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(9, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_11_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_10_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(10, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_12_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_11_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(11, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_13_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_12_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(12, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_14_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_13_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(13, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_15_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_14_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(14, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define OUTER_LOOP_16_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   OUTER_LOOP_15_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, MIDDLE_SIZE, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS) \
   CAT(CAT(MIDDLE_LOOP_, MIDDLE_SIZE),_3)(GET(15, OUTER_LIST), MIDDLE_LIST, INNER_LIST, INNER_SIZE, CALLBACK,FUNC_NAME,ARGS)

#define ITERATE_COMBINATIONS_3(OUTER_LIST, MIDDLE_LIST, INNER_LIST, CALLBACK,FUNC_NAME,ARGS) \
   CAT(OUTER_LOOP_, CAT(PP_NARGS(EXPAND OUTER_LIST),_3))(OUTER_LIST, MIDDLE_LIST, INNER_LIST, PP_NARGS(EXPAND MIDDLE_LIST), PP_NARGS(EXPAND INNER_LIST), CALLBACK,FUNC_NAME,ARGS)

#define INSTANT_PROCESS_CLASSCOMBINATION(a1, b1,FUNC_NAME,ARGS) template  FUNC_NAME<GET_SECOND(a1), GET_SECOND(b1)>ARGS;
#define INSTANT_PROCESS_COMBINATION(a1, b1,FUNC_NAME,ARGS) template void FUNC_NAME<GET_SECOND(a1), GET_SECOND(b1)>ARGS;
#define INSTANT_PROCESS_COMBINATION_3(a1, b1,c1,FUNC_NAME,ARGS)  template void FUNC_NAME<GET_SECOND(a1),GET_SECOND(b1), GET_SECOND(c1)>ARGS;

#define INSTANT_PROCESS_COMBINATION_CLASS(a1, b1,FUNC_NAME,ARGS) template class FUNC_NAME<GET_SECOND(a1), GET_SECOND(b1)>ARGS;
#define INSTANT_PROCESS_COMBINATION_CLASS_3(a1, b1,c1,FUNC_NAME,ARGS) extern template class FUNC_NAME<GET_SECOND(a1),GET_SECOND(b1), GET_SECOND(c1)>ARGS;



#define LOOP_1(CALLBACK, LIST) \
   CALLBACK(GET(0, LIST))

#define LOOP_2(CALLBACK, LIST) \
   LOOP_1(CALLBACK, LIST) \
   CALLBACK(GET(1, LIST))

#define LOOP_3(CALLBACK, LIST) \
   LOOP_2(CALLBACK, LIST) \
   CALLBACK(GET(2, LIST))

#define LOOP_4(CALLBACK, LIST) \
   LOOP_3(CALLBACK, LIST) \
   CALLBACK(GET(3, LIST))

#define LOOP_5(CALLBACK, LIST) \
   LOOP_4(CALLBACK, LIST) \
   CALLBACK(GET(4, LIST))

#define LOOP_6(CALLBACK, LIST) \
   LOOP_5(CALLBACK, LIST) \
   CALLBACK(GET(5, LIST))

#define LOOP_7(CALLBACK, LIST) \
   LOOP_6(CALLBACK, LIST) \
   CALLBACK(GET(6, LIST))

#define LOOP_8(CALLBACK, LIST) \
   LOOP_7(CALLBACK, LIST) \
   CALLBACK(GET(7, LIST))

#define LOOP_9(CALLBACK, LIST) \
   LOOP_8(CALLBACK, LIST) \
   CALLBACK(GET(8, LIST))

#define LOOP_10(CALLBACK, LIST) \
   LOOP_9(CALLBACK, LIST) \
   CALLBACK(GET(9, LIST))

#define LOOP_11(CALLBACK, LIST) \
   LOOP_10(CALLBACK, LIST) \
   CALLBACK(GET(10, LIST))

#define LOOP_12(CALLBACK, LIST) \
   LOOP_11(CALLBACK, LIST) \
   CALLBACK(GET(11, LIST))

#define LOOP_13(CALLBACK, LIST) \
   LOOP_12(CALLBACK, LIST) \
   CALLBACK(GET(12, LIST))

#define LOOP_14(CALLBACK, LIST) \
   LOOP_13(CALLBACK, LIST) \
   CALLBACK(GET(13, LIST))

#define LOOP_15(CALLBACK, LIST) \
   LOOP_14(CALLBACK, LIST) \
   CALLBACK(GET(14, LIST))

#define LOOP_16(CALLBACK, LIST) \
   LOOP_15(CALLBACK, LIST) \
   CALLBACK(GET(15, LIST))

#define ITERATE_LIST(LIST, CALLBACK) \
   CAT(LOOP_, PP_NARGS(EXPAND LIST))(CALLBACK, LIST)

#define PROCESS_ELEMENT(a, b, FUNC_NAME, ARGS) \
   std::cout << "(" << a << ", " << b << ")\n";

#define CALLBACK_PROCESS_ELEMENT(ELEMENT, FUNC_NAME, ARGS) \
   PROCESS_ELEMENT(GET_FIRST(ELEMENT), GET_SECOND(ELEMENT), FUNC_NAME, ARGS)



#endif  // TESTS_CPU_TYPE_BOILERPLATE_H
