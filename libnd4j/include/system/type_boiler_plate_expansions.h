// ============================================================================
// EXTENDED TYPE ALIAS EXPANSION FOR ALL TEMPLATE INSTANTIATION MACROS
// ============================================================================

// Platform detection for type sizes
#include <cstdint>
#include <type_traits>

// Detect actual type relationships on this platform
#define SD_INT32_IS_INT (std::is_same<int32_t, int>::value)
#define SD_INT32_IS_LONG (std::is_same<int32_t, long>::value)

#define SD_INT64_IS_LONG (std::is_same<int64_t, long>::value)
#define SD_INT64_IS_LONG_LONG (std::is_same<int64_t, long long>::value)

#define SD_UINT32_IS_UINT (std::is_same<uint32_t, unsigned int>::value)
#define SD_UINT32_IS_ULONG (std::is_same<uint32_t, unsigned long>::value)

#define SD_UINT64_IS_ULONG (std::is_same<uint64_t, unsigned long>::value)
#define SD_UINT64_IS_ULONG_LONG (std::is_same<uint64_t, unsigned long long>::value)

// ============================================================================
// HELPER MACROS FOR _RANDOMSINGLE
// ============================================================================

// ============================================================================
// CORE TYPE EXPANSION MACROS - Single Source of Truth
// ============================================================================

// Helper macros for instantiation
#define INSTANTIATE_TEMPLATE_1(TYPE, TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<TYPE> SIGNATURE;

#define INSTANTIATE_TEMPLATE_2(TYPE, TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, TYPE> SIGNATURE;

#define INSTANTIATE_TEMPLATE_3(TYPE, TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, TYPE> SIGNATURE;

// Core expansion macros by equivalence class
#define EXPAND_INT64_VARIANTS(MACRO, ...) \
    MACRO(LongType, __VA_ARGS__)

#define EXPAND_UINT64_VARIANTS(MACRO, ...) \
    MACRO(uint64_t, __VA_ARGS__) \
    MACRO(unsigned long long, __VA_ARGS__) \
    MACRO(unsigned long, __VA_ARGS__)

#define EXPAND_INT32_VARIANTS(MACRO, ...) \
    MACRO(int32_t, __VA_ARGS__) \
    MACRO(int, __VA_ARGS__)

#define EXPAND_UINT32_VARIANTS(MACRO, ...) \
    MACRO(uint32_t, __VA_ARGS__) \
    MACRO(unsigned int, __VA_ARGS__)

#define EXPAND_INT16_VARIANTS(MACRO, ...) \
    MACRO(int16_t, __VA_ARGS__) \
    MACRO(short, __VA_ARGS__)

#define EXPAND_UINT16_VARIANTS(MACRO, ...) \
    MACRO(uint16_t, __VA_ARGS__) \
    MACRO(unsigned short, __VA_ARGS__)

#define EXPAND_INT8_VARIANTS(MACRO, ...) \
    MACRO(int8_t, __VA_ARGS__) \


#define EXPAND_UINT8_VARIANTS(MACRO, ...) \
    MACRO(uint8_t, __VA_ARGS__) \
    MACRO(unsigned char, __VA_ARGS__)

// Non-aliased types (single variant)
#define EXPAND_FLOAT_VARIANTS(MACRO, ...) \
    MACRO(float, __VA_ARGS__)

#define EXPAND_DOUBLE_VARIANTS(MACRO, ...) \
    MACRO(double, __VA_ARGS__)

#define EXPAND_FLOAT16_VARIANTS(MACRO, ...) \
    MACRO(float16, __VA_ARGS__)

#define EXPAND_BFLOAT16_VARIANTS(MACRO, ...) \
    MACRO(bfloat16, __VA_ARGS__)

#define EXPAND_BOOL_VARIANTS(MACRO, ...) \
    MACRO(bool, __VA_ARGS__)



#define _EXPAND_RANDOMSINGLE_int8_t(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_INT8_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)


#define _EXPAND_RANDOMSINGLE_int8(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_INT8_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_schar(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_INT8_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_SignedChar(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_INT8_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_uint8(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_UINT8_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_uint8_t(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_UINT8_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)


#define _EXPAND_RANDOMSINGLE_uchar(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_UINT8_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_UnsignedChar(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_UINT8_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_short(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_int16_t(TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_int16(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_int16_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLE_int16_t(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_int16_t(TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_uint16_t(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<uint16_t> SIGNATURE;

#define _EXPAND_RANDOMSINGLE_uint16(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_uint16_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLE_ushort(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_uint16_t(TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_int32_t(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<int32_t> SIGNATURE;

#define _EXPAND_RANDOMSINGLE_int32(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_int32_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLE_Int32Type(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_int32_t(TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_int(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<int> SIGNATURE;

#define _EXPAND_RANDOMSINGLE_uint32_t(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<uint32_t> SIGNATURE;

#define _EXPAND_RANDOMSINGLE_uint32(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_uint32_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLE_uint(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<unsigned int> SIGNATURE;

#define _EXPAND_RANDOMSINGLE_int64_t(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_int64(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_LongType(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_longlong(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLE_long(TEMPLATE_NAME, SIGNATURE) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_TEMPLATE_1, TEMPLATE_NAME, SIGNATURE)



#define _EXPAND_RANDOMSINGLE_uint64_t(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<uint64_t> SIGNATURE;

#define _EXPAND_RANDOMSINGLE_uint64(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_uint64_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLE_UnsignedLong(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_uint64_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLE_ulonglong(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<unsigned long long> SIGNATURE; \
    template TEMPLATE_NAME<uint64_t> SIGNATURE; \
    template TEMPLATE_NAME<unsigned long> SIGNATURE;

#define _EXPAND_RANDOMSINGLE_ulong(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<unsigned long> SIGNATURE;

#define _EXPAND_RANDOMSINGLE_char(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<char> SIGNATURE;

// Floating point and other types - no aliases needed
#define _EXPAND_RANDOMSINGLE_float(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<float> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_double(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<double> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_float16(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<float16> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_bfloat16(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<bfloat16> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_half(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<float16> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_bool(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<bool> SIGNATURE;

// String types
#define _EXPAND_RANDOMSINGLE_UTF8(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<utf8string> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_UTF16(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<utf16string> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_UTF32(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<utf32string> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_utf8string(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<utf8string> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_utf16string(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<utf16string> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_utf32string(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<utf32string> SIGNATURE;
#define _EXPAND_RANDOMSINGLE_string(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<stdstring> SIGNATURE;

#define _EXPAND_RANDOMSINGLE_DEFAULT(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLE_(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLE_DEFAULT(TEMPLATE_NAME, SIGNATURE)

// Updated _RANDOMSINGLE macro - directly expand without SD_IF wrapper for now
#define _RANDOMSINGLE(TEMPLATE_NAME, SIGNATURE, ENUM, TYPE) \
    EVAL(SD_IF_SINGLE_ALIAS_COMPILED_DECL( \
        ENUM, \
        CONCAT(_EXPAND_RANDOMSINGLE_, TYPE)(TEMPLATE_NAME, SIGNATURE) \
    ))

// ============================================================================
// HELPER MACROS FOR _RANDOMDOUBLE2 - Generate ALL combinations
// ============================================================================


#define _EXPAND_RANDOMDOUBLE2_SECOND_int8_t(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_int8(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_schar(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_uint8_t(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_uint8(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_uchar(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)



#define _EXPAND_RANDOMDOUBLE2_SECOND_int16(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_uint16(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST)



#define _EXPAND_RANDOMDOUBLE2_SECOND_int32(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_Int32Type(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_int(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int> SIGNATURE;


#define _EXPAND_RANDOMDOUBLE2_SECOND_uint32(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_TEMPLATE_2, TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_int64(TEMPLATE_NAME, SIGNATURE, FIRST) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_TEMPLATE_2, TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_LongType(TEMPLATE_NAME, SIGNATURE, FIRST) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_TEMPLATE_2, TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_longlong(TEMPLATE_NAME, SIGNATURE, FIRST) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_TEMPLATE_2, TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_long(TEMPLATE_NAME, SIGNATURE, FIRST) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_TEMPLATE_2, TEMPLATE_NAME, SIGNATURE, FIRST)

    
#define _EXPAND_RANDOMDOUBLE2_SECOND_UnsignedLong(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST)


#define _EXPAND_RANDOMDOUBLE2_SECOND_ulong(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, unsigned long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, uint64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, uint32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned int> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_char(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int8_t> SIGNATURE; \


// Floating point types - no aliases
#define _EXPAND_RANDOMDOUBLE2_SECOND_float(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_double(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, double> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_float16(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float16> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_bfloat16(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, bfloat16> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_half(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float16> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_bool(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, bool> SIGNATURE;

// String types
#define _EXPAND_RANDOMDOUBLE2_SECOND_UTF8(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, utf8string> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_UTF16(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, utf16string> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_UTF32(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, utf32string> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_utf8string(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, utf8string> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_utf16string(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, utf16string> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_utf32string(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, utf32string> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_string(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, stdstring> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST)

// First position type expansions - these need to be actual types!
#define _EXPAND_RANDOMDOUBLE2_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, SignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, SignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, char)

#define _EXPAND_RANDOMDOUBLE2_int8(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_int8_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_schar(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, UnsignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, UnsignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, char)
#define _EXPAND_RANDOMDOUBLE2_uint8_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_uint8(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_uchar(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)

// ... [continue with all first position types]

#define _EXPAND_RANDOMDOUBLE2_float(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float)
#define _EXPAND_RANDOMDOUBLE2_double(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, double)
#define _EXPAND_RANDOMDOUBLE2_float16(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float16)
#define _EXPAND_RANDOMDOUBLE2_bfloat16(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, bfloat16)
#define _EXPAND_RANDOMDOUBLE2_half(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float16)
#define _EXPAND_RANDOMDOUBLE2_bool(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, bool)

// String types first position
// String types - when called directly with 3 args, TYPE_A is the first type
// Generate instantiations with string type in second position
#define _EXPAND_RANDOMDOUBLE2_stdstring(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    template TEMPLATE_NAME<TYPE_A, stdstring> SIGNATURE; \
    template TEMPLATE_NAME<TYPE_A, std::string> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_string(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    template TEMPLATE_NAME<TYPE_A, stdstring> SIGNATURE; 

#define _EXPAND_RANDOMDOUBLE2_u16string(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    template TEMPLATE_NAME<TYPE_A, u16string> SIGNATURE; \
    template TEMPLATE_NAME<TYPE_A, std::u16string> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_u32string(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    template TEMPLATE_NAME<TYPE_A, u32string> SIGNATURE; \
    template TEMPLATE_NAME<TYPE_A, std::u32string> SIGNATURE;

// UTF aliases
#define _EXPAND_RANDOMDOUBLE2_UTF8(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    template TEMPLATE_NAME<TYPE_A, utf8string> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_utf8string(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    template TEMPLATE_NAME<TYPE_A, utf8string> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_UTF16(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    template TEMPLATE_NAME<TYPE_A, utf16string> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_utf16string(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    template TEMPLATE_NAME<TYPE_A, utf16string> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_UTF32(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    template TEMPLATE_NAME<TYPE_A, utf32string> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_utf32string(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    template TEMPLATE_NAME<TYPE_A, utf32string> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_DEFAULT(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_DEFAULT(TEMPLATE_NAME, SIGNATURE, TYPE_B)

// Updated _RANDOMDOUBLE2 macro - directly expand without SD_IF wrapper for now
#define _RANDOMDOUBLE2(TEMPLATE_NAME, SIGNATURE, ENUM_A, TYPE_A, ENUM_B, TYPE_B) \
    EVAL(SD_IF_PAIR_ALIAS_COMPILED_DECL( \
        ENUM_A, \
        ENUM_B, \
        CONCAT(_EXPAND_RANDOMDOUBLE2_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    ))

// ============================================================================
// HELPER MACROS FOR _RANDOMSINGLEU (unary template)
// ============================================================================



#define _EXPAND_RANDOMSINGLEU_SignedChar(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME int8_t SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_int8_t(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_SignedChar(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_int8(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_SignedChar(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_schar(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_SignedChar(TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLEU_UnsignedChar(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME uint8_t SIGNATURE;
#define _EXPAND_RANDOMSINGLEU_uint8_t(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_UnsignedChar(TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLEU_uint8(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_UnsignedChar(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_uchar(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_UnsignedChar(TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLEU_int16_t(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME int16_t SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_int16(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_int16_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_short(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME short SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_uint16_t(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME uint16_t SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_uint16(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_uint16_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_ushort(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME unsigned short SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_int32_t(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME int32_t SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_int32(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_int32_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_Int32Type(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_int32_t(TEMPLATE_NAME, SIGNATURE)

#define _EXPAND_RANDOMSINGLEU_int(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME int SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_uint32_t(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME uint32_t SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_uint32(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_uint32_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_uint(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME unsigned int SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_int64_t(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME LongType SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_int64(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_int64_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_LongType(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_int64_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_longlong(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME long long SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_long(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME long SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_uint64_t(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME uint64_t SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_uint64(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_uint64_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_UnsignedLong(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_uint64_t(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_ulonglong(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME unsigned long long SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_ulong(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME unsigned long SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_char(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME char SIGNATURE;

// Floating point and other types - no aliases
#define _EXPAND_RANDOMSINGLEU_float(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME float SIGNATURE;
#define _EXPAND_RANDOMSINGLEU_double(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME double SIGNATURE;
#define _EXPAND_RANDOMSINGLEU_float16(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME float16 SIGNATURE;
#define _EXPAND_RANDOMSINGLEU_bfloat16(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME bfloat16 SIGNATURE;
#define _EXPAND_RANDOMSINGLEU_half(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME<float16> SIGNATURE;
#define _EXPAND_RANDOMSINGLEU_bool(TEMPLATE_NAME, SIGNATURE) template TEMPLATE_NAME bool SIGNATURE;

#define _EXPAND_RANDOMSINGLEU_DEFAULT(TEMPLATE_NAME, SIGNATURE)
#define _EXPAND_RANDOMSINGLEU_(TEMPLATE_NAME, SIGNATURE) _EXPAND_RANDOMSINGLEU_DEFAULT(TEMPLATE_NAME, SIGNATURE)

// Updated _RANDOMSINGLEU macro
#define _RANDOMSINGLEU(TEMPLATE_NAME, SIGNATURE, ENUM, TYPE) \
    EVAL(SD_IF_SINGLE_ALIAS_COMPILED_DECL( \
        ENUM, \
        CONCAT(_EXPAND_RANDOMSINGLEU_, TYPE)(TEMPLATE_NAME, SIGNATURE) \
    ))

// ============================================================================
// HELPER MACROS FOR _RANDOMDOUBLE2 - Generate ALL combinations
// ============================================================================

// Helper macros for second type expansion
#define _EXPAND_RANDOMDOUBLE2_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int8_t> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_int8(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_int8_t(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_schar(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, UnsignedChar> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_uint8(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_uchar(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int16_t> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_int16(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_short(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, short> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, uint16_t> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_uint16(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_ushort(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, unsigned short> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int32_t> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_int32(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_Int32Type(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, uint32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned int> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_uint32(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_uint(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, uint64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_uint64(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_UnsignedLong(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_ulonglong(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMDOUBLE2_SECOND_ulong(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, unsigned long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, uint64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, uint32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned int> SIGNATURE;


// Floating point types - no aliases
#define _EXPAND_RANDOMDOUBLE2_SECOND_float(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_double(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, double> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_float16(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float16> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_bfloat16(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, bfloat16> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_half(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float16> SIGNATURE;
#define _EXPAND_RANDOMDOUBLE2_SECOND_bool(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, bool> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMDOUBLE2_SECOND_(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMDOUBLE2_SECOND_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST)

// First position type expansions
#define _EXPAND_RANDOMDOUBLE2_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, SignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, SignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, char)
#define _EXPAND_RANDOMDOUBLE2_int8_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_int8(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_schar(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, UnsignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, UnsignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, char)
#define _EXPAND_RANDOMDOUBLE2_uint8_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_uint8(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_uchar(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int16_t) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, short) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, short int) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int)

#define _EXPAND_RANDOMDOUBLE2_int16(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_short(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint16_t) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned short)

#define _EXPAND_RANDOMDOUBLE2_uint16(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_ushort(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int32_t) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long)

#define _EXPAND_RANDOMDOUBLE2_int32(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_Int32Type(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_int(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int32_t) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int16_t) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, short) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, short int) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long)

#define _EXPAND_RANDOMDOUBLE2_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint32_t) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned int) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long)

#define _EXPAND_RANDOMDOUBLE2_uint32(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_uint(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, LongType) 

#define _EXPAND_RANDOMDOUBLE2_int64(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_LongType(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_longlong(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_long(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, LongType) \

#define _EXPAND_RANDOMDOUBLE2_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint64_t) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long long) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long)

#define _EXPAND_RANDOMDOUBLE2_uint64(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_UnsignedLong(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_ulonglong(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_ulong(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint64_t) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint32_t) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long long) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned int)

#define _EXPAND_RANDOMDOUBLE2_char(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, char) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, SignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, UnsignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, SignedChar) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, UnsignedChar)

#define _EXPAND_RANDOMDOUBLE2_float(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float)
#define _EXPAND_RANDOMDOUBLE2_double(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, double)
#define _EXPAND_RANDOMDOUBLE2_float16(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float16)
#define _EXPAND_RANDOMDOUBLE2_bfloat16(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, bfloat16)
#define _EXPAND_RANDOMDOUBLE2_half(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float16)
#define _EXPAND_RANDOMDOUBLE2_bool(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMDOUBLE2_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, bool)

#define _EXPAND_RANDOMDOUBLE2_DEFAULT(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMDOUBLE2_(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMDOUBLE2_DEFAULT(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMDOUBLE2_EQUIVALENTS(TEMPLATE_NAME, SIGNATURE, TYPE_A, TYPE_B) \
    CONCAT(_EXPAND_RANDOMDOUBLE2_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, TYPE_A)

// Updated _RANDOMDOUBLE2 macro - note the order: we swap B and A for template<B, A>
#define _RANDOMDOUBLE2(TEMPLATE_NAME, SIGNATURE, ENUM_A, TYPE_A, ENUM_B, TYPE_B) \
    EVAL(SD_IF_PAIR_ALIAS_COMPILED_DECL( \
        ENUM_A, \
        ENUM_B, \
        CONCAT(_EXPAND_RANDOMDOUBLE2_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, TYPE_A) \
    ))

// ============================================================================
// HELPER MACROS FOR _RANDOMPAIRWISE2
// ============================================================================

// Pair case helpers (TYPE_A, TYPE_B, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int8_t, int8_t> SIGNATURE; \

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int8_t(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int8(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_schar(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, UnsignedChar, UnsignedChar> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, UnsignedChar, UnsignedChar> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, char, char> SIGNATURE;


#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint8_t(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint8(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uchar(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int16_t, int16_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, short, short> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int, int> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int16(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_short(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, uint16_t, uint16_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned short, unsigned short> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint16(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_ushort(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int32_t, int32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int, int> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long, long> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int32(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_Int32Type(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int, int> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int32_t, int32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int16_t, int16_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, short, short> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long, long> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, uint32_t, uint32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned int, unsigned int> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long, unsigned long> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint32(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int64_t, int64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long long, long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long, long> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int64(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_LongType(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_longlong(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_long(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, long, long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int64_t, int64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int32_t, int32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long long, long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int, int> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, uint64_t, uint64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long long, unsigned long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long, unsigned long> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint64(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_UnsignedLong(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_ulonglong(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_ulong(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, unsigned long, unsigned long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, uint64_t, uint64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, uint32_t, uint32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long long, unsigned long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned int, unsigned int> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_char(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int8_t, int8_t> SIGNATURE; 
  

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_float(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float, float> SIGNATURE;
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_double(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, double, double> SIGNATURE;
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_float16(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float16, float16> SIGNATURE;
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_bfloat16(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, bfloat16, bfloat16> SIGNATURE;
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_half(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float16, float16> SIGNATURE;
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_bool(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, bool, bool> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST)

// Triple case helpers (TYPE_A, TYPE_B, TYPE_A)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int8_t, FIRST> SIGNATURE; \


    #define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int8_t(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int8(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_schar(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint8_t(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint8(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uchar(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int16_t, FIRST> SIGNATURE; \

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int16(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_short(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, uint16_t, FIRST> SIGNATURE; \

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint16(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_ushort(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int32_t, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long, FIRST> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int32(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_Int32Type(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, int, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int32_t, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int16_t, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, short, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long, FIRST> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, uint32_t, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned int, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long, FIRST> SIGNATURE;


#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint32(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, long long, FIRST> SIGNATURE; \

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int64(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_LongType(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_longlong(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_long(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, long, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int64_t, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int32_t, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long long, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int, FIRST> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, uint64_t, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long long, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long, FIRST> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint64(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_UnsignedLong(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_ulonglong(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_ulong(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, unsigned long, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, uint64_t, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, uint32_t, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned long long, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, unsigned int, FIRST> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_char(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, char, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SignedChar, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, UnsignedChar, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SignedChar, FIRST> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, UnsignedChar, FIRST> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_float(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float, FIRST> SIGNATURE;
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_double(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, double, FIRST> SIGNATURE;
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_float16(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float16, FIRST> SIGNATURE;
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_bfloat16(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, bfloat16, FIRST> SIGNATURE;
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_half(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, float16, FIRST> SIGNATURE;
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_bool(TEMPLATE_NAME, SIGNATURE, FIRST) template TEMPLATE_NAME<FIRST, bool, FIRST> SIGNATURE;

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_(TEMPLATE_NAME, SIGNATURE, FIRST) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST)

// First position expansions for pair case
#define _EXPAND_RANDOMPAIRWISE2_PAIR_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int8_t) \


#define _EXPAND_RANDOMPAIRWISE2_PAIR_int8(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_int8_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_schar(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_uint8_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_uint8(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_uchar(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int16_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, short) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_int16(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_short(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint16_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned short)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_uint16(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_ushort(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int32_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_int32(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_Int32Type(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_int(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int32_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int16_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, short) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint32_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned int) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_uint32(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_uint(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int64_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_int64(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_LongType(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_longlong(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_long(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int64_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int32_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint64_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_uint64(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_UnsignedLong(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_ulonglong(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_ulong(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint64_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint32_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned int)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_char(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, char) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, SignedChar) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, UnsignedChar) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, SignedChar) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, UnsignedChar)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_float(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_double(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, double)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_float16(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float16)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_bfloat16(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, bfloat16)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_half(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float16)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_bool(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, bool)

#define _EXPAND_RANDOMPAIRWISE2_PAIR_DEFAULT(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_PAIR_(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_PAIR_DEFAULT(TEMPLATE_NAME, SIGNATURE, TYPE_B)

// First position expansions for triple case
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int8_t) 

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_int8_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_int8(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_schar(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint8_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint8(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_uchar(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int16_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, short) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_int16(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_short(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint16_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned short)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint16(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_ushort(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int32_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_int32(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_Int32Type(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_int(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int32_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int16_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, short) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint32_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned int) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint32(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int64_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_int64(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_LongType(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_longlong(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_long(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int64_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int32_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, long long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, int)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint64_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint64(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_UnsignedLong(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_ulonglong(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_B)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_ulong(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint64_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, uint32_t) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned long long) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, unsigned int)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_char(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, char) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, SignedChar) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, UnsignedChar) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, SignedChar) \
    CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, UnsignedChar)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_float(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_double(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, double)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_float16(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float16)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_bfloat16(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, bfloat16)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_half(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, float16)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_bool(TEMPLATE_NAME, SIGNATURE, TYPE_B) CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_SECOND_, TYPE_B)(TEMPLATE_NAME, SIGNATURE, bool)

#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_DEFAULT(TEMPLATE_NAME, SIGNATURE, TYPE_B)
#define _EXPAND_RANDOMPAIRWISE2_TRIPLE_(TEMPLATE_NAME, SIGNATURE, TYPE_B) _EXPAND_RANDOMPAIRWISE2_TRIPLE_DEFAULT(TEMPLATE_NAME, SIGNATURE, TYPE_B)

// Updated _RANDOMPAIRWISE2 macro
#define _RANDOMPAIRWISE2(TEMPLATE_NAME, SIGNATURE, ENUM_A, TYPE_A, ENUM_B, TYPE_B) \
    EVAL(SD_IF_PAIR_ALIAS_COMPILED_DECL( \
        ENUM_A, \
        ENUM_B, \
        CONCAT(_EXPAND_RANDOMPAIRWISE2_PAIR_, TYPE_A)(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    )) \
    EVAL(SD_IF_TRIPLE_ALIAS_COMPILED_DECL( \
        ENUM_A, \
        ENUM_B, \
        ENUM_A, \
        CONCAT(_EXPAND_RANDOMPAIRWISE2_TRIPLE_, TYPE_A)(TEMPLATE_NAME, SIGNATURE, TYPE_B) \
    ))

// ============================================================================
// HELPER MACROS FOR _RANDOMTRIPLE3 - Full expansion for three types
// ============================================================================

// Third level helpers
#define _EXPAND_RANDOMTRIPLE3_Z_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, int8_t> SIGNATURE; 


#define _EXPAND_RANDOMTRIPLE3_Z_int8_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_int8(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_schar(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)

#define _EXPAND_RANDOMTRIPLE3_Z_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, UnsignedChar> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, unsigned char> SIGNATURE;


#define _EXPAND_RANDOMTRIPLE3_Z_uint8_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_uint8(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_uchar(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)

#define _EXPAND_RANDOMTRIPLE3_Z_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, int16_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, short> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, int> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_int16(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_short(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)

#define _EXPAND_RANDOMTRIPLE3_Z_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, uint16_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, unsigned short> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_uint16(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_ushort(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)

#define _EXPAND_RANDOMTRIPLE3_Z_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, int32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, int> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, long> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_int32(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_Int32Type(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)

#define _EXPAND_RANDOMTRIPLE3_Z_int(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, int> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, int32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, int16_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, short> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, long> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, uint32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, unsigned int> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, unsigned long> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_uint32(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_uint(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)

#define _EXPAND_RANDOMTRIPLE3_Z_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, int64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, long> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_int64(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_LongType(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_longlong(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)

#define _EXPAND_RANDOMTRIPLE3_Z_long(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, int64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, int32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, int> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, uint64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, unsigned long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, unsigned long> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_uint64(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_UnsignedLong(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_ulonglong(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)

#define _EXPAND_RANDOMTRIPLE3_Z_ulong(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, unsigned long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, uint64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, uint32_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, unsigned long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, unsigned int> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_char(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, int8_t> SIGNATURE; 


#define _EXPAND_RANDOMTRIPLE3_Z_float(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) template TEMPLATE_NAME<FIRST, SECOND, float> SIGNATURE;
#define _EXPAND_RANDOMTRIPLE3_Z_double(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) template TEMPLATE_NAME<FIRST, SECOND, double> SIGNATURE;
#define _EXPAND_RANDOMTRIPLE3_Z_float16(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) template TEMPLATE_NAME<FIRST, SECOND, float16> SIGNATURE;
#define _EXPAND_RANDOMTRIPLE3_Z_bfloat16(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) template TEMPLATE_NAME<FIRST, SECOND, bfloat16> SIGNATURE;
#define _EXPAND_RANDOMTRIPLE3_Z_half(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) template TEMPLATE_NAME<FIRST, SECOND, float16> SIGNATURE;
#define _EXPAND_RANDOMTRIPLE3_Z_bool(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) template TEMPLATE_NAME<FIRST, SECOND, bool> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)
#define _EXPAND_RANDOMTRIPLE3_Z_(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) _EXPAND_RANDOMTRIPLE3_Z_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND)

// Second level helpers - expand Y and call Z expansions
#define _EXPAND_RANDOMTRIPLE3_Y_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, SignedChar) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, SignedChar) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, char)

#define _EXPAND_RANDOMTRIPLE3_Y_int8_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_int8(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_schar(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_SignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_Y_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, UnsignedChar) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, UnsignedChar) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, char)



#define _EXPAND_RANDOMTRIPLE3_Y_uint8_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_uint8(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_uchar(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_UnsignedChar(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_Y_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, int16_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, short) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, int)

#define _EXPAND_RANDOMTRIPLE3_Y_int16(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_short(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_int16_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_Y_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, uint16_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, unsigned short)

#define _EXPAND_RANDOMTRIPLE3_Y_uint16(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_ushort(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_uint16_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_Y_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, int32_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, int) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, long)

#define _EXPAND_RANDOMTRIPLE3_Y_int32(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_Int32Type(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_int32_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_Y_int(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, int) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, int32_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, int16_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, short) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, long)

#define _EXPAND_RANDOMTRIPLE3_Y_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, uint32_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, unsigned int) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, unsigned long)

#define _EXPAND_RANDOMTRIPLE3_Y_uint32(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_uint(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_uint32_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_Y_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, int64_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, long long) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, long)

#define _EXPAND_RANDOMTRIPLE3_Y_int64(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_LongType(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_longlong(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_int64_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)

#define _EXPAND_RANDOMSINGLE_sd_LongType(TEMPLATE_NAME, SIGNATURE) \
    template TEMPLATE_NAME<sd::LongType> SIGNATURE; \
    template TEMPLATE_NAME<int64_t> SIGNATURE; \
    template TEMPLATE_NAME<long long> SIGNATURE; \
    template TEMPLATE_NAME<long> SIGNATURE;

#define _EXPAND_RANDOMDOUBLE2_SECOND_sd_LongType(TEMPLATE_NAME, SIGNATURE, FIRST) \
    template TEMPLATE_NAME<FIRST, sd::LongType> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, int64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, long> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Z_sd_LongType(TEMPLATE_NAME, SIGNATURE, FIRST, SECOND) \
    template TEMPLATE_NAME<FIRST, SECOND, sd::LongType> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, int64_t> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, long long> SIGNATURE; \
    template TEMPLATE_NAME<FIRST, SECOND, long> SIGNATURE;

#define _EXPAND_RANDOMTRIPLE3_Y_long(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, long) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, long long) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, int64_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, sd::LongType) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, LongType)

#define _EXPAND_RANDOMTRIPLE3_Y_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, uint64_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, unsigned long long) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, unsigned long)

#define _EXPAND_RANDOMTRIPLE3_Y_uint64(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_UnsignedLong(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_ulonglong(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_uint64_t(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_Y_ulong(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, unsigned long) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, uint64_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, uint32_t) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, unsigned long long) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, unsigned int)

#define _EXPAND_RANDOMTRIPLE3_Y_char(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, char) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, SignedChar) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, UnsignedChar) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, SignedChar) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, UnsignedChar)

#define _EXPAND_RANDOMTRIPLE3_Y_float(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, float)
#define _EXPAND_RANDOMTRIPLE3_Y_double(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, double)
#define _EXPAND_RANDOMTRIPLE3_Y_float16(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, float16)
#define _EXPAND_RANDOMTRIPLE3_Y_bfloat16(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, bfloat16)
#define _EXPAND_RANDOMTRIPLE3_Y_half(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, float16)
#define _EXPAND_RANDOMTRIPLE3_Y_bool(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Z_, TYPE_Z)(TEMPLATE_NAME, SIGNATURE, FIRST, bool)

#define _EXPAND_RANDOMTRIPLE3_Y_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_Y_(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z) _EXPAND_RANDOMTRIPLE3_Y_DEFAULT(TEMPLATE_NAME, SIGNATURE, FIRST, TYPE_Z)

// First level helpers - expand X and call Y expansions  
#define _EXPAND_RANDOMTRIPLE3_X_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, SignedChar, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, SignedChar, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, char, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_int8(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_int8_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_schar(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_SignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, UnsignedChar, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, UnsignedChar, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, char, TYPE_Z)


#define _EXPAND_RANDOMTRIPLE3_X_uint8_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_uint8(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_uchar(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_UnsignedChar(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int16_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, short, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_int16(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_short(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_int16_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, uint16_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, unsigned short, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_uint16(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_ushort(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_uint16_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int32_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, long, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_int32(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_Int32Type(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_int32_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_int(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int32_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int16_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, short, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, long, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, uint32_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, unsigned int, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, unsigned long, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_uint32(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_uint(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_uint32_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int64_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, long long, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, long, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_int64(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_LongType(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_longlong(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_int64_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_long(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, long, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int64_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int32_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, long long, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, int, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, uint64_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, unsigned long long, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, unsigned long, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_uint64(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_UnsignedLong(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_ulonglong(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_uint64_t(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_ulong(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, unsigned long, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, uint64_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, uint32_t, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, unsigned long long, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, unsigned int, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_char(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, char, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, SignedChar, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, UnsignedChar, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, SignedChar, TYPE_Z) \
    CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, UnsignedChar, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_float(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, float, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_double(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, double, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_float16(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, float16, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_bfloat16(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, bfloat16, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_half(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, float16, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_bool(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_RANDOMTRIPLE3_Y_, TYPE_Y)(TEMPLATE_NAME, SIGNATURE, bool, TYPE_Z)

#define _EXPAND_RANDOMTRIPLE3_X_DEFAULT(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)
#define _EXPAND_RANDOMTRIPLE3_X_(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) _EXPAND_RANDOMTRIPLE3_X_DEFAULT(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z)

// Updated _RANDOMTRIPLE3 macro
#define _RANDOMTRIPLE3(TEMPLATE_NAME, SIGNATURE, ENUM_Z, TYPE_Z, ENUM_Y, TYPE_Y, ENUM_X, TYPE_X) \
    EVAL(SD_IF_TRIPLE_ALIAS_COMPILED_DECL( \
        ENUM_X, \
        ENUM_Y, \
        ENUM_Z, \
        CONCAT(_EXPAND_RANDOMTRIPLE3_X_, TYPE_X)(TEMPLATE_NAME, SIGNATURE, TYPE_Y, TYPE_Z) \
    ))

// ============================================================================
// HELPER MACROS FOR INSTANT_PROCESS_COMBINATION
// ============================================================================

// Second level helpers
#define _EXPAND_INSTANT_COMBINATION_SECOND_SignedChar(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, int8_t> ARGS; \
 

    #define _EXPAND_INSTANT_COMBINATION_SECOND_int8_t(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_SignedChar(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_int8(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_SignedChar(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_schar(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_SignedChar(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_COMBINATION_SECOND_UnsignedChar(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, uint8_t> ARGS; \

#define _EXPAND_INSTANT_COMBINATION_SECOND_uint8_t(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_UnsignedChar(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_uint8(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_UnsignedChar(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_uchar(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_UnsignedChar(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_COMBINATION_SECOND_int16_t(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, int16_t> ARGS; \
    template void FUNC_NAME<FIRST, short> ARGS; \
    template void FUNC_NAME<FIRST, int> ARGS;

#define _EXPAND_INSTANT_COMBINATION_SECOND_int16(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_int16_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_short(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_int16_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_COMBINATION_SECOND_uint16_t(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, uint16_t> ARGS; \
    template void FUNC_NAME<FIRST, unsigned short> ARGS;

#define _EXPAND_INSTANT_COMBINATION_SECOND_uint16(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_uint16_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_ushort(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_uint16_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_COMBINATION_SECOND_int32_t(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, int32_t> ARGS; \
    template void FUNC_NAME<FIRST, int> ARGS; \
    template void FUNC_NAME<FIRST, long> ARGS;

#define _EXPAND_INSTANT_COMBINATION_SECOND_int32(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_int32_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_Int32Type(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_int32_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_COMBINATION_SECOND_int(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, int> ARGS; \
    template void FUNC_NAME<FIRST, int32_t> ARGS; \
    template void FUNC_NAME<FIRST, int16_t> ARGS; \
    template void FUNC_NAME<FIRST, short> ARGS; \
    template void FUNC_NAME<FIRST, long> ARGS;

#define _EXPAND_INSTANT_COMBINATION_SECOND_uint32_t(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, uint32_t> ARGS; \
    template void FUNC_NAME<FIRST, unsigned int> ARGS; \
    template void FUNC_NAME<FIRST, unsigned long> ARGS;

#define _EXPAND_INSTANT_COMBINATION_SECOND_uint32(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_uint32_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_uint(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_uint32_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_COMBINATION_SECOND_int64_t(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, int64_t> ARGS; \
    template void FUNC_NAME<FIRST, long long> ARGS; \
    template void FUNC_NAME<FIRST, long> ARGS;

#define _EXPAND_INSTANT_COMBINATION_SECOND_int64(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_int64_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_LongType(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_int64_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_longlong(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_int64_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_COMBINATION_SECOND_long(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, long> ARGS; \
    template void FUNC_NAME<FIRST, int64_t> ARGS; \
    template void FUNC_NAME<FIRST, int32_t> ARGS; \
    template void FUNC_NAME<FIRST, long long> ARGS; \
    template void FUNC_NAME<FIRST, int> ARGS;

#define _EXPAND_INSTANT_COMBINATION_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, uint64_t> ARGS; \
    template void FUNC_NAME<FIRST, unsigned long long> ARGS; \
    template void FUNC_NAME<FIRST, unsigned long> ARGS;

#define _EXPAND_INSTANT_COMBINATION_SECOND_uint64(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_UnsignedLong(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_ulonglong(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_COMBINATION_SECOND_ulong(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, unsigned long> ARGS; \
    template void FUNC_NAME<FIRST, uint64_t> ARGS; \
    template void FUNC_NAME<FIRST, uint32_t> ARGS; \
    template void FUNC_NAME<FIRST, unsigned long long> ARGS; \
    template void FUNC_NAME<FIRST, unsigned int> ARGS;

#define _EXPAND_INSTANT_COMBINATION_SECOND_char(FUNC_NAME, ARGS, FIRST) \
    template void FUNC_NAME<FIRST, in8_t> ARGS; 


#define _EXPAND_INSTANT_COMBINATION_SECOND_float(FUNC_NAME, ARGS, FIRST) template void FUNC_NAME<FIRST, float> ARGS;
#define _EXPAND_INSTANT_COMBINATION_SECOND_double(FUNC_NAME, ARGS, FIRST) template void FUNC_NAME<FIRST, double> ARGS;
#define _EXPAND_INSTANT_COMBINATION_SECOND_float16(FUNC_NAME, ARGS, FIRST) template void FUNC_NAME<FIRST, float16> ARGS;
#define _EXPAND_INSTANT_COMBINATION_SECOND_bfloat16(FUNC_NAME, ARGS, FIRST) template void FUNC_NAME<FIRST, bfloat16> ARGS;
#define _EXPAND_INSTANT_COMBINATION_SECOND_half(FUNC_NAME, ARGS, FIRST) template void FUNC_NAME<FIRST, float16> ARGS;
#define _EXPAND_INSTANT_COMBINATION_SECOND_bool(FUNC_NAME, ARGS, FIRST) template void FUNC_NAME<FIRST, bool> ARGS;

#define _EXPAND_INSTANT_COMBINATION_SECOND_DEFAULT(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_COMBINATION_SECOND_(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_COMBINATION_SECOND_DEFAULT(FUNC_NAME, ARGS, FIRST)

// First level helpers
#define _EXPAND_INSTANT_COMBINATION_SignedChar(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, char)


#define _EXPAND_INSTANT_COMBINATION_int8_t(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_SignedChar(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_int8(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_SignedChar(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_schar(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_SignedChar(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_COMBINATION_UnsignedChar(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, char)

#define _EXPAND_INSTANT_COMBINATION_uint8_t(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_UnsignedChar(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_uint8(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_UnsignedChar(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_uchar(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_UnsignedChar(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_COMBINATION_int16_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int16_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, short) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int)

#define _EXPAND_INSTANT_COMBINATION_int16(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_int16_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_short(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_int16_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_COMBINATION_uint16_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint16_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned short)

#define _EXPAND_INSTANT_COMBINATION_uint16(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_uint16_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_ushort(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_uint16_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_COMBINATION_int32_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int32_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long)

#define _EXPAND_INSTANT_COMBINATION_int32(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_int32_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_Int32Type(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_int32_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_COMBINATION_int(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int32_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int16_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, short) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long)

#define _EXPAND_INSTANT_COMBINATION_uint32_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint32_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned int) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long)

#define _EXPAND_INSTANT_COMBINATION_uint32(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_uint32_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_uint(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_uint32_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_COMBINATION_int64_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int64_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long long) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long)

#define _EXPAND_INSTANT_COMBINATION_int64(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_int64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_LongType(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_int64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_longlong(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_int64_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_COMBINATION_long(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int64_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int32_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long long) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int)

#define _EXPAND_INSTANT_COMBINATION_uint64_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint64_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long long) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long)

#define _EXPAND_INSTANT_COMBINATION_uint64(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_uint64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_UnsignedLong(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_uint64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_ulonglong(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_uint64_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_COMBINATION_ulong(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint64_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint32_t) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long long) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned int)

#define _EXPAND_INSTANT_COMBINATION_char(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, char) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar)

#define _EXPAND_INSTANT_COMBINATION_float(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, float)
#define _EXPAND_INSTANT_COMBINATION_double(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, double)
#define _EXPAND_INSTANT_COMBINATION_float16(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, float16)
#define _EXPAND_INSTANT_COMBINATION_bfloat16(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, bfloat16)
#define _EXPAND_INSTANT_COMBINATION_half(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, float16)
#define _EXPAND_INSTANT_COMBINATION_bool(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_COMBINATION_SECOND_, TYPE_B)(FUNC_NAME, ARGS, bool)

#define _EXPAND_INSTANT_COMBINATION_DEFAULT(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_COMBINATION_(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_COMBINATION_DEFAULT(FUNC_NAME, ARGS, TYPE_B)

// Updated INSTANT_PROCESS_COMBINATION macro
#define INSTANT_PROCESS_COMBINATION(a1, b1, FUNC_NAME, ARGS) \
    EVAL(SD_IF_PAIR_ALIAS_COMPILED_DECL( \
        GET_FIRST(a1), \
        GET_FIRST(b1), \
        CONCAT(_EXPAND_INSTANT_COMBINATION_, GET_SECOND(a1))(FUNC_NAME, ARGS, GET_SECOND(b1)) \
    ))

// ============================================================================
// HELPER MACROS FOR INSTANT_PROCESS_COMBINATION_CLASS
// ============================================================================

// Second level helpers
#define _EXPAND_INSTANT_CLASS_SECOND_SignedChar(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, int8_t> ARGS; 
    

#define _EXPAND_INSTANT_CLASS_SECOND_int8_t(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_SignedChar(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_int8(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_SignedChar(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_schar(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_SignedChar(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_CLASS_SECOND_UnsignedChar(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, uint8_t> ARGS; \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_UCHAR_IF_, SD_CHAR_IS_UINT8)(FUNC_NAME, ARGS, FIRST)

// Conditional helpers for SignedChar
#define _EXPAND_INSTANT_CLASS_SECOND_CHAR_IF_0(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_CHAR_IF_1(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, char> ARGS;

// Conditional helpers for UnsignedChar  
#define _EXPAND_INSTANT_CLASS_SECOND_UCHAR_IF_0(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_UCHAR_IF_1(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, char> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_uint8_t(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_UnsignedChar(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_uint8(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_UnsignedChar(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_uchar(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_UnsignedChar(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_CLASS_SECOND_int16_t(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, int16_t> ARGS; \
    template class FUNC_NAME<FIRST, short> ARGS; \
    template class FUNC_NAME<FIRST, int> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_int16(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_int16_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_short(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_int16_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_CLASS_SECOND_uint16_t(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, uint16_t> ARGS; \
    template class FUNC_NAME<FIRST, unsigned short> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_uint16(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_uint16_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_ushort(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_uint16_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_CLASS_SECOND_int32_t(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, int32_t> ARGS; \
    template class FUNC_NAME<FIRST, int> ARGS; \
    template class FUNC_NAME<FIRST, long> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_int32(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_int32_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_Int32Type(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_int32_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_CLASS_SECOND_int(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, int> ARGS; \
    template class FUNC_NAME<FIRST, int32_t> ARGS; \
    template class FUNC_NAME<FIRST, int16_t> ARGS; \
    template class FUNC_NAME<FIRST, short> ARGS; \
    template class FUNC_NAME<FIRST, long> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_uint32_t(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, uint32_t> ARGS; \
    template class FUNC_NAME<FIRST, unsigned int> ARGS; \
    template class FUNC_NAME<FIRST, unsigned long> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_uint32(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_uint32_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_uint(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_uint32_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_CLASS_SECOND_int64_t(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, int64_t> ARGS; \
    template class FUNC_NAME<FIRST, long long> ARGS; \
    template class FUNC_NAME<FIRST, long> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_int64(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_int64_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_LongType(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_int64_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_longlong(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_int64_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_CLASS_SECOND_long(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, long> ARGS; \
    template class FUNC_NAME<FIRST, int64_t> ARGS; \
    template class FUNC_NAME<FIRST, int32_t> ARGS; \
    template class FUNC_NAME<FIRST, long long> ARGS; \
    template class FUNC_NAME<FIRST, int> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, uint64_t> ARGS; \
    template class FUNC_NAME<FIRST, unsigned long long> ARGS; \
    template class FUNC_NAME<FIRST, unsigned long> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_uint64(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_UnsignedLong(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_ulonglong(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_INSTANT_CLASS_SECOND_ulong(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, unsigned long> ARGS; \
    template class FUNC_NAME<FIRST, uint64_t> ARGS; \
    template class FUNC_NAME<FIRST, uint32_t> ARGS; \
    template class FUNC_NAME<FIRST, unsigned long long> ARGS; \
    template class FUNC_NAME<FIRST, unsigned int> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_char(FUNC_NAME, ARGS, FIRST) \
    template class FUNC_NAME<FIRST, int8_t> ARGS; 

#define _EXPAND_INSTANT_CLASS_SECOND_float(FUNC_NAME, ARGS, FIRST) template class FUNC_NAME<FIRST, float> ARGS;
#define _EXPAND_INSTANT_CLASS_SECOND_double(FUNC_NAME, ARGS, FIRST) template class FUNC_NAME<FIRST, double> ARGS;
#define _EXPAND_INSTANT_CLASS_SECOND_float16(FUNC_NAME, ARGS, FIRST) template class FUNC_NAME<FIRST, float16> ARGS;
#define _EXPAND_INSTANT_CLASS_SECOND_bfloat16(FUNC_NAME, ARGS, FIRST) template class FUNC_NAME<FIRST, bfloat16> ARGS;
#define _EXPAND_INSTANT_CLASS_SECOND_half(FUNC_NAME, ARGS, FIRST) template class FUNC_NAME<FIRST, float16> ARGS;
#define _EXPAND_INSTANT_CLASS_SECOND_bool(FUNC_NAME, ARGS, FIRST) template class FUNC_NAME<FIRST, bool> ARGS;

#define _EXPAND_INSTANT_CLASS_SECOND_DEFAULT(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_INSTANT_CLASS_SECOND_(FUNC_NAME, ARGS, FIRST) _EXPAND_INSTANT_CLASS_SECOND_DEFAULT(FUNC_NAME, ARGS, FIRST)

// First level helpers
#define _EXPAND_INSTANT_CLASS_SignedChar(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, char)

#define _EXPAND_INSTANT_CLASS_int8_t(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_SignedChar(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_int8(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_SignedChar(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_schar(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_SignedChar(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_CLASS_UnsignedChar(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, char)


#define _EXPAND_INSTANT_CLASS_uint8_t(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_UnsignedChar(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_uint8(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_UnsignedChar(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_uchar(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_UnsignedChar(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_CLASS_int16_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int16_t) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, short) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int)

#define _EXPAND_INSTANT_CLASS_int16(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_int16_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_short(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_int16_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_CLASS_uint16_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint16_t) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned short)

#define _EXPAND_INSTANT_CLASS_uint16(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_uint16_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_ushort(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_uint16_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_CLASS_int32_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int32_t) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long)

#define _EXPAND_INSTANT_CLASS_int32(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_int32_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_Int32Type(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_int32_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_CLASS_int(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int32_t) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int16_t) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, short) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long)

#define _EXPAND_INSTANT_CLASS_uint32_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint32_t) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned int) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long)

#define _EXPAND_INSTANT_CLASS_uint32(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_uint32_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_uint(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_uint32_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_CLASS_int64_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, LongType) 


#define _EXPAND_INSTANT_CLASS_int64(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_int64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_LongType(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_int64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_longlong(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_int64_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_CLASS_long(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, LongType) \

#define _EXPAND_INSTANT_CLASS_uint64_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint64_t) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long long) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long)

#define _EXPAND_INSTANT_CLASS_uint64(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_uint64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_UnsignedLong(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_uint64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_ulonglong(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_uint64_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_INSTANT_CLASS_ulong(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint64_t) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint32_t) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long long) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned int)

#define _EXPAND_INSTANT_CLASS_char(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, char) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar)

#define _EXPAND_INSTANT_CLASS_float(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, float)
#define _EXPAND_INSTANT_CLASS_double(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, double)
#define _EXPAND_INSTANT_CLASS_float16(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, float16)
#define _EXPAND_INSTANT_CLASS_bfloat16(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, bfloat16)
#define _EXPAND_INSTANT_CLASS_half(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, float16)
#define _EXPAND_INSTANT_CLASS_bool(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_INSTANT_CLASS_SECOND_, TYPE_B)(FUNC_NAME, ARGS, bool)

#define _EXPAND_INSTANT_CLASS_DEFAULT(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_INSTANT_CLASS_(FUNC_NAME, ARGS, TYPE_B) _EXPAND_INSTANT_CLASS_DEFAULT(FUNC_NAME, ARGS, TYPE_B)

// Updated INSTANT_PROCESS_COMBINATION_CLASS macro
#define INSTANT_PROCESS_COMBINATION_CLASS(a1, b1, FUNC_NAME, ARGS) \
    EVAL(SD_IF_PAIR_ALIAS_COMPILED_DECL( \
        GET_FIRST(a1), \
        GET_FIRST(b1), \
        CONCAT(_EXPAND_INSTANT_CLASS_, GET_SECOND(a1))(FUNC_NAME, ARGS, GET_SECOND(b1)) \
    ))

// ============================================================================
// HELPER MACROS FOR INSTANT_PROCESS_COMBINATION_CLASS_3 - Three parameter version
// ============================================================================

// Third level helpers
#define _EXPAND_INSTANT_CLASS3_C_SignedChar(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, int8_t> ARGS;

#define _EXPAND_INSTANT_CLASS3_C_int8_t(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_SignedChar(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_int8(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_SignedChar(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_schar(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_SignedChar(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_INSTANT_CLASS3_C_UnsignedChar(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, UnsignedChar> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, unsigned char> ARGS; \

#define _EXPAND_INSTANT_CLASS3_C_uint8_t(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_UnsignedChar(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_uint8(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_UnsignedChar(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_uchar(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_UnsignedChar(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_INSTANT_CLASS3_C_int16_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, int16_t> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, short> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, int> ARGS;

#define _EXPAND_INSTANT_CLASS3_C_int16(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_int16_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_short(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_int16_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_INSTANT_CLASS3_C_uint16_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, uint16_t> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, unsigned short> ARGS;

#define _EXPAND_INSTANT_CLASS3_C_uint16(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_uint16_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_ushort(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_uint16_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_INSTANT_CLASS3_C_int32_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, int32_t> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, int> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, long> ARGS;

#define _EXPAND_INSTANT_CLASS3_C_int32(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_int32_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_Int32Type(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_int32_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_INSTANT_CLASS3_C_int(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, int> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, int32_t> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, int16_t> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, short> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, long> ARGS;

#define _EXPAND_INSTANT_CLASS3_C_uint32_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, uint32_t> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, unsigned int> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, unsigned long> ARGS;

#define _EXPAND_INSTANT_CLASS3_C_uint32(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_uint32_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_uint(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_uint32_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_INSTANT_CLASS3_C_int64_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, int64_t> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, long long> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, long> ARGS;

#define _EXPAND_INSTANT_CLASS3_C_int64(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_int64_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_LongType(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_int64_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_longlong(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_int64_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_INSTANT_CLASS3_C_long(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, LongType> ARGS; 


#define _EXPAND_INSTANT_CLASS3_C_uint64_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, uint64_t> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, unsigned long long> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, unsigned long> ARGS;

#define _EXPAND_INSTANT_CLASS3_C_uint64(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_uint64_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_UnsignedLong(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_uint64_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_ulonglong(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_uint64_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_INSTANT_CLASS3_C_ulong(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, unsigned long> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, uint64_t> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, uint32_t> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, unsigned long long> ARGS; \
    extern template class FUNC_NAME<FIRST, SECOND, unsigned int> ARGS;

#define _EXPAND_INSTANT_CLASS3_C_char(FUNC_NAME, ARGS, FIRST, SECOND) \
    extern template class FUNC_NAME<FIRST, SECOND, int8_t> ARGS; \
 

#define _EXPAND_INSTANT_CLASS3_C_float(FUNC_NAME, ARGS, FIRST, SECOND) extern template class FUNC_NAME<FIRST, SECOND, float> ARGS;
#define _EXPAND_INSTANT_CLASS3_C_double(FUNC_NAME, ARGS, FIRST, SECOND) extern template class FUNC_NAME<FIRST, SECOND, double> ARGS;
#define _EXPAND_INSTANT_CLASS3_C_float16(FUNC_NAME, ARGS, FIRST, SECOND) extern template class FUNC_NAME<FIRST, SECOND, float16> ARGS;
#define _EXPAND_INSTANT_CLASS3_C_bfloat16(FUNC_NAME, ARGS, FIRST, SECOND) extern template class FUNC_NAME<FIRST, SECOND, bfloat16> ARGS;
#define _EXPAND_INSTANT_CLASS3_C_half(FUNC_NAME, ARGS, FIRST, SECOND) extern template class FUNC_NAME<FIRST, SECOND, float16> ARGS;
#define _EXPAND_INSTANT_CLASS3_C_bool(FUNC_NAME, ARGS, FIRST, SECOND) extern template class FUNC_NAME<FIRST, SECOND, bool> ARGS;

#define _EXPAND_INSTANT_CLASS3_C_DEFAULT(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_INSTANT_CLASS3_C_(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_INSTANT_CLASS3_C_DEFAULT(FUNC_NAME, ARGS, FIRST, SECOND)

// Second level helpers
#define _EXPAND_INSTANT_CLASS3_B_SignedChar(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, SignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, SignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, char)


#define _EXPAND_INSTANT_CLASS3_B_int8_t(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_SignedChar(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_int8(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_SignedChar(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_schar(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_SignedChar(FUNC_NAME, ARGS, FIRST, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_B_UnsignedChar(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, UnsignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, UnsignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, char)

#define _EXPAND_INSTANT_CLASS3_B_uint8_t(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_UnsignedChar(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_uchar(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_UnsignedChar(FUNC_NAME, ARGS, FIRST, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_B_int16_t(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, int16_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, short) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, int)

#define _EXPAND_INSTANT_CLASS3_B_int16(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_int16_t(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_short(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_int16_t(FUNC_NAME, ARGS, FIRST, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_B_uint16_t(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, uint16_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, unsigned short)

#define _EXPAND_INSTANT_CLASS3_B_uint16(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_uint16_t(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_ushort(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_uint16_t(FUNC_NAME, ARGS, FIRST, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_B_int32_t(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, int32_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, int) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, long)

#define _EXPAND_INSTANT_CLASS3_B_int32(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_int32_t(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_Int32Type(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_int32_t(FUNC_NAME, ARGS, FIRST, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_B_int(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, int) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, int32_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, int16_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, short) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, long)

#define _EXPAND_INSTANT_CLASS3_B_uint32_t(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, uint32_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, unsigned int) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, unsigned long)

#define _EXPAND_INSTANT_CLASS3_B_uint32(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_uint32_t(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_uint(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_uint32_t(FUNC_NAME, ARGS, FIRST, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_B_int64_t(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, LongType) 

#define _EXPAND_INSTANT_CLASS3_B_int64(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_int64_t(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_LongType(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_int64_t(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_longlong(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_int64_t(FUNC_NAME, ARGS, FIRST, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_B_long(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, long) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, int64_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, int32_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, long long) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, int)

#define _EXPAND_INSTANT_CLASS3_B_uint64_t(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, uint64_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, unsigned long long) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, unsigned long)

#define _EXPAND_INSTANT_CLASS3_B_uint64(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_uint64_t(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_UnsignedLong(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_uint64_t(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_ulonglong(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_uint64_t(FUNC_NAME, ARGS, FIRST, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_B_ulong(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, unsigned long) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, uint64_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, uint32_t) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, unsigned long long) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, unsigned int)

#define _EXPAND_INSTANT_CLASS3_B_char(FUNC_NAME, ARGS, FIRST, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, char) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, SignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, UnsignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, SignedChar) \
    CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, UnsignedChar)

#define _EXPAND_INSTANT_CLASS3_B_float(FUNC_NAME, ARGS, FIRST, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, float)
#define _EXPAND_INSTANT_CLASS3_B_double(FUNC_NAME, ARGS, FIRST, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, double)
#define _EXPAND_INSTANT_CLASS3_B_float16(FUNC_NAME, ARGS, FIRST, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, float16)
#define _EXPAND_INSTANT_CLASS3_B_bfloat16(FUNC_NAME, ARGS, FIRST, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, bfloat16)
#define _EXPAND_INSTANT_CLASS3_B_half(FUNC_NAME, ARGS, FIRST, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, float16)
#define _EXPAND_INSTANT_CLASS3_B_bool(FUNC_NAME, ARGS, FIRST, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_C_, TYPE_C)(FUNC_NAME, ARGS, FIRST, bool)

#define _EXPAND_INSTANT_CLASS3_B_DEFAULT(FUNC_NAME, ARGS, FIRST, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_B_(FUNC_NAME, ARGS, FIRST, TYPE_C) _EXPAND_INSTANT_CLASS3_B_DEFAULT(FUNC_NAME, ARGS, FIRST, TYPE_C)

// First level helpers
#define _EXPAND_INSTANT_CLASS3_A_SignedChar(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, SignedChar, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, SignedChar, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, char, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_int8_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_SignedChar(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_int8(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_SignedChar(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_schar(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_SignedChar(FUNC_NAME, ARGS, TYPE_B, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_UnsignedChar(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, char, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_uint8_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_UnsignedChar(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_uint8(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_UnsignedChar(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_uchar(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_UnsignedChar(FUNC_NAME, ARGS, TYPE_B, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_int16_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int16_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, short, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_int16(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_int16_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_short(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_int16_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_uint16_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, uint16_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, unsigned short, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_uint16(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_uint16_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_ushort(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_uint16_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_int32_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int32_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, long, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_int32(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_int32_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_Int32Type(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_int32_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_int(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int32_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int16_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, short, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, long, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_uint32_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, uint32_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, unsigned int, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, unsigned long, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_uint32(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_uint32_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_uint(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_uint32_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_int64_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int64_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, long long, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, long, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_int64(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_int64_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_LongType(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_int64_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_longlong(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_int64_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_long(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, long, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int64_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int32_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, long long, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, int, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_uint64_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, uint64_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, unsigned long long, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, unsigned long, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_uint64(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_uint64_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_UnsignedLong(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_uint64_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_ulonglong(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_uint64_t(FUNC_NAME, ARGS, TYPE_B, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_ulong(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, unsigned long, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, uint64_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, uint32_t, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, unsigned long long, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, unsigned int, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_char(FUNC_NAME, ARGS, TYPE_B, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, char, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, SignedChar, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, SignedChar, TYPE_C) \
    CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_float(FUNC_NAME, ARGS, TYPE_B, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, float, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_double(FUNC_NAME, ARGS, TYPE_B, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, double, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_float16(FUNC_NAME, ARGS, TYPE_B, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, float16, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_bfloat16(FUNC_NAME, ARGS, TYPE_B, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, bfloat16, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_half(FUNC_NAME, ARGS, TYPE_B, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, float16, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_bool(FUNC_NAME, ARGS, TYPE_B, TYPE_C) CONCAT(_EXPAND_INSTANT_CLASS3_B_, TYPE_B)(FUNC_NAME, ARGS, bool, TYPE_C)

#define _EXPAND_INSTANT_CLASS3_A_DEFAULT(FUNC_NAME, ARGS, TYPE_B, TYPE_C)
#define _EXPAND_INSTANT_CLASS3_A_(FUNC_NAME, ARGS, TYPE_B, TYPE_C) _EXPAND_INSTANT_CLASS3_A_DEFAULT(FUNC_NAME, ARGS, TYPE_B, TYPE_C)

// Updated INSTANT_PROCESS_COMBINATION_CLASS_3 macro
#define INSTANT_PROCESS_COMBINATION_CLASS_3(a1, b1, c1, FUNC_NAME, ARGS) \
    EVAL(SD_IF_TRIPLE_ALIAS_COMPILED_DECL( \
        GET_FIRST(a1), \
        GET_FIRST(b1), \
        GET_FIRST(c1), \
        CONCAT(_EXPAND_INSTANT_CLASS3_A_, GET_SECOND(a1))(FUNC_NAME, ARGS, GET_SECOND(b1), GET_SECOND(c1)) \
    ))






#define EXPAND_TYPE_APPLY_SignedChar(MACRO) \
    MACRO(int8_t) \
 
#define EXPAND_TYPE_APPLY_int8_t(MACRO) EXPAND_TYPE_APPLY_SignedChar(MACRO)

#define EXPAND_TYPE_APPLY_int8(MACRO) EXPAND_TYPE_APPLY_SignedChar(MACRO)
#define EXPAND_TYPE_APPLY_schar(MACRO) EXPAND_TYPE_APPLY_SignedChar(MACRO)

// UnsignedChar family
#define EXPAND_TYPE_APPLY_UnsignedChar(MACRO) \
    MACRO(uint8_t) 

#define EXPAND_TYPE_APPLY_uint8_t(MACRO) EXPAND_TYPE_APPLY_UnsignedChar(MACRO)

#define EXPAND_TYPE_APPLY_uint8(MACRO) EXPAND_TYPE_APPLY_UnsignedChar(MACRO)
#define EXPAND_TYPE_APPLY_uchar(MACRO) EXPAND_TYPE_APPLY_UnsignedChar(MACRO)

// int16_t family
#define EXPAND_TYPE_APPLY_int16_t(MACRO) \
    MACRO(int16_t) \
    MACRO(short) \
    MACRO(short int) \
    MACRO(int)

#define EXPAND_TYPE_APPLY_int16(MACRO) EXPAND_TYPE_APPLY_int16_t(MACRO)
#define EXPAND_TYPE_APPLY_short(MACRO) EXPAND_TYPE_APPLY_int16_t(MACRO)

// uint16_t family
#define EXPAND_TYPE_APPLY_uint16_t(MACRO) \
    MACRO(uint16_t) \
    MACRO(unsigned short)

#define EXPAND_TYPE_APPLY_uint16(MACRO) EXPAND_TYPE_APPLY_uint16_t(MACRO)
#define EXPAND_TYPE_APPLY_ushort(MACRO) EXPAND_TYPE_APPLY_uint16_t(MACRO)

// int32_t family
#define EXPAND_TYPE_APPLY_int32_t(MACRO) \
    MACRO(int32_t) \
    MACRO(int) \
    MACRO(long)

#define EXPAND_TYPE_APPLY_int32(MACRO) EXPAND_TYPE_APPLY_int32_t(MACRO)
#define EXPAND_TYPE_APPLY_Int32Type(MACRO) EXPAND_TYPE_APPLY_int32_t(MACRO)

// int family
#define EXPAND_TYPE_APPLY_int(MACRO) \
    MACRO(int) \
    MACRO(int32_t) \
    MACRO(int16_t) \
    MACRO(short) \
    MACRO(short int) \
    MACRO(long)

// uint32_t family
#define EXPAND_TYPE_APPLY_uint32_t(MACRO) \
    MACRO(uint32_t) \
    MACRO(unsigned int) \
    MACRO(unsigned long)

#define EXPAND_TYPE_APPLY_uint32(MACRO) EXPAND_TYPE_APPLY_uint32_t(MACRO)
#define EXPAND_TYPE_APPLY_uint(MACRO) EXPAND_TYPE_APPLY_uint32_t(MACRO)

// int64_t family
#define EXPAND_TYPE_APPLY_int64_t(MACRO) \
    MACRO(LongType)

#define EXPAND_TYPE_APPLY_int64(MACRO) \
    MACRO(LongType)

#define EXPAND_TYPE_APPLY_LongType(MACRO) \
    MACRO(LongType) 
#define EXPAND_TYPE_APPLY_longlong(MACRO) EXPAND_TYPE_APPLY_int64_t(MACRO)

// long family
#define EXPAND_TYPE_APPLY_long(MACRO) \
    MACRO(LongType)




#define EXPAND_TYPE_APPLY_uint64_t(MACRO) \
    MACRO(uint64_t) \
    MACRO(unsigned long long) \
    MACRO(unsigned long)

#define EXPAND_TYPE_APPLY_uint64(MACRO) EXPAND_TYPE_APPLY_uint64_t(MACRO)
#define EXPAND_TYPE_APPLY_UnsignedLong(MACRO) EXPAND_TYPE_APPLY_uint64_t(MACRO)
#define EXPAND_TYPE_APPLY_ulonglong(MACRO) EXPAND_TYPE_APPLY_uint64_t(MACRO)

// unsigned long family
#define EXPAND_TYPE_APPLY_ulong(MACRO) \
    MACRO(unsigned long) \
    MACRO(uint64_t) \
    MACRO(uint32_t) \
    MACRO(unsigned long long) \
    MACRO(unsigned int)

// char family (special case with all variants)
#define EXPAND_TYPE_APPLY_char(MACRO) \
    MACRO(char) \
    MACRO(SignedChar) \
    MACRO(UnsignedChar) \
    MACRO(SignedChar) \
    MACRO(UnsignedChar)

// Floating point types (no aliases)
#define EXPAND_TYPE_APPLY_float(MACRO) MACRO(float)
#define EXPAND_TYPE_APPLY_double(MACRO) MACRO(double)
#define EXPAND_TYPE_APPLY_float16(MACRO) MACRO(float16)
#define EXPAND_TYPE_APPLY_bfloat16(MACRO) MACRO(bfloat16)
#define EXPAND_TYPE_APPLY_half(MACRO) MACRO(float16)
#define EXPAND_TYPE_APPLY_bool(MACRO) MACRO(bool)

// String types
#define EXPAND_TYPE_APPLY_UTF8(MACRO) MACRO(utf8string)
#define EXPAND_TYPE_APPLY_UTF16(MACRO) MACRO(utf16string)
#define EXPAND_TYPE_APPLY_UTF32(MACRO) MACRO(utf32string)
#define EXPAND_TYPE_APPLY_utf8string(MACRO) MACRO(utf8string)
#define EXPAND_TYPE_APPLY_utf16string(MACRO) MACRO(utf16string)
#define EXPAND_TYPE_APPLY_utf32string(MACRO) MACRO(utf32string)
#define EXPAND_TYPE_APPLY_string(MACRO) MACRO(stdstring)

// Default/empty case
#define EXPAND_TYPE_APPLY_DEFAULT(MACRO)
#define EXPAND_TYPE_APPLY_(MACRO) EXPAND_TYPE_APPLY_DEFAULT(MACRO)



    // ============================================================================
// FUNCTION CALL VERSIONS OF TEMPLATE INSTANTIATION MACROS
// Same as template versions but without the 'template' keyword
// Used for calling templated functions rather than instantiating them
// ============================================================================

// Helper macros for function calls (no 'template' keyword)
#define INSTANTIATE_CALL_1(TYPE, FUNC_NAME, ARGS) \
    FUNC_NAME<TYPE> ARGS;

#define INSTANTIATE_CALL_2(TYPE, FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, TYPE> ARGS;

#define INSTANTIATE_CALL_3(TYPE, FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, TYPE> ARGS;

// ============================================================================
// CALL_SINGLE - Single type function call version
// ============================================================================

#define _CALL_SINGLE(FUNC_NAME, ARGS, ENUM, TYPE) \
    EVAL(SD_IF_SINGLE_ALIAS_COMPILED_DECL( \
        ENUM, \
        CONCAT(_EXPAND_CALL_SINGLE_, TYPE)(FUNC_NAME, ARGS) \
    ))

// Helper expansions for CALL_SINGLE
#define _EXPAND_CALL_SINGLE_int8_t(FUNC_NAME, ARGS) \
    EXPAND_INT8_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_int8(FUNC_NAME, ARGS) \
    EXPAND_INT8_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_schar(FUNC_NAME, ARGS) \
    EXPAND_INT8_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_SignedChar(FUNC_NAME, ARGS) \
    EXPAND_INT8_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_uint8_t(FUNC_NAME, ARGS) \
    EXPAND_UINT8_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_uint8(FUNC_NAME, ARGS) \
    EXPAND_UINT8_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_uchar(FUNC_NAME, ARGS) \
    EXPAND_UINT8_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_UnsignedChar(FUNC_NAME, ARGS) \
    EXPAND_UINT8_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_int16_t(FUNC_NAME, ARGS) \
    FUNC_NAME<int16_t> ARGS;

#define _EXPAND_CALL_SINGLE_short(FUNC_NAME, ARGS) _EXPAND_CALL_SINGLE_int16_t(FUNC_NAME, ARGS)
#define _EXPAND_CALL_SINGLE_int16(FUNC_NAME, ARGS) _EXPAND_CALL_SINGLE_int16_t(FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_uint16_t(FUNC_NAME, ARGS) \
    FUNC_NAME<uint16_t> ARGS;

#define _EXPAND_CALL_SINGLE_uint16(FUNC_NAME, ARGS) _EXPAND_CALL_SINGLE_uint16_t(FUNC_NAME, ARGS)
#define _EXPAND_CALL_SINGLE_ushort(FUNC_NAME, ARGS) _EXPAND_CALL_SINGLE_uint16_t(FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_int32_t(FUNC_NAME, ARGS) \
    FUNC_NAME<int32_t> ARGS;

#define _EXPAND_CALL_SINGLE_int32(FUNC_NAME, ARGS) _EXPAND_CALL_SINGLE_int32_t(FUNC_NAME, ARGS)
#define _EXPAND_CALL_SINGLE_Int32Type(FUNC_NAME, ARGS) _EXPAND_CALL_SINGLE_int32_t(FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_int(FUNC_NAME, ARGS) \
    FUNC_NAME<int> ARGS;

#define _EXPAND_CALL_SINGLE_uint32_t(FUNC_NAME, ARGS) \
    FUNC_NAME<uint32_t> ARGS;

#define _EXPAND_CALL_SINGLE_uint32(FUNC_NAME, ARGS) _EXPAND_CALL_SINGLE_uint32_t(FUNC_NAME, ARGS)
#define _EXPAND_CALL_SINGLE_uint(FUNC_NAME, ARGS) \
    FUNC_NAME<unsigned int> ARGS;

#define _EXPAND_CALL_SINGLE_int64_t(FUNC_NAME, ARGS) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_int64(FUNC_NAME, ARGS) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_LongType(FUNC_NAME, ARGS) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_longlong(FUNC_NAME, ARGS) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_long(FUNC_NAME, ARGS) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_CALL_1, FUNC_NAME, ARGS)

#define _EXPAND_CALL_SINGLE_uint64_t(FUNC_NAME, ARGS) \
    FUNC_NAME<uint64_t> ARGS;

#define _EXPAND_CALL_SINGLE_uint64(FUNC_NAME, ARGS) _EXPAND_CALL_SINGLE_uint64_t(FUNC_NAME, ARGS)
#define _EXPAND_CALL_SINGLE_UnsignedLong(FUNC_NAME, ARGS) _EXPAND_CALL_SINGLE_uint64_t(FUNC_NAME, ARGS)
#define _EXPAND_CALL_SINGLE_ulonglong(FUNC_NAME, ARGS) \
    FUNC_NAME<unsigned long long> ARGS; \
    FUNC_NAME<uint64_t> ARGS; \
    FUNC_NAME<unsigned long> ARGS;

#define _EXPAND_CALL_SINGLE_ulong(FUNC_NAME, ARGS) \
    FUNC_NAME<unsigned long> ARGS;

#define _EXPAND_CALL_SINGLE_char(FUNC_NAME, ARGS) \
    FUNC_NAME<char> ARGS;

#define _EXPAND_CALL_SINGLE_float(FUNC_NAME, ARGS) FUNC_NAME<float> ARGS;
#define _EXPAND_CALL_SINGLE_double(FUNC_NAME, ARGS) FUNC_NAME<double> ARGS;
#define _EXPAND_CALL_SINGLE_float16(FUNC_NAME, ARGS) FUNC_NAME<float16> ARGS;
#define _EXPAND_CALL_SINGLE_bfloat16(FUNC_NAME, ARGS) FUNC_NAME<bfloat16> ARGS;
#define _EXPAND_CALL_SINGLE_half(FUNC_NAME, ARGS) FUNC_NAME<float16> ARGS;
#define _EXPAND_CALL_SINGLE_bool(FUNC_NAME, ARGS) FUNC_NAME<bool> ARGS;
#define _EXPAND_CALL_SINGLE_float8(FUNC_NAME, ARGS) FUNC_NAME<float8> ARGS;

#define _EXPAND_CALL_SINGLE_UTF8(FUNC_NAME, ARGS) FUNC_NAME<utf8string> ARGS;
#define _EXPAND_CALL_SINGLE_UTF16(FUNC_NAME, ARGS) FUNC_NAME<utf16string> ARGS;
#define _EXPAND_CALL_SINGLE_UTF32(FUNC_NAME, ARGS) FUNC_NAME<utf32string> ARGS;
#define _EXPAND_CALL_SINGLE_utf8string(FUNC_NAME, ARGS) FUNC_NAME<utf8string> ARGS;
#define _EXPAND_CALL_SINGLE_utf16string(FUNC_NAME, ARGS) FUNC_NAME<utf16string> ARGS;
#define _EXPAND_CALL_SINGLE_utf32string(FUNC_NAME, ARGS) FUNC_NAME<utf32string> ARGS;
#define _EXPAND_CALL_SINGLE_string(FUNC_NAME, ARGS) FUNC_NAME<stdstring> ARGS;

#define _EXPAND_CALL_SINGLE_sd_LongType(FUNC_NAME, ARGS) \
    FUNC_NAME<sd::LongType> ARGS; \
    FUNC_NAME<int64_t> ARGS; \
    FUNC_NAME<long long> ARGS; \
    FUNC_NAME<long> ARGS;

#define _EXPAND_CALL_SINGLE_DEFAULT(FUNC_NAME, ARGS)
#define _EXPAND_CALL_SINGLE_(FUNC_NAME, ARGS) _EXPAND_CALL_SINGLE_DEFAULT(FUNC_NAME, ARGS)

// ============================================================================
// CALL_DOUBLE2 - Double type function call version
// ============================================================================

#define _CALL_DOUBLE2(FUNC_NAME, ARGS, ENUM_A, TYPE_A, ENUM_B, TYPE_B) \
    EVAL(SD_IF_PAIR_ALIAS_COMPILED_DECL( \
        ENUM_A, \
        ENUM_B, \
        CONCAT(_EXPAND_CALL_DOUBLE2_, TYPE_B)(FUNC_NAME, ARGS, TYPE_A) \
    ))

// Second position helpers for CALL_DOUBLE2
#define _EXPAND_CALL_DOUBLE2_SECOND_SignedChar(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, SignedChar> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_int8_t(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, int8_t> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_int8(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_int8_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_CALL_DOUBLE2_SECOND_schar(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_SignedChar(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_CALL_DOUBLE2_SECOND_UnsignedChar(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, UnsignedChar> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_uint8_t(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, uint8_t> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_uint8(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_uint8_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_CALL_DOUBLE2_SECOND_uchar(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_UnsignedChar(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_CALL_DOUBLE2_SECOND_int16_t(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, int16_t> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_int16(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_int16_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_CALL_DOUBLE2_SECOND_short(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, short> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_uint16_t(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, uint16_t> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_uint16(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_uint16_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_CALL_DOUBLE2_SECOND_ushort(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, unsigned short> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_int32_t(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, int32_t> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_int32(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_int32_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_CALL_DOUBLE2_SECOND_Int32Type(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_int32_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_CALL_DOUBLE2_SECOND_int(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, int> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_uint32_t(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, uint32_t> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_uint32(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_uint32_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_CALL_DOUBLE2_SECOND_uint(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, unsigned int> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_int64_t(FUNC_NAME, ARGS, FIRST) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_CALL_2, FUNC_NAME, ARGS, FIRST)

#define _EXPAND_CALL_DOUBLE2_SECOND_int64(FUNC_NAME, ARGS, FIRST) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_CALL_2, FUNC_NAME, ARGS, FIRST)

#define _EXPAND_CALL_DOUBLE2_SECOND_LongType(FUNC_NAME, ARGS, FIRST) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_CALL_2, FUNC_NAME, ARGS, FIRST)

#define _EXPAND_CALL_DOUBLE2_SECOND_longlong(FUNC_NAME, ARGS, FIRST) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_CALL_2, FUNC_NAME, ARGS, FIRST)

#define _EXPAND_CALL_DOUBLE2_SECOND_long(FUNC_NAME, ARGS, FIRST) \
    EXPAND_INT64_VARIANTS(INSTANTIATE_CALL_2, FUNC_NAME, ARGS, FIRST)

#define _EXPAND_CALL_DOUBLE2_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, uint64_t> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_uint64(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_CALL_DOUBLE2_SECOND_UnsignedLong(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_uint64_t(FUNC_NAME, ARGS, FIRST)

#define _EXPAND_CALL_DOUBLE2_SECOND_ulonglong(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, unsigned long long> ARGS; \
    FUNC_NAME<FIRST, uint64_t> ARGS; \
    FUNC_NAME<FIRST, unsigned long> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_ulong(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, unsigned long> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_char(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, char> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_float(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, float> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_double(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, double> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_float16(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, float16> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_bfloat16(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, bfloat16> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_half(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, float16> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_bool(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, bool> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_float8(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, float8> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_UTF8(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, utf8string> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_UTF16(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, utf16string> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_UTF32(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, utf32string> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_utf8string(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, utf8string> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_utf16string(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, utf16string> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_utf32string(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, utf32string> ARGS;
#define _EXPAND_CALL_DOUBLE2_SECOND_string(FUNC_NAME, ARGS, FIRST) FUNC_NAME<FIRST, stdstring> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_sd_LongType(FUNC_NAME, ARGS, FIRST) \
    FUNC_NAME<FIRST, sd::LongType> ARGS; \
    FUNC_NAME<FIRST, int64_t> ARGS; \
    FUNC_NAME<FIRST, long long> ARGS; \
    FUNC_NAME<FIRST, long> ARGS;

#define _EXPAND_CALL_DOUBLE2_SECOND_DEFAULT(FUNC_NAME, ARGS, FIRST)
#define _EXPAND_CALL_DOUBLE2_SECOND_(FUNC_NAME, ARGS, FIRST) _EXPAND_CALL_DOUBLE2_SECOND_DEFAULT(FUNC_NAME, ARGS, FIRST)

// First position type expansions
#define _EXPAND_CALL_DOUBLE2_SignedChar(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, char)

#define _EXPAND_CALL_DOUBLE2_int8_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int8_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, signed char) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, char)

#define _EXPAND_CALL_DOUBLE2_int8(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_SignedChar(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_schar(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_SignedChar(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_CALL_DOUBLE2_UnsignedChar(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, char)

#define _EXPAND_CALL_DOUBLE2_uint8_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint8_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned char)

#define _EXPAND_CALL_DOUBLE2_uint8(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_UnsignedChar(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_uchar(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_UnsignedChar(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_CALL_DOUBLE2_int16_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int16_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, short) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, short int) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int)

#define _EXPAND_CALL_DOUBLE2_int16(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_int16_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_short(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_int16_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_CALL_DOUBLE2_uint16_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint16_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned short)

#define _EXPAND_CALL_DOUBLE2_uint16(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_uint16_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_ushort(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_uint16_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_CALL_DOUBLE2_int32_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int32_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long)

#define _EXPAND_CALL_DOUBLE2_int32(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_int32_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_Int32Type(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_int32_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_CALL_DOUBLE2_int(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int32_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int16_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, short) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, short int) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long)

#define _EXPAND_CALL_DOUBLE2_uint32_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint32_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned int) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long)

#define _EXPAND_CALL_DOUBLE2_uint32(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_uint32_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_uint(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_uint32_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_CALL_DOUBLE2_int64_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int64_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long long) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long)

#define _EXPAND_CALL_DOUBLE2_int64(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_int64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_LongType(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_int64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_longlong(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_int64_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_CALL_DOUBLE2_long(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int64_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int32_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, long long) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, int)

#define _EXPAND_CALL_DOUBLE2_uint64_t(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint64_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long long) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long)

#define _EXPAND_CALL_DOUBLE2_uint64(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_uint64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_UnsignedLong(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_uint64_t(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_ulonglong(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_uint64_t(FUNC_NAME, ARGS, TYPE_B)

#define _EXPAND_CALL_DOUBLE2_ulong(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint64_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, uint32_t) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned long long) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, unsigned int)

#define _EXPAND_CALL_DOUBLE2_char(FUNC_NAME, ARGS, TYPE_B) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, char) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, SignedChar) \
    CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, UnsignedChar)

#define _EXPAND_CALL_DOUBLE2_float(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, float)
#define _EXPAND_CALL_DOUBLE2_double(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, double)
#define _EXPAND_CALL_DOUBLE2_float16(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, float16)
#define _EXPAND_CALL_DOUBLE2_bfloat16(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, bfloat16)
#define _EXPAND_CALL_DOUBLE2_half(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, float16)
#define _EXPAND_CALL_DOUBLE2_bool(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, bool)
#define _EXPAND_CALL_DOUBLE2_float8(FUNC_NAME, ARGS, TYPE_B) CONCAT(_EXPAND_CALL_DOUBLE2_SECOND_, TYPE_B)(FUNC_NAME, ARGS, float8)

// String types for first position
#define _EXPAND_CALL_DOUBLE2_stdstring(FUNC_NAME, ARGS, TYPE_A) \
    FUNC_NAME<TYPE_A, stdstring> ARGS; \
    FUNC_NAME<TYPE_A, std::string> ARGS;

#define _EXPAND_CALL_DOUBLE2_string(FUNC_NAME, ARGS, TYPE_A) \
    FUNC_NAME<TYPE_A, stdstring> ARGS; 

#define _EXPAND_CALL_DOUBLE2_u16string(FUNC_NAME, ARGS, TYPE_A) \
    FUNC_NAME<TYPE_A, u16string> ARGS; \
    FUNC_NAME<TYPE_A, std::u16string> ARGS;

#define _EXPAND_CALL_DOUBLE2_u32string(FUNC_NAME, ARGS, TYPE_A) \
    FUNC_NAME<TYPE_A, u32string> ARGS; \
    FUNC_NAME<TYPE_A, std::u32string> ARGS;

#define _EXPAND_CALL_DOUBLE2_UTF8(FUNC_NAME, ARGS, TYPE_A) \
    FUNC_NAME<TYPE_A, utf8string> ARGS;

#define _EXPAND_CALL_DOUBLE2_utf8string(FUNC_NAME, ARGS, TYPE_A) \
    FUNC_NAME<TYPE_A, utf8string> ARGS;

#define _EXPAND_CALL_DOUBLE2_UTF16(FUNC_NAME, ARGS, TYPE_A) \
    FUNC_NAME<TYPE_A, utf16string> ARGS;

#define _EXPAND_CALL_DOUBLE2_utf16string(FUNC_NAME, ARGS, TYPE_A) \
    FUNC_NAME<TYPE_A, utf16string> ARGS;

#define _EXPAND_CALL_DOUBLE2_UTF32(FUNC_NAME, ARGS, TYPE_A) \
    FUNC_NAME<TYPE_A, utf32string> ARGS;

#define _EXPAND_CALL_DOUBLE2_utf32string(FUNC_NAME, ARGS, TYPE_A) \
    FUNC_NAME<TYPE_A, utf32string> ARGS;

#define _EXPAND_CALL_DOUBLE2_DEFAULT(FUNC_NAME, ARGS, TYPE_B)
#define _EXPAND_CALL_DOUBLE2_(FUNC_NAME, ARGS, TYPE_B) _EXPAND_CALL_DOUBLE2_DEFAULT(FUNC_NAME, ARGS, TYPE_B)

// ============================================================================
// CALL_TRIPLE3 - Triple type function call version
// ============================================================================

#define _CALL_TRIPLE3(FUNC_NAME, ARGS, ENUM_Z, TYPE_Z, ENUM_Y, TYPE_Y, ENUM_X, TYPE_X) \
    EVAL(SD_IF_TRIPLE_ALIAS_COMPILED_DECL( \
        ENUM_X, \
        ENUM_Y, \
        ENUM_Z, \
        CONCAT(_EXPAND_CALL_TRIPLE3_X_, TYPE_X)(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    ))

// Third level helpers
#define _EXPAND_CALL_TRIPLE3_Z_SignedChar(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, int8_t> ARGS; 


#define _EXPAND_CALL_TRIPLE3_Z_int8(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_SignedChar(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_schar(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_SignedChar(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_CALL_TRIPLE3_Z_UnsignedChar(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, uint8_t> ARGS; \

#define _EXPAND_CALL_TRIPLE3_Z_uint8(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_UnsignedChar(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_uchar(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_UnsignedChar(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_CALL_TRIPLE3_Z_int16_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, int16_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, short> ARGS; \
    FUNC_NAME<FIRST, SECOND, int> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_int16(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_int16_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_short(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_int16_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_CALL_TRIPLE3_Z_uint16_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, uint16_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, unsigned short> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_uint16(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_uint16_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_ushort(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_uint16_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_CALL_TRIPLE3_Z_int32_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, int32_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, int> ARGS; \
    FUNC_NAME<FIRST, SECOND, long> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_int32(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_int32_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_Int32Type(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_int32_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_CALL_TRIPLE3_Z_int(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, int> ARGS; \
    FUNC_NAME<FIRST, SECOND, int32_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, int16_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, short> ARGS; \
    FUNC_NAME<FIRST, SECOND, long> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_uint32_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, uint32_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, unsigned int> ARGS; \
    FUNC_NAME<FIRST, SECOND, unsigned long> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_uint32(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_uint32_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_uint(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_uint32_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_CALL_TRIPLE3_Z_int64_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, int64_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, long long> ARGS; \
    FUNC_NAME<FIRST, SECOND, long> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_int64(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_int64_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_LongType(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_int64_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_longlong(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_int64_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_CALL_TRIPLE3_Z_long(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, long> ARGS; \
    FUNC_NAME<FIRST, SECOND, int64_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, int32_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, long long> ARGS; \
    FUNC_NAME<FIRST, SECOND, int> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_uint64_t(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, uint64_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, unsigned long long> ARGS; \
    FUNC_NAME<FIRST, SECOND, unsigned long> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_uint64(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_uint64_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_UnsignedLong(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_uint64_t(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_ulonglong(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_uint64_t(FUNC_NAME, ARGS, FIRST, SECOND)

#define _EXPAND_CALL_TRIPLE3_Z_ulong(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, unsigned long> ARGS; \
    FUNC_NAME<FIRST, SECOND, uint64_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, uint32_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, unsigned long long> ARGS; \
    FUNC_NAME<FIRST, SECOND, unsigned int> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_char(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, int8_t> ARGS; \


#define _EXPAND_CALL_TRIPLE3_Z_float(FUNC_NAME, ARGS, FIRST, SECOND) FUNC_NAME<FIRST, SECOND, float> ARGS;
#define _EXPAND_CALL_TRIPLE3_Z_double(FUNC_NAME, ARGS, FIRST, SECOND) FUNC_NAME<FIRST, SECOND, double> ARGS;
#define _EXPAND_CALL_TRIPLE3_Z_float16(FUNC_NAME, ARGS, FIRST, SECOND) FUNC_NAME<FIRST, SECOND, float16> ARGS;
#define _EXPAND_CALL_TRIPLE3_Z_bfloat16(FUNC_NAME, ARGS, FIRST, SECOND) FUNC_NAME<FIRST, SECOND, bfloat16> ARGS;
#define _EXPAND_CALL_TRIPLE3_Z_half(FUNC_NAME, ARGS, FIRST, SECOND) FUNC_NAME<FIRST, SECOND, float16> ARGS;
#define _EXPAND_CALL_TRIPLE3_Z_bool(FUNC_NAME, ARGS, FIRST, SECOND) FUNC_NAME<FIRST, SECOND, bool> ARGS;
#define _EXPAND_CALL_TRIPLE3_Z_float8(FUNC_NAME, ARGS, FIRST, SECOND) FUNC_NAME<FIRST, SECOND, float8> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_sd_LongType(FUNC_NAME, ARGS, FIRST, SECOND) \
    FUNC_NAME<FIRST, SECOND, sd::LongType> ARGS; \
    FUNC_NAME<FIRST, SECOND, int64_t> ARGS; \
    FUNC_NAME<FIRST, SECOND, long long> ARGS; \
    FUNC_NAME<FIRST, SECOND, long> ARGS;

#define _EXPAND_CALL_TRIPLE3_Z_DEFAULT(FUNC_NAME, ARGS, FIRST, SECOND)
#define _EXPAND_CALL_TRIPLE3_Z_(FUNC_NAME, ARGS, FIRST, SECOND) _EXPAND_CALL_TRIPLE3_Z_DEFAULT(FUNC_NAME, ARGS, FIRST, SECOND)

// Second level helpers - expand Y and call Z expansions
#define _EXPAND_CALL_TRIPLE3_Y_SignedChar(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, SignedChar) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, SignedChar) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, char)

#define _EXPAND_CALL_TRIPLE3_Y_int8(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_SignedChar(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_schar(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_SignedChar(FUNC_NAME, ARGS, FIRST, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_Y_UnsignedChar(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, UnsignedChar) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, UnsignedChar) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, char)

#define _EXPAND_CALL_TRIPLE3_Y_uint8(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_UnsignedChar(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_uchar(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_UnsignedChar(FUNC_NAME, ARGS, FIRST, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_Y_int16_t(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, int16_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, short) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, int)

#define _EXPAND_CALL_TRIPLE3_Y_int16(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_int16_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_short(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_int16_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_Y_uint16_t(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, uint16_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, unsigned short)

#define _EXPAND_CALL_TRIPLE3_Y_uint16(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_uint16_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_ushort(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_uint16_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_Y_int32_t(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, int32_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, int) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, long)

#define _EXPAND_CALL_TRIPLE3_Y_int32(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_int32_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_Int32Type(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_int32_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_Y_int(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, int) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, int32_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, int16_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, short) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, long)

#define _EXPAND_CALL_TRIPLE3_Y_uint32_t(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, uint32_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, unsigned int) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, unsigned long)

#define _EXPAND_CALL_TRIPLE3_Y_uint32(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_uint32_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_uint(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_uint32_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_Y_int64_t(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, int64_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, long long) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, long)

#define _EXPAND_CALL_TRIPLE3_Y_int64(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_int64_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_LongType(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_int64_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_longlong(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_int64_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_Y_long(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, long) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, long long) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, int64_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, sd::LongType) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, LongType)

#define _EXPAND_CALL_TRIPLE3_Y_uint64_t(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, uint64_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, unsigned long long) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, unsigned long)

#define _EXPAND_CALL_TRIPLE3_Y_uint64(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_uint64_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_UnsignedLong(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_uint64_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_ulonglong(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_uint64_t(FUNC_NAME, ARGS, FIRST, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_Y_ulong(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, unsigned long) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, uint64_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, uint32_t) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, unsigned long long) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, unsigned int)

#define _EXPAND_CALL_TRIPLE3_Y_char(FUNC_NAME, ARGS, FIRST, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, char) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, SignedChar) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, UnsignedChar) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, SignedChar) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, UnsignedChar)

#define _EXPAND_CALL_TRIPLE3_Y_float(FUNC_NAME, ARGS, FIRST, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, float)
#define _EXPAND_CALL_TRIPLE3_Y_double(FUNC_NAME, ARGS, FIRST, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, double)
#define _EXPAND_CALL_TRIPLE3_Y_float16(FUNC_NAME, ARGS, FIRST, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, float16)
#define _EXPAND_CALL_TRIPLE3_Y_bfloat16(FUNC_NAME, ARGS, FIRST, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, bfloat16)
#define _EXPAND_CALL_TRIPLE3_Y_half(FUNC_NAME, ARGS, FIRST, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, float16)
#define _EXPAND_CALL_TRIPLE3_Y_bool(FUNC_NAME, ARGS, FIRST, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, bool)
#define _EXPAND_CALL_TRIPLE3_Y_float8(FUNC_NAME, ARGS, FIRST, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Z_, TYPE_Z)(FUNC_NAME, ARGS, FIRST, float8)

#define _EXPAND_CALL_TRIPLE3_Y_DEFAULT(FUNC_NAME, ARGS, FIRST, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_Y_(FUNC_NAME, ARGS, FIRST, TYPE_Z) _EXPAND_CALL_TRIPLE3_Y_DEFAULT(FUNC_NAME, ARGS, FIRST, TYPE_Z)

// First level helpers - expand X and call Y expansions  
#define _EXPAND_CALL_TRIPLE3_X_SignedChar(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, SignedChar, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, SignedChar, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, char, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_int8_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_SignedChar(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_int8(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_SignedChar(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_schar(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_SignedChar(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_UnsignedChar(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, UnsignedChar, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, UnsignedChar, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, char, TYPE_Z)


#define _EXPAND_CALL_TRIPLE3_X_uint8_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_UnsignedChar(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_uint8(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_UnsignedChar(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_uchar(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_UnsignedChar(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_int16_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int16_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, short, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_int16(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_int16_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_short(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_int16_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_uint16_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, uint16_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, unsigned short, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_uint16(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_uint16_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_ushort(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_uint16_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_int32_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int32_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, long, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_int32(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_int32_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_Int32Type(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_int32_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_int(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int32_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int16_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, short, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, long, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_uint32_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, uint32_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, unsigned int, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, unsigned long, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_uint32(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_uint32_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_uint(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_uint32_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_int64_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int64_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, long long, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, long, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_int64(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_int64_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_LongType(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_int64_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_longlong(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_int64_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_long(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, long, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int64_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int32_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, long long, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, int, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_uint64_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, uint64_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, unsigned long long, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, unsigned long, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_uint64(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_uint64_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_UnsignedLong(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_uint64_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_ulonglong(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_uint64_t(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_ulong(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, unsigned long, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, uint64_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, uint32_t, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, unsigned long long, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, unsigned int, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_char(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, char, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, SignedChar, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, UnsignedChar, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, SignedChar, TYPE_Z) \
    CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, UnsignedChar, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_float(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, float, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_double(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, double, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_float16(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, float16, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_bfloat16(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, bfloat16, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_half(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, float16, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_bool(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, bool, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_float8(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) CONCAT(_EXPAND_CALL_TRIPLE3_Y_, TYPE_Y)(FUNC_NAME, ARGS, float8, TYPE_Z)

#define _EXPAND_CALL_TRIPLE3_X_DEFAULT(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)
#define _EXPAND_CALL_TRIPLE3_X_(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z) _EXPAND_CALL_TRIPLE3_X_DEFAULT(FUNC_NAME, ARGS, TYPE_Y, TYPE_Z)