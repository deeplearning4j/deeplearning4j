// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESULT_GRAPH_H_
#define FLATBUFFERS_GENERATED_RESULT_GRAPH_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "node_generated.h"
#include "utils_generated.h"
#include "variable_generated.h"

namespace graph {

struct FlatTiming;
struct FlatTimingBuilder;

struct FlatResult;
struct FlatResultBuilder;

struct FlatTiming FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlatTimingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_TIMING = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const graph::LongPair *timing() const {
    return GetPointer<const graph::LongPair *>(VT_TIMING);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TIMING) &&
           verifier.VerifyTable(timing()) &&
           verifier.EndTable();
  }
};

struct FlatTimingBuilder {
  typedef FlatTiming Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(FlatTiming::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FlatTiming::VT_NAME, name);
  }
  void add_timing(::flatbuffers::Offset<graph::LongPair> timing) {
    fbb_.AddOffset(FlatTiming::VT_TIMING, timing);
  }
  explicit FlatTimingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlatTiming> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlatTiming>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlatTiming> CreateFlatTiming(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<graph::LongPair> timing = 0) {
  FlatTimingBuilder builder_(_fbb);
  builder_.add_timing(timing);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FlatTiming> CreateFlatTimingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *name = nullptr,
    ::flatbuffers::Offset<graph::LongPair> timing = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return graph::CreateFlatTiming(
      _fbb,
      id,
      name__,
      timing);
}

struct FlatResult FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlatResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_VARIABLES = 6,
    VT_TIMING = 8,
    VT_FOOTPRINTFORWARD = 10,
    VT_FOOTPRINTBACKWARD = 12
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatVariable>> *variables() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatVariable>> *>(VT_VARIABLES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatTiming>> *timing() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatTiming>> *>(VT_TIMING);
  }
  int64_t footprintForward() const {
    return GetField<int64_t>(VT_FOOTPRINTFORWARD, 0);
  }
  int64_t footprintBackward() const {
    return GetField<int64_t>(VT_FOOTPRINTBACKWARD, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_VARIABLES) &&
           verifier.VerifyVector(variables()) &&
           verifier.VerifyVectorOfTables(variables()) &&
           VerifyOffset(verifier, VT_TIMING) &&
           verifier.VerifyVector(timing()) &&
           verifier.VerifyVectorOfTables(timing()) &&
           VerifyField<int64_t>(verifier, VT_FOOTPRINTFORWARD, 8) &&
           VerifyField<int64_t>(verifier, VT_FOOTPRINTBACKWARD, 8) &&
           verifier.EndTable();
  }
};

struct FlatResultBuilder {
  typedef FlatResult Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(FlatResult::VT_ID, id, 0);
  }
  void add_variables(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatVariable>>> variables) {
    fbb_.AddOffset(FlatResult::VT_VARIABLES, variables);
  }
  void add_timing(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatTiming>>> timing) {
    fbb_.AddOffset(FlatResult::VT_TIMING, timing);
  }
  void add_footprintForward(int64_t footprintForward) {
    fbb_.AddElement<int64_t>(FlatResult::VT_FOOTPRINTFORWARD, footprintForward, 0);
  }
  void add_footprintBackward(int64_t footprintBackward) {
    fbb_.AddElement<int64_t>(FlatResult::VT_FOOTPRINTBACKWARD, footprintBackward, 0);
  }
  explicit FlatResultBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlatResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlatResult>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlatResult> CreateFlatResult(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatVariable>>> variables = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatTiming>>> timing = 0,
    int64_t footprintForward = 0,
    int64_t footprintBackward = 0) {
  FlatResultBuilder builder_(_fbb);
  builder_.add_footprintBackward(footprintBackward);
  builder_.add_footprintForward(footprintForward);
  builder_.add_id(id);
  builder_.add_timing(timing);
  builder_.add_variables(variables);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FlatResult> CreateFlatResultDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    const std::vector<::flatbuffers::Offset<graph::FlatVariable>> *variables = nullptr,
    const std::vector<::flatbuffers::Offset<graph::FlatTiming>> *timing = nullptr,
    int64_t footprintForward = 0,
    int64_t footprintBackward = 0) {
  auto variables__ = variables ? _fbb.CreateVector<::flatbuffers::Offset<graph::FlatVariable>>(*variables) : 0;
  auto timing__ = timing ? _fbb.CreateVector<::flatbuffers::Offset<graph::FlatTiming>>(*timing) : 0;
  return graph::CreateFlatResult(
      _fbb,
      id,
      variables__,
      timing__,
      footprintForward,
      footprintBackward);
}

inline const graph::FlatResult *GetFlatResult(const void *buf) {
  return ::flatbuffers::GetRoot<graph::FlatResult>(buf);
}

inline const graph::FlatResult *GetSizePrefixedFlatResult(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<graph::FlatResult>(buf);
}

inline bool VerifyFlatResultBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<graph::FlatResult>(nullptr);
}

inline bool VerifySizePrefixedFlatResultBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<graph::FlatResult>(nullptr);
}

inline void FinishFlatResultBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<graph::FlatResult> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFlatResultBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<graph::FlatResult> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace graph

#endif  // FLATBUFFERS_GENERATED_RESULT_GRAPH_H_
