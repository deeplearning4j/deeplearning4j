// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SEQUENCE_GRAPH_H_
#define FLATBUFFERS_GENERATED_SEQUENCE_GRAPH_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "array_generated.h"

namespace graph {

struct SequenceItem;
struct SequenceItemBuilder;

struct SequenceItemRoot;
struct SequenceItemRootBuilder;

struct SequenceItem FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SequenceItemBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ASSOCIATED_VARIABLE = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatArray>> *associated_variable() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatArray>> *>(VT_ASSOCIATED_VARIABLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ASSOCIATED_VARIABLE) &&
           verifier.VerifyVector(associated_variable()) &&
           verifier.VerifyVectorOfTables(associated_variable()) &&
           verifier.EndTable();
  }
};

struct SequenceItemBuilder {
  typedef SequenceItem Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SequenceItem::VT_NAME, name);
  }
  void add_associated_variable(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatArray>>> associated_variable) {
    fbb_.AddOffset(SequenceItem::VT_ASSOCIATED_VARIABLE, associated_variable);
  }
  explicit SequenceItemBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SequenceItem> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SequenceItem>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SequenceItem> CreateSequenceItem(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatArray>>> associated_variable = 0) {
  SequenceItemBuilder builder_(_fbb);
  builder_.add_associated_variable(associated_variable);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SequenceItem> CreateSequenceItemDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<graph::FlatArray>> *associated_variable = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto associated_variable__ = associated_variable ? _fbb.CreateVector<::flatbuffers::Offset<graph::FlatArray>>(*associated_variable) : 0;
  return graph::CreateSequenceItem(
      _fbb,
      name__,
      associated_variable__);
}

struct SequenceItemRoot FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SequenceItemRootBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEQUENCE_ITEMS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<graph::SequenceItem>> *sequence_items() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<graph::SequenceItem>> *>(VT_SEQUENCE_ITEMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SEQUENCE_ITEMS) &&
           verifier.VerifyVector(sequence_items()) &&
           verifier.VerifyVectorOfTables(sequence_items()) &&
           verifier.EndTable();
  }
};

struct SequenceItemRootBuilder {
  typedef SequenceItemRoot Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sequence_items(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<graph::SequenceItem>>> sequence_items) {
    fbb_.AddOffset(SequenceItemRoot::VT_SEQUENCE_ITEMS, sequence_items);
  }
  explicit SequenceItemRootBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SequenceItemRoot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SequenceItemRoot>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SequenceItemRoot> CreateSequenceItemRoot(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<graph::SequenceItem>>> sequence_items = 0) {
  SequenceItemRootBuilder builder_(_fbb);
  builder_.add_sequence_items(sequence_items);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SequenceItemRoot> CreateSequenceItemRootDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<graph::SequenceItem>> *sequence_items = nullptr) {
  auto sequence_items__ = sequence_items ? _fbb.CreateVector<::flatbuffers::Offset<graph::SequenceItem>>(*sequence_items) : 0;
  return graph::CreateSequenceItemRoot(
      _fbb,
      sequence_items__);
}

inline const graph::SequenceItemRoot *GetSequenceItemRoot(const void *buf) {
  return ::flatbuffers::GetRoot<graph::SequenceItemRoot>(buf);
}

inline const graph::SequenceItemRoot *GetSizePrefixedSequenceItemRoot(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<graph::SequenceItemRoot>(buf);
}

inline bool VerifySequenceItemRootBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<graph::SequenceItemRoot>(nullptr);
}

inline bool VerifySizePrefixedSequenceItemRootBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<graph::SequenceItemRoot>(nullptr);
}

inline void FinishSequenceItemRootBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<graph::SequenceItemRoot> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSequenceItemRootBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<graph::SequenceItemRoot> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace graph

#endif  // FLATBUFFERS_GENERATED_SEQUENCE_GRAPH_H_
