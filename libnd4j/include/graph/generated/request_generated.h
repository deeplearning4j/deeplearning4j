// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_GRAPH_H_
#define FLATBUFFERS_GENERATED_REQUEST_GRAPH_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "config_generated.h"
#include "variable_generated.h"

namespace graph {

struct FlatInferenceRequest;
struct FlatInferenceRequestBuilder;

struct FlatInferenceRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlatInferenceRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_VARIABLES = 6,
    VT_CONFIGURATION = 8
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatVariable>> *variables() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatVariable>> *>(VT_VARIABLES);
  }
  const graph::FlatConfiguration *configuration() const {
    return GetPointer<const graph::FlatConfiguration *>(VT_CONFIGURATION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_VARIABLES) &&
           verifier.VerifyVector(variables()) &&
           verifier.VerifyVectorOfTables(variables()) &&
           VerifyOffset(verifier, VT_CONFIGURATION) &&
           verifier.VerifyTable(configuration()) &&
           verifier.EndTable();
  }
};

struct FlatInferenceRequestBuilder {
  typedef FlatInferenceRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(FlatInferenceRequest::VT_ID, id, 0);
  }
  void add_variables(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatVariable>>> variables) {
    fbb_.AddOffset(FlatInferenceRequest::VT_VARIABLES, variables);
  }
  void add_configuration(::flatbuffers::Offset<graph::FlatConfiguration> configuration) {
    fbb_.AddOffset(FlatInferenceRequest::VT_CONFIGURATION, configuration);
  }
  explicit FlatInferenceRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlatInferenceRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlatInferenceRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlatInferenceRequest> CreateFlatInferenceRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<graph::FlatVariable>>> variables = 0,
    ::flatbuffers::Offset<graph::FlatConfiguration> configuration = 0) {
  FlatInferenceRequestBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_configuration(configuration);
  builder_.add_variables(variables);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FlatInferenceRequest> CreateFlatInferenceRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    const std::vector<::flatbuffers::Offset<graph::FlatVariable>> *variables = nullptr,
    ::flatbuffers::Offset<graph::FlatConfiguration> configuration = 0) {
  auto variables__ = variables ? _fbb.CreateVector<::flatbuffers::Offset<graph::FlatVariable>>(*variables) : 0;
  return graph::CreateFlatInferenceRequest(
      _fbb,
      id,
      variables__,
      configuration);
}

inline const graph::FlatInferenceRequest *GetFlatInferenceRequest(const void *buf) {
  return ::flatbuffers::GetRoot<graph::FlatInferenceRequest>(buf);
}

inline const graph::FlatInferenceRequest *GetSizePrefixedFlatInferenceRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<graph::FlatInferenceRequest>(buf);
}

inline bool VerifyFlatInferenceRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<graph::FlatInferenceRequest>(nullptr);
}

inline bool VerifySizePrefixedFlatInferenceRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<graph::FlatInferenceRequest>(nullptr);
}

inline void FinishFlatInferenceRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<graph::FlatInferenceRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFlatInferenceRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<graph::FlatInferenceRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace graph

#endif  // FLATBUFFERS_GENERATED_REQUEST_GRAPH_H_
