/* ******************************************************************************
*
*
* This program and the accompanying materials are made available under the
* terms of the Apache License, Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0.
*
*  See the NOTICE file distributed with this work for additional
*  information regarding copyright ownership.
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*
* SPDX-License-Identifier: Apache-2.0
******************************************************************************/

//
// BroadcastInt template instantiations
//

#include <loops/cpu/broadcasting_int.hpp>
#include <loops/pairwise_instantiations.h>
#include <system/type_boilerplate.h>

/*
* Macro for instantiating BroadcastInt for a single type
* This follows the pattern where BroadcastInt is specialized for integer types only
*/

#define INSTANTIATE_BROADCAST_INT(TYPE_TUPLE) \
    template void functions::broadcast::BroadcastInt<GET_SECOND(TYPE_TUPLE)>::exec( \
        int opNum, const void *x, const sd::LongType *xShapeInfo, const void *y, \
        const sd::LongType *yShapeInfo, void *z, const sd::LongType *zShapeInfo, \
        sd::LongType *dimension, sd::LongType dimensionLength, \
        const sd::LongType *tadOnlyShapeInfo, const sd::LongType *tadOffsets, \
        const sd::LongType *tadOnlyShapeInfoZ, const sd::LongType *tadOffsetsZ, \
        sd::LongType start, sd::LongType stop); \
    \
    template void functions::broadcast::BroadcastInt<GET_SECOND(TYPE_TUPLE)>::exec( \
        int opNum, const void *x, const sd::LongType *xShapeInfo, const void *y, \
        const sd::LongType *yShapeInfo, void *z, const sd::LongType *zShapeInfo); \
    \
    template void functions::broadcast::BroadcastInt<GET_SECOND(TYPE_TUPLE)>::execInverse( \
        int opNum, const void *x, const sd::LongType *xShapeInfo, const void *y, \
        const sd::LongType *yShapeInfo, void *z, const sd::LongType *zShapeInfo, \
        sd::LongType *dimension, sd::LongType dimensionLength, \
        const sd::LongType *tadOnlyShapeInfo, const sd::LongType *tadOffsets, \
        const sd::LongType *tadOnlyShapeInfoZ, const sd::LongType *tadOffsetsZ, \
        sd::LongType start, sd::LongType stop);

/*
* Function Instantiation:
* BroadcastInt instantiated for all integer types in SD_INTEGER_TYPES_PART_@COMB1@
*/
ITERATE_LIST((SD_INTEGER_TYPES_PART_@COMB1@), INSTANTIATE_BROADCAST_INT)
