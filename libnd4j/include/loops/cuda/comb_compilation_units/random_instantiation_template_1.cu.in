/* ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

//
// Created by agibsonccc on 3/10/25.
//

#include <loops/cuda/random.cu>
#include <system/type_boilerplate.h>
#include <loops/pairwise_instantiations_single.h>

/*
 * Function Instantiation:
 * RandomFunction::executeCudaSingle instantiated for types in @COMB1@
 * Note: Using @COMB1@ for single type (1-type combinations)
 */

ITERATE_COMBINATIONS_1(
    SD_COMMON_TYPES_@COMB1@,
    INSTANT_PROCESS_COMBINATION_1,
    functions::random::RandomFunction,
    ::executeCudaSingle(
        dim3& launchDims,
        cudaStream_t* stream,
        int opNum,
        sd::Pointer stateHost,
        void* vz,
        sd::LongType const* zShapeBuffer,
        void* vextraArguments);
);

ITERATE_COMBINATIONS_1(
    SD_COMMON_TYPES_@COMB1@,
    INSTANT_PROCESS_COMBINATION_1,
    functions::random::RandomFunction,
    ::executeCudaDouble(
        dim3& launchDims,
        cudaStream_t* stream,
        int opNum,
        sd::Pointer stateHost,
        void const* vx,
        sd::LongType const* xShapeBuffer,
        void* vz,
        sd::LongType const* zShapeBuffer,
        void* vextraArguments);
);

ITERATE_COMBINATIONS_1(
    SD_COMMON_TYPES_@COMB1@,
    INSTANT_PROCESS_COMBINATION_1,
    functions::random::RandomFunction,
    ::executeCudaTriple(
        dim3& launchDims,
        cudaStream_t* stream,
        int opNum,
        sd::Pointer stateHost,
        void const* vx,
        sd::LongType const* xShapeBuffer,
        void const* vy,
        sd::LongType const* yShapeBuffer,
        void* vz,
        sd::LongType const* zShapeBuffer,
        void* vextraArguments);
);
