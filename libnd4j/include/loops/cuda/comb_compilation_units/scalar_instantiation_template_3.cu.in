/* ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

//
// Created by agibsonccc on 3/10/25.
//

#include <loops/cuda/scalar.chpp>
#include <system/type_boilerplate.h>
#include <loops/pairwise_instantiations_single.h>

/*
 * Function Instantiation:
 * ScalarTransform::executeCudaShaped instantiated for types in @COMB1@, @COMB2@, @COMB3@
 */

ITERATE_COMBINATIONS_3(
    SD_COMMON_TYPES_PART_@COMB1@,
    SD_COMMON_TYPES_PART_@COMB2@,
    SD_COMMON_TYPES_PART_@COMB3@,
    INSTANT_PROCESS_COMBINATION_3,
    functions::scalar::ScalarTransform,
    ::executeCudaShaped(
        dim3& launchDims,
        cudaStream_t* stream,
        int opNum,
        const void *vx,
        const sd::LongType *xShapeInfo,
        const sd::LongType *hxShapeInfo,
        void *vz,
        const sd::LongType *zShapeInfo,
        const sd::LongType *hzShapeInfo,
        const void *vscalar,
        void *vextraParams);
);

ITERATE_COMBINATIONS_3(
    SD_COMMON_TYPES_PART_@COMB1@,
    SD_COMMON_TYPES_PART_@COMB2@,
    SD_COMMON_TYPES_PART_@COMB3@,
    INSTANT_PROCESS_COMBINATION_3,
    functions::scalar::ScalarTransform,
    ::executeCudaAlongDimension(
        dim3& launchDims,
        cudaStream_t* stream,
        int opNum,
        const void *vx,
        const sd::LongType *xShapeInfo,
        void *vz,
        const sd::LongType *zShapeInfo,
        const void *vscalars,
        void *vextraParams,
        sd::LongType *dimension,
        sd::LongType dimensionLength,
        const sd::LongType *tadShapeInfo,
        const sd::LongType *tadOffsets,
        const sd::LongType *tadShapeInfoZ,
        const sd::LongType *tadOffsetsZ);
);
