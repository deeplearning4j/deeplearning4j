on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 2

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: ossrh

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:

      runsOn:
        description: 'System to run on'
        required: false
        default: ubuntu-22.04-arm

      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  linux-arm:
    strategy:
      fail-fast: false
      matrix:
        architecture: [arm32, arm64]
        helper: [armcompute, ""]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
            experimental: true
            name: Extra maven flags
          - debug_enabled: ${{ github.event.inputs.debug_enabled }}
            experimental: true
            name: Debug enabled
          - runs_on: ${{ github.event.inputs.runsOn }}
            experimental: true
            name: OS to run on
          - libnd4j_file_download: ${{ github.event.inputs.libnd4jUrl }}
            experimental: true
            name: OS to run on
          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
            experimental: true
            name: Whether to deploy to release staging or not
          - release_version: ${{ github.event.inputs.releaseVersion }}
            experimental: true
            name: Release version
          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
            experimental: true
            name: Snapshot version
          - server_id: ${{ github.event.inputs.serverId }}
            experimental: true
            name: Server id
          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
            experimental: true
            name: The release repository to run on
          - mvn_flags: ${{ github.event.inputs.mvnFlags }}
            experimental: true
            name: Extra maven flags to use as part of the build
          - build_threads: ${{ github.event.inputs.buildThreads }}
            experimental: true
            name: The number of threads to build libnd4j with
    runs-on: ${{ matrix.runs_on }}
    steps:
      - uses: AutoModality/action-clean@v1
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v2
      - uses: ./.github/actions/set-linux-distro-version
      - name: Set mvn build command based on matrix
        shell: bash
        run: |
          # Set library classifier based on the architecture
          if [ "${{ matrix.architecture }}" == "arm32" ]; then
            LIBND4J_CLASSIFIER="linux-armhf"
            OPENBLAS_JAR="openblas-0.3.28-1.5.11-linux-armhf.jar"
          else
            LIBND4J_CLASSIFIER="linux-arm64"
            OPENBLAS_JAR="openblas-0.3.28-1.5.11-linux-arm64.jar"
          fi
          
          echo "LIBND4J_CLASSIFIER=${LIBND4J_CLASSIFIER}" >> $GITHUB_ENV
          echo "OPENBLAS_JAR=${OPENBLAS_JAR}" >> $GITHUB_ENV
          
          if [ "${{ matrix.libnd4j_file_download }}" != '' ]; then
             modules=':nd4j-native,:nd4j-native-preset'
          else 
             echo "Building libnd4j from source"
             modules=':nd4j-native,:nd4j-native-preset,:libnd4j'
          fi
          
          command="mvn ${{ matrix.mvn_ext }} -pl $modules -Pcpu -Dlibnd4j.buildthreads=${{ matrix.build_threads }} -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3 -Possrh -DskipTestResourceEnforcement=true -Dmaven.javadoc.failOnError=false -Djavacpp.platform=${LIBND4J_CLASSIFIER} -Pcpu --also-make --batch-mode deploy -DskipTests"
          
          if [ "${{ matrix.helper }}" != '' ]; then
             mvn_ext=" -Dlibnd4j.helper=${{ matrix.helper }} -Djavacpp.platform.extension=-${{ matrix.helper }} -Dlibnd4j.classifier=${LIBND4J_CLASSIFIER}-${{ matrix.helper }}"
          else
             mvn_ext=""
          fi
          
          command="${command} ${mvn_ext}"
          echo "Setting command for architecture ${{ matrix.architecture }} and helper ${{ matrix.helper }} to ${command}"
          echo "COMMAND=${command}" >> $GITHUB_ENV
          
          echo "CURRENT_TARGET=${{ matrix.architecture }}" >> $GITHUB_ENV
          echo "ARMCOMPUTE_TARGET=${{ matrix.architecture == 'arm32' && 'armv7a' || 'arm64-v8a' }}" >> $GITHUB_ENV

      - uses: ./.github/actions/update-deps-linux
      - name: Cache cmake install
        uses: actions/cache@v4
        id: cache-cmake
        with:
          path: /opt/cmake
          key: ${{ runner.os }}-cmake
          restore-keys: ${{ runner.os }}-cmake
      - name: Cache protobuf install
        uses: actions/cache@v4
        id: cache-protobuf
        with:
          path: /opt/protobuf
          key: ${{ runner.os }}-protobuf
          restore-keys: ${{ runner.os }}-protobuf
      - uses: ./.github/actions/install-protobuf-linux
        if: steps.cache-protobuf.outputs.cache-hit != 'true'
      - uses: ./.github/actions/install-cmake-linux
        if: steps.cache-cmake.outputs.cache-hit != 'true'

      - name: Set up Java for publishing to OSSRH
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven'

      - name: Setup OpenBLAS and ARM Compute Library
        shell: bash
        run: |
          # Setup OpenBLAS
          mkdir -p "${GITHUB_WORKSPACE}/openblas_home"
          cd "${GITHUB_WORKSPACE}/openblas_home"
          wget https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.28-1.5.11/${OPENBLAS_JAR}
          unzip ${OPENBLAS_JAR}
          
          # Determine the correct path based on architecture
          if [ "${{ matrix.architecture }}" == "arm32" ]; then
              OPENBLAS_DIR="${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-armhf"
          else
              OPENBLAS_DIR="${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-arm64"
          fi
          
          echo "OPENBLAS_PATH=${OPENBLAS_DIR}" >> "$GITHUB_ENV"
          cp ${OPENBLAS_DIR}/libopenblas.so.0 ${OPENBLAS_DIR}/libopenblas.so
          
          # Setup ARM Compute Library if selected
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
              mkdir -p "${GITHUB_WORKSPACE}/armcompute_home"
              cd "${GITHUB_WORKSPACE}/armcompute_home"
          
              # Download appropriate ARM Compute Library binary based on architecture
              if [ "${{ matrix.architecture }}" == "arm32" ]; then
                  wget https://github.com/ARM-software/ComputeLibrary/releases/download/v25.04/arm_compute-v25.04-linux-armv7a-cpu-bin.tar.gz
                  tar -xzf arm_compute-v25.04-linux-armv7a-cpu-bin.tar.gz
              else
                  wget https://github.com/ARM-software/ComputeLibrary/releases/download/v25.04/arm_compute-v25.04-linux-aarch64-cpu-bin.tar.gz
                  tar -xzf arm_compute-v25.04-linux-aarch64-cpu-bin.tar.gz
              fi
          
              echo "ARMCOMPUTE_ROOT=${GITHUB_WORKSPACE}/armcompute_home" >> "$GITHUB_ENV"
          fi

      - name: Debug Info
        shell: bash
        run: |
          echo "libnd4j build threads ${{ matrix.build_threads }}"
          echo "deploy to release staging repo or not ${{ matrix.deploy_to_release_staging }}"
          echo "release version ${{ matrix.release_version }}"
          echo "snapshot version ${{ matrix.snapshot_version }}"
          echo "debug enabled ${{ matrix.debug_enabled }}"
          echo "libnd4j url ${{ matrix.libnd4j_file_download }}"
          echo "maven flags ${{ matrix.mvn_flags }}"
          echo "server id ${{ matrix.server_id }}"
          echo "release repo id ${{ matrix.release_repo_id }}"
          echo "architecture ${{ matrix.architecture }}"
          echo "helper ${{ matrix.helper }}"
          echo "ARMCOMPUTE_TARGET $ARMCOMPUTE_TARGET"
          echo "LIBND4J_CLASSIFIER $LIBND4J_CLASSIFIER"

      - name: Build with Maven
        shell: bash
        env:
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          DEBIAN_FRONTEND: noninteractive
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_TO: ossrh
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          PERFORM_RELEASE: ${{ matrix.deploy_to_release_staging }}
          RELEASE_VERSION: ${{ matrix.release_version }}
          SNAPSHOT_VERSION: ${{ matrix.snapshot_version }}
          RELEASE_REPO_ID: ${{ matrix.release_repo_id }}
          MODULES: ${{ matrix.mvn_flags }}
          HELPER: ${{ matrix.helper }}
          MAVEN_OPTS: -Xmx2g
          LIBND4J_FILE_NAME: ${{ matrix.libnd4j_file_download }}
          PATH: /opt/protobuf/bin:/opt/cmake/bin:$PATH
          LD_LIBRARY_PATH: $LD_LIBRARY_PATH:$OPENBLAS_PATH

        run: |
          mvn --version
          cmake --version
          protoc --version
          
          # download libnd4j from a url and set it up if LIBND4J_URL is defined
          bash ./bootstrap-libnd4j-from-url.sh linux ${{ matrix.architecture }} "${{ matrix.helper }}"
          
          if [ "$PERFORM_RELEASE" == 1 ]; then
              bash ${GITHUB_WORKSPACE}/release-specified-component.sh "${RELEASE_VERSION}" "${SNAPSHOT_VERSION}" "${RELEASE_REPO_ID}" "${COMMAND}"
          else
              echo "Running build and deploying to snapshots"
              eval "${COMMAND}"
          fi