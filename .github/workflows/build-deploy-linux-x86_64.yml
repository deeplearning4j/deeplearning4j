name: Build with Troubleshooting
on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 2

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: ossrh

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:


      runsOn:
        description: 'System to run on'
        required: false
        default: ubuntu-22.04

      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
jobs:
  #Note: no -pl here because we publish everything from this branch and use this as the basis for all uploads.
  linux-x86_64:
    strategy:
      fail-fast: false
      matrix:
        helper: [onednn,""]
        extension: [avx2,avx512,""]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
            experimental: true
            name: Extra maven flags
          - debug_enabled: ${{ github.event.inputs.debug_enabled }}
            experimental: true
            name: Debug enabled

          - runs_on: ${{ github.event.inputs.runsOn }}
            experimental: true
            name: OS to run on

          - libnd4j_file_download: ${{ github.event.inputs.libnd4jUrl }}
            experimental: true
            name: OS to run on

          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
            experimental: true
            name: Whether to deploy to release staging or not

          - release_version: ${{ github.event.inputs.releaseVersion }}
            experimental: true
            name: Release version

          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
            experimental: true
            name: Snapshot version

          - server_id: ${{ github.event.inputs.serverId }}
            experimental: true
            name: Server id

          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
            experimental: true
            name: The release repository to run on

          - mvn_flags: ${{ github.event.inputs.mvnFlags }}
            experimental: true
            name: Extra maven flags to use as part of the build

          - build_threads: ${{ github.event.inputs.buildThreads }}
            experimental: true
            name: The number of threads to build libnd4j with

    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v2

      - name: Initial Project Structure Check
        shell: bash
        run: |
          echo "====== CHECKING PROJECT STRUCTURE BEFORE BUILD ======"
          echo "Working directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "libnd4j directory contents:"
          ls -la libnd4j || echo "libnd4j directory doesn't exist yet"
          
          if [ -d "libnd4j/include/legacy" ]; then
            echo "libnd4j/include/legacy contents:"
            ls -la libnd4j/include/legacy/
            if [ -f "libnd4j/include/legacy/NativeOps.h" ]; then
              echo "NativeOps.h exists before build"
            else
              echo "NativeOps.h does not exist yet (expected)"
            fi
          else
            echo "libnd4j/include/legacy directory doesn't exist yet (expected)"
          fi

      - uses: ./.github/actions/set-linux-distro-version

      - name: Set mvn build command based on matrix
        shell: bash
        run: |
          if  [  "${{ matrix.libnd4j_file_download }}" != '' ]; then
             modules=':nd4j-native,:nd4j-native-preset'
          else 
           echo "Building libnd4j from source"
           modules=':nd4j-native,:nd4j-native-preset,:libnd4j'
          fi
          command="mvn  ${{ matrix.mvn_ext }} -pl $modules -Pcpu -Dlibnd4j.buildthreads=${{ matrix.build_threads }} -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3   -Possrh  -DskipTestResourceEnforcement=true  -Dmaven.javadoc.failOnError=false -Djavacpp.platform=linux-x86_64  -Pcpu  --also-make  --batch-mode deploy -DskipTests"
          if [ "${{ matrix.helper }}" != '' ] && [ "${{ matrix.extension }}" != '' ]; then
                 mvn_ext=" -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.helper }}-${{ matrix.extension }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.helper }}-${{matrix.extension}}"
          elif [ "${{ matrix.helper }}" != '' ]; then
                 mvn_ext=" -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.helper }} -Djavacpp.platform.extension=-${{ matrix.helper }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.helper }}"
          elif [ "${{ matrix.extension }}" != '' ]; then
                 mvn_ext=" -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.extension }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.extension }}"
           else
               mvn_ext=""
          fi
          if  [  "${{ matrix.libnd4j_file_download }}" != '' ]; then
             echo "Adding libnd4j download"
          fi
          command="${command} ${mvn_ext}"
          echo "Setting command for helper ${{ matrix.helper }} and extension ${{ matrix.extension }} to ${command}"
          echo "COMMAND=${command}" >> $GITHUB_ENV

      - uses: ./.github/actions/update-deps-linux

      - name: Cache cmake install
        uses: actions/cache@v4
        id: cache-cmake
        with:
          path: /opt/cmake
          key: ${{ runner.os }}-cmake
          restore-keys: ${{ runner.os }}-cmake

      - name: Cache protobuf install
        uses: actions/cache@v4
        id: cache-protobuf
        with:
          path: /opt/protobuf
          key: ${{ runner.os }}-protobuf
          restore-keys: ${{ runner.os }}-protobuf

      - uses: ./.github/actions/install-protobuf-linux
        if: steps.cache-protobuf.outputs.cache-hit != 'true'

      - uses: ./.github/actions/install-cmake-linux
        if: steps.cache-cmake.outputs.cache-hit != 'true'

      - name: Set up Java for publishing to GitHub Packages
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id:  ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven'

      - name: Setup libnd4j home if a download url is specified
        shell: bash
        run: |
          mkdir "${GITHUB_WORKSPACE}/openblas_home"
          cd "${GITHUB_WORKSPACE}/openblas_home"
          wget https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.28-1.5.11/openblas-0.3.28-1.5.11-linux-x86_64.jar
          unzip openblas-0.3.28-1.5.11-linux-x86_64.jar
          cd ..
          echo "OPENBLAS_PATH=${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-x86_64" >> "$GITHUB_ENV"
          cp ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0  ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-x86_64/libopenblas.so
        if: ${{ github.event.inputs.libnd4jUrl != '' }}

      - name: Check libnd4j structure before build
        shell: bash
        run: |
          if [ -d "libnd4j" ]; then
            echo "Checking libnd4j directory structure before build"
            find libnd4j -type d -name "include" | xargs ls -la || echo "No include directory found"
            find libnd4j -type d -name "legacy" | xargs ls -la || echo "No legacy directory found"
            find libnd4j -name "NativeOps.h" || echo "NativeOps.h not found yet (expected)"
          
            # Check for blasbuild directory (shouldn't exist yet but check anyway)
            if [ -d "libnd4j/blasbuild" ]; then
              echo "WARNING: blasbuild directory already exists before build"
              ls -la libnd4j/blasbuild
            else
              echo "blasbuild directory does not exist yet (expected)"
            fi
          else
            echo "libnd4j directory not found before build"
          fi

      - name: Build on linux-x86_64
        shell: bash
        env:
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          DEBIAN_FRONTEND: noninteractive
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_TO: ossrh
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          PERFORM_RELEASE: ${{ matrix.deploy_to_release_staging }}
          RELEASE_VERSION: ${{ matrix.release_version }}
          SNAPSHOT_VERSION: ${{ matrix.snapshot_version }}
          RELEASE_REPO_ID: ${{ matrix.release_repo_id }}
          MODULES: ${{ matrix.mvn_flags }}
          HELPER: ${{ matrix.helper }}
          EXTENSION: ${{ matrix.extension }}
          MAVEN_OPTS: -Xmx2g
          LIBND4J_FILE_NAME: ${{ matrix.libnd4j_file_download }}
        run: |
          echo "libnd4j build threads ${{ matrix.build_threads }}"
          echo "deploy to release staging repo or not ${{ matrix.deploy_to_release_staging }}"
          echo "release version ${{ matrix.release_version }}"
          echo "snapshot version ${{ matrix.snapshot_version }}"
          echo "debug enabled ${{ matrix.debug_enabled }}"
          echo "libnd4j url ${{ matrix.libnd4j_file_download }}"
          echo "maven flags ${{ matrix.mvn_flags }}"
          echo "snapshot version ${{ matrix.snapshot_version }}"
          echo "server id ${{ matrix.server_id }}"
          echo "release repo id ${{ matrix.release_repo_id }}"

          export PATH=/opt/protobuf/bin:/opt/cmake/bin:$PATH
          mvn --version
          cmake --version
          protoc --version
          export PATH=/opt/protobuf/bin:/opt/cmake/bin:$PATH
          export LIBGOMP_PATH=/usr/lib/gcc/x86_64-linux-gnu/5.5.0/libgomp.so
          if [ -z "${EXTENSION}" ] || [ -n "${EXTENSION}" ]; then
              export LIBGOMP_PATH=/usr/lib/gcc/x86_64-linux-gnu/7.5.0/libgomp.so
              echo "Extensions specified. This needs a newer version of gcc."
              sudo apt-get install gcc-7 g++-7
              echo "Using newer version of libgomp."
              ls /usr/bin | grep gcc
              ls /usr/bin | grep g++
              sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 90
              sudo update-alternatives --install  /usr/bin/g++ g++ /usr/bin/g++-7  90
              gcc --version
          fi
          # NOTE: Complete hack. Find better way later. This moves libgomp.so to a directory where javacpp can find it.
          # For linux, this can be found here: https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-backend-impls/nd4j-native-preset/src/main/java/org/nd4j/nativeblas/Nd4jCpuPresets.java#L150
          # Note also, that the g++ --version as of this writing (May 3,2021) currently returns 5.5.0. This will need to be changed in other versions if there is an update.
          sudo cp "${LIBGOMP_PATH}" /usr/lib
          sudo apt-get -y autoremove
          sudo apt-get -y clean
          # download libnd4j from a url and set it up if LIBND4J_URL is defined
          bash ./bootstrap-libnd4j-from-url.sh linux x86_64 "${{ matrix.helper }}" "${{ matrix.extension }}"
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$OPENBLAS_PATH"
          
          # Modify the build to log in more verbose mode for libnd4j
          if [ "$PERFORM_RELEASE" == 1 ]; then
            bash ${GITHUB_WORKSPACE}/release-specified-component.sh "${RELEASE_VERSION}" "${SNAPSHOT_VERSION}" "${RELEASE_REPO_ID}" "${command}"
          else
            echo "Running build and deploying to snapshots with verbose output for libnd4j"
            # If building libnd4j, use debug flags for more verbose output
            if [[ "${COMMAND}" == *":libnd4j"* ]]; then
              # Run just the libnd4j part first with more verbose output
              LIBND4J_CMD=$(echo "${COMMAND}" | sed 's/ deploy / install /' | sed 's/-pl :nd4j-native,:nd4j-native-preset,:libnd4j/-pl :libnd4j/')
              echo "Running libnd4j build with verbose output: ${LIBND4J_CMD}"
              eval "${LIBND4J_CMD} -X"
          
              # Check libnd4j output files after libnd4j build
              echo "===== CHECKING LIBND4J BUILD OUTPUT ====="
              if [ -d "libnd4j/blasbuild" ]; then 
                echo "blasbuild directory exists - checking contents"
                ls -la libnd4j/blasbuild/
                if [ -d "libnd4j/blasbuild/cpu" ]; then
                  echo "cpu directory exists - checking contents"
                  ls -la libnd4j/blasbuild/cpu/
                  if [ -d "libnd4j/blasbuild/cpu/blas" ]; then
                    echo "blas directory exists - checking contents"
                    ls -la libnd4j/blasbuild/cpu/blas/
                  else
                    echo "ERROR: blas directory missing after libnd4j build"
                  fi
                else
                  echo "ERROR: cpu directory missing after libnd4j build"
                fi
              else
                echo "ERROR: blasbuild directory missing after libnd4j build"
              fi
          
              # Check header files after libnd4j build
              if [ -d "libnd4j/include/legacy" ]; then
                echo "Checking legacy directory after libnd4j build"
                ls -la libnd4j/include/legacy/
                if [ -f "libnd4j/include/legacy/NativeOps.h" ]; then
                  echo "SUCCESS: NativeOps.h exists after libnd4j build"
                else
                  echo "ERROR: NativeOps.h does not exist after libnd4j build"
                fi
              else
                echo "ERROR: legacy directory missing after libnd4j build"
              fi
          
              # Now run the rest of the build
              REST_CMD=$(echo "${COMMAND}" | sed 's/-pl :nd4j-native,:nd4j-native-preset,:libnd4j/-pl :nd4j-native,:nd4j-native-preset/')
              echo "Running rest of build: ${REST_CMD}"
              eval "${REST_CMD}"
            else
              # If not building libnd4j, just run the original command
              echo "Running original command: ${COMMAND}"
              eval "${COMMAND}"
            fi
          fi

      - name: Troubleshoot build output
        if: always()
        shell: bash
        run: |
          echo "====== TROUBLESHOOTING BUILD OUTPUT ======"
          
          # Check if include/legacy directory exists
          if [ -d "libnd4j/include/legacy" ]; then
            echo "include/legacy directory exists, checking contents:"
            ls -la libnd4j/include/legacy/
          
            # Check if NativeOps.h exists
            if [ -f "libnd4j/include/legacy/NativeOps.h" ]; then
              echo "NativeOps.h exists. Content sample:"
              head -n 20 libnd4j/include/legacy/NativeOps.h
            else
              echo "ERROR: NativeOps.h is missing!"
            fi
          else
            echo "ERROR: include/legacy directory is missing!"
          fi
          
          # Check if blasbuild directory exists
          if [ -d "libnd4j/blasbuild" ]; then
            echo "blasbuild directory exists, checking contents:"
            ls -la libnd4j/blasbuild/
          
            # Check if cpu directory exists
            if [ -d "libnd4j/blasbuild/cpu" ]; then
              echo "cpu directory exists, checking contents:"
              ls -la libnd4j/blasbuild/cpu/
          
              # Check if blas directory exists
              if [ -d "libnd4j/blasbuild/cpu/blas" ]; then
                echo "blas directory exists, checking contents:"
                ls -la libnd4j/blasbuild/cpu/blas/
          
                # Check for library files
                LIBCOUNT=$(ls -1 libnd4j/blasbuild/cpu/blas/lib*.so 2>/dev/null | wc -l)
                echo "Found $LIBCOUNT library files"
                if [ $LIBCOUNT -gt 0 ]; then
                  ls -la libnd4j/blasbuild/cpu/blas/lib*.so
                else
                  echo "ERROR: No library files found in blas directory!"
                fi
              else
                echo "ERROR: blas directory is missing!"
              fi
            else
              echo "ERROR: cpu directory is missing!"
            fi
          else
            echo "ERROR: blasbuild directory is missing!"
          fi
          
          # Check if target directory exists
          if [ -d "libnd4j/target" ]; then
            echo "target directory exists, checking contents:"
            ls -la libnd4j/target/
          else
            echo "target directory is missing - possibly no packaging occurred!"
          fi
          
          # Check if M2 repository contains the artifacts
          M2_REPO="$HOME/.m2/repository/org/nd4j"
          if [ -d "$M2_REPO" ]; then
            echo "M2 repository contains nd4j artifacts, checking contents:"
            ls -la "$M2_REPO"
          
            if [ -d "$M2_REPO/libnd4j" ]; then
              echo "libnd4j artifacts exist in M2 repository:"
              ls -la "$M2_REPO/libnd4j"
          
              # Check if snapshot version exists
              if [ -d "$M2_REPO/libnd4j/1.0.0-SNAPSHOT" ]; then
                echo "1.0.0-SNAPSHOT version exists:"
                ls -la "$M2_REPO/libnd4j/1.0.0-SNAPSHOT"
              else
                echo "ERROR: 1.0.0-SNAPSHOT version not found in M2 repository!"
              fi
            else
              echo "ERROR: libnd4j artifacts not found in M2 repository!"
            fi
          else
            echo "M2 repository does not contain nd4j artifacts!"
          fi
          
          # Check if nd4j-native-preset pom.xml contains the RequireFilesExist rule
          if [ -f "nd4j/nd4j-backends/nd4j-backend-impls/nd4j-native-preset/pom.xml" ]; then
            echo "Checking pom.xml for RequireFilesExist rule:"
            grep -A 15 "RequireFilesExist" nd4j/nd4j-backends/nd4j-backend-impls/nd4j-native-preset/pom.xml || echo "RequireFilesExist rule not found in pom.xml"
          else
            echo "ERROR: nd4j-native-preset pom.xml not found!"
          fi
          
          # Check symbolic links (if any)
          echo "Checking for symbolic links in relevant directories:"
          find libnd4j/include -type l -exec ls -la {} \; || echo "No symbolic links found in include directory"
          find libnd4j/blasbuild -type l -exec ls -la {} \; 2>/dev/null || echo "No symbolic links found in blasbuild directory"
          
          # Check permissions
          echo "Checking permissions on key directories:"
          ls -la libnd4j/include/legacy/ 2>/dev/null || echo "Cannot check permissions on legacy directory - it doesn't exist"
          ls -la libnd4j/blasbuild/cpu/blas/ 2>/dev/null || echo "Cannot check permissions on blas directory - it doesn't exist"
          
          # Try to find any NativeOps.h files in the workspace
          echo "Searching for any NativeOps.h files in the workspace:"
          find . -name "NativeOps.h" || echo "No NativeOps.h files found in workspace"
          
          # Check if paths are consistent
          echo "Checking for path inconsistencies:"
          EXPECTED_LEGACY_PATH="${PWD}/libnd4j/include/legacy"
          EXPECTED_BLAS_PATH="${PWD}/libnd4j/blasbuild/cpu/blas"
          
          echo "Current working directory: ${PWD}"
          echo "Expected legacy path: ${EXPECTED_LEGACY_PATH}"
          echo "Expected blas path: ${EXPECTED_BLAS_PATH}"
          
          # Print environment variables
          echo "Relevant environment variables:"
          echo "LIBND4J_HOME: ${LIBND4J_HOME}"
          echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"
          echo "JAVACPP_PLATFORM: ${JAVACPP_PLATFORM}"
          
          echo "====== END OF TROUBLESHOOTING ======"