on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 2

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: ossrh

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:


      runsOn:
        description: 'System to run on'
        required: false
        default: ubuntu-22.04

      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
jobs:
  #Note: no -pl here because we publish everything from this branch and use this as the basis for all uploads.
  linux-x86_64:
    strategy:
      fail-fast: false
      matrix:
        helper: [onednn,""]
        extension: [avx2,avx512,""]
        include:
          # --- Using inputs directly now ---
          - runs_on: ${{ github.event.inputs.runsOn }}
            experimental: true # Keep marker for potential filtering if needed
            name: OS to run on
          # --- Other matrix includes based on helper/extension ---

    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v4

      # Check source file - still useful
      - name: Check for NativeOps.h after checkout
        shell: bash
        run: |
          echo ">>> Checking for NativeOps.h in $(pwd)"
          if [ -f "libnd4j/include/legacy/NativeOps.h" ]; then
            echo ">>> FOUND libnd4j/include/legacy/NativeOps.h after checkout."
          else
            echo ">>> ERROR: NativeOps.h NOT FOUND after checkout!"
            # exit 1 # Optional: fail fast
          fi
          echo ">>> End NativeOps.h check"

      - uses: ./.github/actions/set-linux-distro-version

      # This step ONLY sets the Maven command string based on inputs/matrix
      - name: Set mvn build command based on matrix and inputs
        shell: bash
        id: set_command # Give step an ID
        run: |
          assembly_profile="" # Initialize assembly profile flag
          if  [  "${{ github.event.inputs.libnd4jUrl }}" != '' ]; then
             echo "Setting up command to use pre-built libnd4j from URL"
             modules=':nd4j-native,:nd4j-native-preset' # Exclude :libnd4j
          else
             echo "Setting up command to build libnd4j from source"
             # assembly_profile="-Plibnd4j-assembly" # Option: Uncomment to test assembly profile solution if needed
             modules=':nd4j-native,:nd4j-native-preset,:libnd4j' # Include :libnd4j
          fi
          # Base command - Uses inputs directly now for flags/threads etc.
          # Note: matrix.mvn_ext from original example seemed incorrect usage, using input mvnFlags
          base_command="mvn ${assembly_profile} ${{ github.event.inputs.mvnFlags }} -pl $modules -Pcpu -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3 -Possrh -DskipTestResourceEnforcement=true -Dmaven.javadoc.failOnError=false -Djavacpp.platform=linux-x86_64 -Pcpu --also-make --batch-mode deploy -DskipTests"
          # Append matrix-specific extensions (helper/extension)
          if [ "${{ matrix.helper }}" != '' ] && [ "${{ matrix.extension }}" != '' ]; then
                 mvn_ext=" -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.helper }}-${{ matrix.extension }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.helper }}-${{matrix.extension}}"
          elif [ "${{ matrix.helper }}" != '' ]; then
                 mvn_ext=" -Dlibnd4j.helper=${{ matrix.helper }} -Djavacpp.platform.extension=-${{ matrix.helper }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.helper }}"
          elif [ "${{ matrix.extension }}" != '' ]; then
                 mvn_ext=" -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.extension }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.extension }}"
           else
               mvn_ext=""
          fi
          final_command="${base_command} ${mvn_ext}"
          echo "Setting final command for helper ${{ matrix.helper }} and extension ${{ matrix.extension }} to:"
          echo "${final_command}"
          # Escape command for use in later steps if needed directly, or just use output
          # For GITHUB_ENV, value needs careful handling for multiline/quotes
          # Using step outputs is safer
          echo "command_string=${final_command}" >> "$GITHUB_OUTPUT"

      - uses: ./.github/actions/update-deps-linux
      - name: Cache cmake install
        uses: actions/cache@v4
        id: cache-cmake
        with:
          path: /opt/cmake
          key: ${{ runner.os }}-cmake-${{ env.LINUX_DISTRO_VERSION }}
          restore-keys: ${{ runner.os }}-cmake-
      - name: Cache protobuf install
        uses: actions/cache@v4
        id: cache-protobuf
        with:
          path: /opt/protobuf
          key: ${{ runner.os }}-protobuf-${{ env.LINUX_DISTRO_VERSION }}
          restore-keys: ${{ runner.os }}-protobuf-
      - uses: ./.github/actions/install-protobuf-linux
        if: steps.cache-protobuf.outputs.cache-hit != 'true'
      - uses: ./.github/actions/install-cmake-linux
        if: steps.cache-cmake.outputs.cache-hit != 'true'

      - name: Set up Java for publishing
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id:  ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven' # Cache Maven dependencies

      # STEP A: Setup for USING libnd4jUrl (OPTIONAL STEP)
      # This step runs ONLY if libnd4jUrl IS provided.
      # It prepares OpenBLAS and runs the bootstrap script which should set LIBND4J_HOME.
      - name: Setup downloaded libnd4j and OpenBLAS
        if: ${{ github.event.inputs.libnd4jUrl != '' }}
        shell: bash
        run: |
          echo ">>> Setting up downloaded libnd4j from URL: ${{ github.event.inputs.libnd4jUrl }}"
          echo ">>> Preparing OpenBLAS..."
          OPENBLAS_EXTRACT_TARGET="${GITHUB_WORKSPACE}/openblas_extracted_url" # Use distinct name
          mkdir -p "${OPENBLAS_EXTRACT_TARGET}"
          cd "${OPENBLAS_EXTRACT_TARGET}"
          wget https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.28-1.5.11/openblas-0.3.28-1.5.11-linux-x86_64.jar
          unzip -o openblas-0.3.28-1.5.11-linux-x86_64.jar
          cd .. # Back to GITHUB_WORKSPACE
          OPENBLAS_LIB_PATH="${OPENBLAS_EXTRACT_TARGET}/org/bytedeco/openblas/linux-x86_64"
          
          if [ -d "$OPENBLAS_LIB_PATH" ]; then
              echo "OPENBLAS_PATH=${OPENBLAS_LIB_PATH}" >> $GITHUB_ENV
              echo "OpenBLAS prepared at ${OPENBLAS_LIB_PATH}"
              # Copy .so link if needed
               if [ -f "${OPENBLAS_LIB_PATH}/libopenblas.so.0" ]; then
                  cp "${OPENBLAS_LIB_PATH}/libopenblas.so.0" "${OPENBLAS_LIB_PATH}/libopenblas.so"
                  echo "Copied libopenblas.so link."
              fi
          else
              echo "ERROR: Failed to prepare OpenBLAS from JAR."
              exit 1
          fi
          
          echo ">>> Running bootstrap script..."
          # This script MUST set the LIBND4J_HOME environment variable for the subsequent Maven build
          bash ./bootstrap-libnd4j-from-url.sh linux x86_64 "${{ matrix.helper }}" "${{ matrix.extension }}" || \
             (echo "ERROR: bootstrap-libnd4j-from-url.sh failed!" && exit 1)
          echo ">>> Bootstrap script finished."


      # STEP B: Run the main build command (handles both cases)
      - name: Build Project
        shell: bash
        continue-on-error: true # Allow post-mortem checks
        id: maven_build
        env:
          # Pass GITHUB_ENV vars from previous steps + secrets
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          DEBIAN_FRONTEND: noninteractive
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_TO: ossrh
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
          RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
          SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
          RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
          HELPER: ${{ matrix.helper }} # Make matrix vars available if needed by scripts invoked by Maven
          EXTENSION: ${{ matrix.extension }} # Make matrix vars available
          MAVEN_OPTS: -Xmx2g
          # OPENBLAS_PATH and LIBND4J_HOME will be set in GITHUB_ENV conditionally by previous steps
        run: |
          # Define the error handler (useful if eval fails)
          trap 'echo "--- ERROR TRAP: Listing directories on failure ---"; echo "Working Directory: $(pwd)"; echo "Listing libnd4j root:"; ls -la libnd4j; echo "Listing libnd4j/blasbuild/cpu (if exists):"; ls -la libnd4j/blasbuild/cpu; echo "--- End error trap listing ---"' ERR

          # Export paths for this script environment
          export PATH=/opt/protobuf/bin:/opt/cmake/bin:$PATH
          # OPENBLAS_PATH comes from GITHUB_ENV set in previous steps
          if [ -n "$OPENBLAS_PATH" ]; then
             echo "Using OPENBLAS_PATH from environment: $OPENBLAS_PATH"
             export LD_LIBRARY_PATH="$OPENBLAS_PATH:$LD_LIBRARY_PATH"
             echo "LD_LIBRARY_PATH set to: $LD_LIBRARY_PATH"
          fi

          # Retrieve the command constructed earlier
          MAVEN_COMMAND="${{ steps.set_command.outputs.command_string }}"
          echo "Retrieved Maven command: ${MAVEN_COMMAND}"

          # === Logic Split ===
          if [ "${{ github.event.inputs.libnd4jUrl == '' }}" ]; then
              # --- Build From Source Path ---
              echo ">>> EXECUTING BUILD FROM SOURCE PATH <<<"
              # Ensure OpenBLAS dependency is downloaded FOR THIS PATH
              echo "Ensuring dependencies for libnd4j are downloaded..."
              mvn org.apache.maven.plugins:maven-dependency-plugin:3.7.1:go-offline -pl :libnd4j || \
                 (echo "ERROR: 'mvn dependency:go-offline -pl :libnd4j' failed!" && exit 1)

              # Check if OPENBLAS_PATH was successfully set (it should be if extraction worked)
              # Note: For build-from-source, the build script *should* use OpenBLAS provided by JavaCPP plugin,
              # But setting OPENBLAS_PATH might still be needed if buildnativeoperations.sh relies on it.
              # Let's verify it was found/set correctly by the plugin's action or if we need manual extraction here too.
              # For simplicity, let's assume buildnativeoperations.sh DOES need OPENBLAS_PATH
              if [ -z "$OPENBLAS_PATH" ]; then
                   echo "Attempting to find/extract OpenBLAS for source build..."
                   OPENBLAS_JAR_PATH=$(find /home/runner/.m2/repository/org/bytedeco/openblas/ -maxdepth 5 -name "openblas-*-linux-x86_64.jar" -print -quit)
                   if [ -n "$OPENBLAS_JAR_PATH" ] && [ -f "$OPENBLAS_JAR_PATH" ]; then
                      OPENBLAS_EXTRACT_TARGET="${GITHUB_WORKSPACE}/openblas_extracted_source"
                      mkdir -p "${OPENBLAS_EXTRACT_TARGET}"
                      unzip -o "$OPENBLAS_JAR_PATH" -d "${OPENBLAS_EXTRACT_TARGET}"
                      OPENBLAS_LIB_PATH="${OPENBLAS_EXTRACT_TARGET}/org/bytedeco/openblas/linux-x86_64"
                      if [ -d "$OPENBLAS_LIB_PATH" ]; then
                          export OPENBLAS_PATH="$OPENBLAS_LIB_PATH"
                          echo "Successfully set OPENBLAS_PATH=${OPENBLAS_PATH} for source build."
                          export LD_LIBRARY_PATH="$OPENBLAS_PATH:$LD_LIBRARY_PATH"
                          echo "LD_LIBRARY_PATH set to: $LD_LIBRARY_PATH"
                      else
                          echo "ERROR: Extracted OpenBLAS for source build, but dir not found."
                          exit 1
                      fi
                   else
                      echo "ERROR: Could not find OpenBLAS JAR for source build."
                      exit 1
                   fi
              fi
              # LIBND4J_HOME should NOT be set here, build script works in source dir
          else
              # --- Use Downloaded URL Path ---
              echo ">>> EXECUTING USE DOWNLOADED URL PATH <<<"
              # OPENBLAS_PATH and LIBND4J_HOME MUST be set by the "Setup downloaded libnd4j" step
              if [ -z "$LIBND4J_HOME" ]; then echo "ERROR: LIBND4J_HOME not set from env for URL path!"; exit 1; fi
              if [ -z "$OPENBLAS_PATH" ]; then echo "ERROR: OPENBLAS_PATH not set from env for URL path!"; exit 1; fi
              echo "Using LIBND4J_HOME: $LIBND4J_HOME"
              echo "Using OPENBLAS_PATH: $OPENBLAS_PATH"
              # LD_LIBRARY_PATH already includes OPENBLAS_PATH from start of script block
          fi
          # === End Logic Split ===


          # Tool version checks (can be moved earlier if preferred)
          echo "--- Tool Versions Before Build ---"
          mvn --version
          cmake --version
          protoc --version
          echo "---"

          # Clean apt cache
          sudo apt-get -y autoremove
          sudo apt-get -y clean


          # Execute the final build/release command
          if [ "$PERFORM_RELEASE" == 1 ]; then
            echo "Running release script..."
            chmod +x ${GITHUB_WORKSPACE}/release-specified-component.sh
            # Pass the command string to the release script
            bash ${GITHUB_WORKSPACE}/release-specified-component.sh "${RELEASE_VERSION}" "${SNAPSHOT_VERSION}" "${RELEASE_REPO_ID}" "${MAVEN_COMMAND}"
          else
            echo "Running build and deploying to snapshots using command:"
            echo "${MAVEN_COMMAND}"
            # This eval command should now run with the correct environment set
            eval "${MAVEN_COMMAND}"
          fi

          echo "Maven command execution finished (or did not trigger ERR trap)."

      # STEP C: Post-build checks (always runs)
      - name: Check build outcome and artifacts
        if: always()
        shell: bash
        run: |
          echo ">>> Maven build step outcome: ${{ steps.maven_build.outcome }}"
          echo ">>> --- Checking for files after Maven execution attempt ---"
          echo "Checking for NativeOps.h:"
          ls -l libnd4j/include/legacy/NativeOps.h || echo ">>> NativeOps.h check failed."
          echo "Checking for blasbuild/cpu directory (only expected if built from source):"
          if [ "${{ github.event.inputs.libnd4jUrl == '' }}" ]; then
            ls -ld libnd4j/blasbuild/cpu/ || echo ">>> blasbuild/cpu directory not found (expected for source build)."
            echo "Checking for blasbuild/cpu/blas file/directory:"
            ls -l libnd4j/blasbuild/cpu/blas || echo ">>> blasbuild/cpu/blas not found (expected for source build)."
            echo "Full listing of blasbuild/cpu:"
            ls -lR libnd4j/blasbuild/cpu/ || echo ">>> Cannot list blasbuild/cpu"
          else
            echo ">>> Skipped checking libnd4j/blasbuild/cpu (used URL)."
          fi
          echo ">>> --- End check ---"
          # Force fail the workflow if Maven failed
          if [ "${{ steps.maven_build.outcome }}" == "failure" ]; then
            echo ">>> Maven build failed, failing workflow."
            exit 1
          fi