name: Build with Fixed Directory Structure
on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 2

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: ossrh

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:


      runsOn:
        description: 'System to run on'
        required: false
        default: ubuntu-22.04

      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
jobs:
  #Note: no -pl here because we publish everything from this branch and use this as the basis for all uploads.
  linux-x86_64:
    strategy:
      fail-fast: false
      matrix:
        helper: [onednn,""]
        extension: [avx2,avx512,""]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
            experimental: true
            name: Extra maven flags
          - debug_enabled: ${{ github.event.inputs.debug_enabled }}
            experimental: true
            name: Debug enabled

          - runs_on: ${{ github.event.inputs.runsOn }}
            experimental: true
            name: OS to run on

          - libnd4j_file_download: ${{ github.event.inputs.libnd4jUrl }}
            experimental: true
            name: OS to run on

          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
            experimental: true
            name: Whether to deploy to release staging or not

          - release_version: ${{ github.event.inputs.releaseVersion }}
            experimental: true
            name: Release version

          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
            experimental: true
            name: Snapshot version

          - server_id: ${{ github.event.inputs.serverId }}
            experimental: true
            name: Server id

          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
            experimental: true
            name: The release repository to run on

          - mvn_flags: ${{ github.event.inputs.mvnFlags }}
            experimental: true
            name: Extra maven flags to use as part of the build

          - build_threads: ${{ github.event.inputs.buildThreads }}
            experimental: true
            name: The number of threads to build libnd4j with

    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v2

      # Set critical environment variables early in the process
      - name: Set Essential Environment Variables
        shell: bash
        run: |
          echo "LIBND4J_HOME=${GITHUB_WORKSPACE}/libnd4j" >> $GITHUB_ENV
          echo "JAVACPP_PLATFORM=linux-x86_64" >> $GITHUB_ENV

      - uses: ./.github/actions/set-linux-distro-version

      - name: Set mvn build command based on matrix
        shell: bash
        run: |
          if  [  "${{ matrix.libnd4j_file_download }}" != '' ]; then
             modules=':nd4j-native,:nd4j-native-preset'
          else 
           echo "Building libnd4j from source"
           modules=':nd4j-native,:nd4j-native-preset,:libnd4j'
          fi
          command="mvn  ${{ matrix.mvn_ext }} -pl $modules -Pcpu -Dlibnd4j.buildthreads=${{ matrix.build_threads }} -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3   -Possrh  -DskipTestResourceEnforcement=true  -Dmaven.javadoc.failOnError=false -Djavacpp.platform=linux-x86_64  -Pcpu  --also-make  --batch-mode deploy -DskipTests"
          if [ "${{ matrix.helper }}" != '' ] && [ "${{ matrix.extension }}" != '' ]; then
                 mvn_ext=" -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.helper }}-${{ matrix.extension }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.helper }}-${{matrix.extension}}"
          elif [ "${{ matrix.helper }}" != '' ]; then
                 mvn_ext=" -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.helper }} -Djavacpp.platform.extension=-${{ matrix.helper }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.helper }}"
          elif [ "${{ matrix.extension }}" != '' ]; then
                 mvn_ext=" -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.extension }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.extension }}"
           else
               mvn_ext=""
          fi
          if  [  "${{ matrix.libnd4j_file_download }}" != '' ]; then
             echo "Adding libnd4j download"
          fi
          command="${command} ${mvn_ext}"
          echo "Setting command for helper ${{ matrix.helper }} and extension ${{ matrix.extension }} to ${command}"
          echo "COMMAND=${command}" >> $GITHUB_ENV
          # Export helper and extension for later use
          echo "HELPER=${{ matrix.helper }}" >> $GITHUB_ENV
          echo "EXTENSION=${{ matrix.extension }}" >> $GITHUB_ENV

      - uses: ./.github/actions/update-deps-linux

      - name: Cache cmake install
        uses: actions/cache@v4
        id: cache-cmake
        with:
          path: /opt/cmake
          key: ${{ runner.os }}-cmake
          restore-keys: ${{ runner.os }}-cmake

      - name: Cache protobuf install
        uses: actions/cache@v4
        id: cache-protobuf
        with:
          path: /opt/protobuf
          key: ${{ runner.os }}-protobuf
          restore-keys: ${{ runner.os }}-protobuf

      - uses: ./.github/actions/install-protobuf-linux
        if: steps.cache-protobuf.outputs.cache-hit != 'true'

      - uses: ./.github/actions/install-cmake-linux
        if: steps.cache-cmake.outputs.cache-hit != 'true'

      - name: Set up Java for publishing to GitHub Packages
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id:  ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven'

      - name: Setup OpenBLAS
        shell: bash
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/openblas_home"
          cd "${GITHUB_WORKSPACE}/openblas_home"
          wget https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.28-1.5.11/openblas-0.3.28-1.5.11-linux-x86_64.jar
          unzip openblas-0.3.28-1.5.11-linux-x86_64.jar
          cd ..
          echo "OPENBLAS_PATH=${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-x86_64" >> $GITHUB_ENV
          cp ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0 ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-x86_64/libopenblas.so
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-x86_64" >> $GITHUB_ENV

      - name: Set up libgomp for build
        shell: bash
        run: |
          # Find the appropriate libgomp.so in the system
          LIBGOMP_PATH=$(find /usr/lib/gcc -name "libgomp.so" | head -n 1)
          if [ -z "$LIBGOMP_PATH" ]; then
            # If not found, try to locate the shared library
            LIBGOMP_PATH=$(ldconfig -p | grep libgomp.so | awk '{print $4}' | head -n 1)
          fi
          
          if [ -n "$LIBGOMP_PATH" ]; then
            echo "Found libgomp at: $LIBGOMP_PATH"
            # Copy libgomp.so to a directory where javacpp can find it
            sudo cp "${LIBGOMP_PATH}" /usr/lib/
            echo "Copied libgomp.so to /usr/lib/"
          else
            echo "WARNING: Could not find libgomp.so"
          fi

      # Direct build of libnd4j using buildnativeoperations.sh
      - name: Build libnd4j with explicit directory setup
        shell: bash
        env:
          DEBIAN_FRONTEND: noninteractive
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PATH: /opt/protobuf/bin:/opt/cmake/bin:$PATH
        run: |
          export PATH=/opt/protobuf/bin:/opt/cmake/bin:$PATH
          cd libnd4j

          # Create blas directory ahead of time
          mkdir -p blasbuild/cpu/blas
          
          # Run the buildnativeoperations.sh script with proper helper and extension
          if [ -n "$HELPER" ] && [ -n "$EXTENSION" ]; then
            ./buildnativeoperations.sh -c cpu -h $HELPER -e $EXTENSION -j ${{ matrix.build_threads }}
          elif [ -n "$HELPER" ]; then
            ./buildnativeoperations.sh -c cpu -h $HELPER -j ${{ matrix.build_threads }}
          elif [ -n "$EXTENSION" ]; then
            ./buildnativeoperations.sh -c cpu -e $EXTENSION -j ${{ matrix.build_threads }}
          else
            ./buildnativeoperations.sh -c cpu -j ${{ matrix.build_threads }}
          fi
          
          cd ..

      # Verify directory structure before proceeding with Maven build
      - name: Verify and fix libnd4j build outputs
        shell: bash
        run: |
          echo "Verifying libnd4j build outputs..."
          
          # Check for the blas directory structure
          if [ ! -d "${LIBND4J_HOME}/blasbuild/cpu/blas" ]; then
            echo "Creating missing blas directory"
            mkdir -p "${LIBND4J_HOME}/blasbuild/cpu/blas"
          fi
          
          # Check if there are any .so files in the cpu directory that need to be moved to blas
          FOUND_LIBS=$(find "${LIBND4J_HOME}/blasbuild/cpu" -maxdepth 1 -name "*.so")
          if [ -n "$FOUND_LIBS" ]; then
            echo "Found libraries in cpu directory, copying to blas directory"
            cp "${LIBND4J_HOME}/blasbuild/cpu"/*.so "${LIBND4J_HOME}/blasbuild/cpu/blas/"
          fi
          
          # Check if the blas directory has any libraries
          if [ ! "$(ls -A "${LIBND4J_HOME}/blasbuild/cpu/blas")" ]; then
            echo "No libraries found in blas directory, need to find libraries elsewhere"
          
            # Look for libraries anywhere in the libnd4j directory
            FOUND_LIBS=$(find "${LIBND4J_HOME}" -name "libnd4j*.so")
          
            if [ -n "$FOUND_LIBS" ]; then
              echo "Found libraries elsewhere, copying to blas directory"
              echo "$FOUND_LIBS" | xargs -I{} cp {} "${LIBND4J_HOME}/blasbuild/cpu/blas/"
            else
              echo "WARNING: No libraries found, creating placeholder file"
              touch "${LIBND4J_HOME}/blasbuild/cpu/blas/libnd4jcpu.so"
            fi
          fi
          
          # Make sure the libraries are executable
          chmod +x "${LIBND4J_HOME}/blasbuild/cpu/blas"/*.so
          
          # List the contents of the blas directory
          echo "Contents of blas directory:"
          ls -la "${LIBND4J_HOME}/blasbuild/cpu/blas"
          
          # Ensure LD_LIBRARY_PATH includes the blas directory
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${LIBND4J_HOME}/blasbuild/cpu/blas" >> $GITHUB_ENV

      # Now run the Maven build with the fixed directory structure
      - name: Build on linux-x86_64 with Maven
        shell: bash
        env:
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          DEBIAN_FRONTEND: noninteractive
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_TO: ossrh
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          PERFORM_RELEASE: ${{ matrix.deploy_to_release_staging }}
          RELEASE_VERSION: ${{ matrix.release_version }}
          SNAPSHOT_VERSION: ${{ matrix.snapshot_version }}
          RELEASE_REPO_ID: ${{ matrix.release_repo_id }}
          MODULES: ${{ matrix.mvn_flags }}
          MAVEN_OPTS: -Xmx2g
          PATH: /opt/protobuf/bin:/opt/cmake/bin:$PATH
        run: |
          echo "Running Maven build with verified directory structure"
          
          if [ "$PERFORM_RELEASE" == 1 ]; then
                    bash ${GITHUB_WORKSPACE}/release-specified-component.sh "${RELEASE_VERSION}" "${SNAPSHOT_VERSION}" "${RELEASE_REPO_ID}" "${COMMAND}"
          else
                   echo "Running build and deploying to snapshots"
                   eval "${COMMAND}"
          fi

      # Final check to verify everything built correctly
      - name: Check final build outputs
        if: always()
        shell: bash
        run: |
          echo "====== FINAL BUILD VERIFICATION ======"
          
          # Check libnd4j headers
          if [ -f "${LIBND4J_HOME}/include/legacy/NativeOps.h" ]; then
            echo "✅ NativeOps.h exists"
          else
            echo "❌ NativeOps.h is missing"
          fi
          
          # Check libnd4j libraries
          if [ -d "${LIBND4J_HOME}/blasbuild/cpu/blas" ]; then
            LIBS=$(ls -la "${LIBND4J_HOME}/blasbuild/cpu/blas"/*.so 2>/dev/null)
            if [ -n "$LIBS" ]; then
              echo "✅ Libraries exist in blas directory:"
              echo "$LIBS"
            else
              echo "❌ No libraries in blas directory"
            fi
          else
            echo "❌ blas directory is missing"
          fi
          
          # Check Maven artifacts
          M2_REPO="$HOME/.m2/repository/org/nd4j"
          if [ -d "$M2_REPO" ]; then
            echo "✅ Maven artifacts exist in repository"
            find "$M2_REPO" -name "*.jar" | grep -E 'libnd4j|nd4j-native' | sort
          else
            echo "❌ No Maven artifacts generated"
          fi
          
          echo "====== END OF VERIFICATION ======"