# STEP B: Run the main build command (handles both cases)
- name: Build Project
  shell: bash
  continue-on-error: true # Allow post-mortem checks
  id: maven_build
  env:
    # Pass GITHUB_ENV vars from previous steps + secrets
    MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
    DEBIAN_FRONTEND: noninteractive
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    PUBLISH_TO: ossrh
    MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
    MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
    MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
    PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
    RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
    SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
    RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
    HELPER: ${{ matrix.helper }} # Make matrix vars available if needed by scripts invoked by Maven
    EXTENSION: ${{ matrix.extension }} # Make matrix vars available
    MAVEN_OPTS: -Xmx2g
    # OPENBLAS_PATH and LIBND4J_HOME will be set in GITHUB_ENV conditionally by previous steps
  run: |
    # Define the error handler: This runs ONLY IF a subsequent command in this block fails
    # Removed the attempt to ls the non-existent blasbuild/cpu directory
    trap 'echo "--- ERROR TRAP: An error occurred during Maven command execution! ---"; echo "Working Directory: $(pwd)"; echo "Listing libnd4j root directory content:"; ls -la libnd4j; echo "--- End error trap listing ---"' ERR
    
    # Export paths for this script environment
    export PATH=/opt/protobuf/bin:/opt/cmake/bin:$PATH
    # OPENBLAS_PATH comes from GITHUB_ENV set in previous steps
    if [ -n "$OPENBLAS_PATH" ]; then
       echo "Using OPENBLAS_PATH from environment: $OPENBLAS_PATH"
       export LD_LIBRARY_PATH="$OPENBLAS_PATH:$LD_LIBRARY_PATH"
       echo "LD_LIBRARY_PATH set to: $LD_LIBRARY_PATH"
    fi
    
    # Retrieve the command constructed earlier
    MAVEN_COMMAND="${{ steps.set_command.outputs.command_string }}"
    echo "Retrieved Maven command: ${MAVEN_COMMAND}"
    
    # === Logic Split ===
    if [ "${{ github.event.inputs.libnd4jUrl == '' }}" ]; then
        # --- Build From Source Path ---
        echo ">>> EXECUTING BUILD FROM SOURCE PATH <<<"
        # Ensure OpenBLAS dependency is downloaded FOR THIS PATH
        echo "Ensuring dependencies for libnd4j are downloaded..."
        # Increased verbosity and error checking for dependency download
        mvn -B org.apache.maven.plugins:maven-dependency-plugin:3.7.1:go-offline -pl :libnd4j || \
           (echo "ERROR: 'mvn dependency:go-offline -pl :libnd4j' failed!" && exit 1)
        echo "Dependency resolution attempt finished."
    
        # Check/Set OPENBLAS_PATH if building from source and it wasn't set globally
        # It's crucial for buildnativeoperations.sh if it relies on this env var
        if [ -z "$OPENBLAS_PATH" ]; then
             echo "Attempting to find/extract OpenBLAS for source build..."
             # Use a more reliable find in the known Maven cache location
             OPENBLAS_JAR_PATH=$(find "/home/runner/.m2/repository/org/bytedeco/openblas/" -maxdepth 5 -name "openblas-*-linux-x86_64.jar" -print -quit || echo "")
             if [ -n "$OPENBLAS_JAR_PATH" ] && [ -f "$OPENBLAS_JAR_PATH" ]; then
                OPENBLAS_EXTRACT_TARGET="${GITHUB_WORKSPACE}/openblas_extracted_source"
                mkdir -p "${OPENBLAS_EXTRACT_TARGET}"
                echo "Extracting OpenBLAS JAR: $OPENBLAS_JAR_PATH"
                unzip -o "$OPENBLAS_JAR_PATH" -d "${OPENBLAS_EXTRACT_TARGET}"
                OPENBLAS_LIB_PATH="${OPENBLAS_EXTRACT_TARGET}/org/bytedeco/openblas/linux-x86_64"
                if [ -d "$OPENBLAS_LIB_PATH" ]; then
                    export OPENBLAS_PATH="$OPENBLAS_LIB_PATH"
                    echo "Successfully set OPENBLAS_PATH=${OPENBLAS_PATH} for source build."
                    # Export for subsequent processes & update LD_LIBRARY_PATH here
                    export LD_LIBRARY_PATH="$OPENBLAS_PATH:$LD_LIBRARY_PATH"
                    echo "LD_LIBRARY_PATH updated to: $LD_LIBRARY_PATH"
                    # Also add to GITHUB_ENV if other *steps* need it, though maybe not needed now
                    # echo "OPENBLAS_PATH=${OPENBLAS_PATH}" >> $GITHUB_ENV
                else
                    echo "ERROR: Extracted OpenBLAS for source build, but dir not found at ${OPENBLAS_LIB_PATH}"
                    exit 1
                fi
             else
                echo "ERROR: Could not find OpenBLAS JAR for source build in /home/runner/.m2/repository/org/bytedeco/openblas/."
                echo "Listing contents of /home/runner/.m2/repository/org/bytedeco/:"
                ls -lR /home/runner/.m2/repository/org/bytedeco/ || echo "Could not list bytedeco cache."
                exit 1 # Fail decisively if OpenBLAS isn't found for source build
             fi
        fi
        # LIBND4J_HOME should NOT be set here, build script works in source dir
    else
        # --- Use Downloaded URL Path ---
        echo ">>> EXECUTING USE DOWNLOADED URL PATH <<<"
        # OPENBLAS_PATH and LIBND4J_HOME MUST be set by the "Setup downloaded libnd4j" step
        if [ -z "$LIBND4J_HOME" ]; then echo "ERROR: LIBND4J_HOME not set from env for URL path!"; exit 1; fi
        if [ -z "$OPENBLAS_PATH" ]; then echo "ERROR: OPENBLAS_PATH not set from env for URL path!"; exit 1; fi
        echo "Using LIBND4J_HOME: $LIBND4J_HOME"
        echo "Using OPENBLAS_PATH: $OPENBLAS_PATH"
        # LD_LIBRARY_PATH already includes OPENBLAS_PATH from start of script block
    fi
    # === End Logic Split ===
    
    
    # Tool version checks (can be moved earlier if preferred)
    echo "--- Tool Versions Before Build ---"
    mvn --version
    cmake --version
    protoc --version
    echo "---"
    
    # Clean apt cache (can be moved earlier)
    # sudo apt-get -y autoremove
    # sudo apt-get -y clean
    
    
    # Execute the final build/release command
    if [ "$PERFORM_RELEASE" == 1 ]; then
      echo "Running release script..."
      chmod +x ${GITHUB_WORKSPACE}/release-specified-component.sh
      # Pass the command string to the release script
      bash ${GITHUB_WORKSPACE}/release-specified-component.sh "${RELEASE_VERSION}" "${SNAPSHOT_VERSION}" "${RELEASE_REPO_ID}" "${MAVEN_COMMAND}"
    else
      echo "Running build and deploying to snapshots using command:"
      echo "${MAVEN_COMMAND}"
      # This eval command should now run with the correct environment set
      # If it fails, the trap defined above will execute.
      eval "${MAVEN_COMMAND}"
    fi
    
    echo "Maven command execution finished (or did not trigger ERR trap)."