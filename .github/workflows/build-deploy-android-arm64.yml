on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 2

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: central

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:

      runsOn:
        description: 'System to run on'
        required: false
        default: ubuntu-22.04-arm

      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  android-arm64:
    strategy:
      fail-fast: false
      matrix:
        helper: [armcompute, ""]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
          - debug_enabled: ${{ github.event.inputs.debug_enabled }}
          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
          - release_version: ${{ github.event.inputs.releaseVersion }}
          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
          - server_id: ${{ github.event.inputs.serverId }}
          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
          - build_threads: ${{ github.event.inputs.buildThreads }}
    runs-on: ${{ github.event.inputs.runsOn }}
    steps:
      - name: Clean workspace
        uses: AutoModality/action-clean@v1

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Configure swap space
        shell: bash
        run: |
          echo "Setting up 4GB swap file..."
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo sysctl vm.swappiness=20
          echo "Swap configuration complete:"
          free -h

      - name: Cache protobuf install
        uses: actions/cache@v4
        id: cache-protobuf-arm
        with:
          path: /opt/protobuf
          key: ${{ runner.os }}-protobuf-arm-v1

      - name: Install protobuf
        uses: ./.github/actions/install-protobuf-linux
        if: steps.cache-protobuf-arm.outputs.cache-hit != 'true'

      - name: Cache CMake install
        uses: actions/cache@v4
        id: cache-cmake
        with:
          path: /opt/cmake
          key: ${{ runner.os }}-cmake-v1

      - name: Install CMake
        uses: ./.github/actions/install-cmake-linux
        if: steps.cache-cmake.outputs.cache-hit != 'true'

      - name: Set up Java for publishing
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id: ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven'

      - name: Cache ARM64 Android NDK
        uses: actions/cache@v4
        id: cache-arm64-ndk
        with:
          path: ${{ github.workspace }}/android-ndk-r27b
          key: android-ndk-r27b-aarch64-${{ runner.os }}-v2

      - name: Setup Android NDK
        id: setup-ndk
        shell: bash
        run: |
          NDK_VERSION="r27b"
          NDK_DIR="${GITHUB_WORKSPACE}/android-ndk-${NDK_VERSION}"
          
          # Install required dependencies for ARM64 NDK
          echo "Installing ARM64 NDK dependencies..."
          sudo apt-get update -qq
          sudo apt-get install -y libc6-dev libstdc++6 libgcc-s1 zlib1g-dev
          
          if [ ! -d "${NDK_DIR}" ]; then
            echo "Downloading ARM64 Android NDK ${NDK_VERSION}..."
            wget -q "https://github.com/lzhiyong/termux-ndk/releases/download/android-ndk/android-ndk-r27b-aarch64.zip" -O ndk.zip
            unzip -q ndk.zip -d "${GITHUB_WORKSPACE}"
            rm ndk.zip
            echo "NDK downloaded and extracted successfully"
          else
            echo "Using cached NDK at ${NDK_DIR}"
          fi
          
          # Set NDK environment variables
          echo "ndk-path=${NDK_DIR}" >> $GITHUB_OUTPUT
          echo "ANDROID_NDK_ROOT=${NDK_DIR}" >> $GITHUB_ENV
          echo "ANDROID_NDK=${NDK_DIR}" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=${NDK_DIR}" >> $GITHUB_ENV
          echo "ANDROID_VERSION=21" >> $GITHUB_ENV
          
          # Use ARM64 native prebuilt directory
          PREBUILT_DIR="${NDK_DIR}/toolchains/llvm/prebuilt/linux-aarch64"
          
          if [ ! -d "${PREBUILT_DIR}" ]; then
            echo "ERROR: ARM64 prebuilt directory not found: ${PREBUILT_DIR}"
            echo "Available directories:"
            ls -la "${NDK_DIR}/toolchains/llvm/prebuilt/" || true
            exit 1
          fi
          
          echo "Using ARM64 native prebuilt directory: ${PREBUILT_DIR}"
          
          # Debug: Check what's actually in the bin directory
          echo "=== Checking NDK bin directory contents ==="
          ls -la "${PREBUILT_DIR}/bin/" | head -20
          echo ""
          
          # Look for the actual clang binary
          echo "=== Searching for clang binaries ==="
          find "${PREBUILT_DIR}/bin/" -name "*clang*" -type f | head -10
          echo ""
          
          # Check if the wrapper script exists and what it contains
          CLANG_WRAPPER="${PREBUILT_DIR}/bin/aarch64-linux-android21-clang"
          if [ -f "${CLANG_WRAPPER}" ]; then
            echo "=== Clang wrapper script contents ==="
            cat "${CLANG_WRAPPER}"
            echo ""
          fi
          
          # Find the actual clang binary
          CLANG_C=""
          CLANG_CXX=""
          
          # Try to find clang binary directly
          if [ -f "${PREBUILT_DIR}/bin/clang" ]; then
            CLANG_C="${PREBUILT_DIR}/bin/clang"
            CLANG_CXX="${PREBUILT_DIR}/bin/clang++"
            echo "Found direct clang binaries"
          elif [ -f "${PREBUILT_DIR}/bin/clang-18" ]; then
            CLANG_C="${PREBUILT_DIR}/bin/clang-18"
            CLANG_CXX="${PREBUILT_DIR}/bin/clang++-18"
            echo "Found versioned clang binaries"
          else
            # Look for any clang binary
            CLANG_BINARY=$(find "${PREBUILT_DIR}/bin/" -name "clang*" -type f -executable | grep -v "++" | head -1)
            if [ -n "${CLANG_BINARY}" ]; then
              CLANG_C="${CLANG_BINARY}"
              CLANG_CXX="${CLANG_BINARY}++"
              echo "Found clang binary: ${CLANG_BINARY}"
            fi
          fi
          
          if [ -z "${CLANG_C}" ] || [ ! -f "${CLANG_C}" ]; then
            echo "ERROR: No working clang binary found"
            echo "Available executables in bin:"
            ls -la "${PREBUILT_DIR}/bin/" | grep "^-rwx"
            exit 1
          fi
          
          # Make sure they're executable
          chmod +x "${CLANG_C}" "${CLANG_CXX}" 2>/dev/null || true
          
          # Test the actual clang binary
          echo "=== Testing clang binary directly ==="
          echo "Testing: ${CLANG_C}"
          if "${CLANG_C}" --version >/dev/null 2>&1; then
            echo "✓ Direct clang binary working"
            "${CLANG_C}" --version | head -1
          else
            echo "✗ Direct clang binary failed:"
            "${CLANG_C}" --version 2>&1 || true
            echo "Dependencies:"
            ldd "${CLANG_C}" 2>&1 || true
            exit 1
          fi
          
          # Create wrapper scripts that work
          echo "=== Creating working wrapper scripts ==="
          WRAPPER_C="${PREBUILT_DIR}/bin/aarch64-linux-android21-clang-fixed"
          WRAPPER_CXX="${PREBUILT_DIR}/bin/aarch64-linux-android21-clang++-fixed"
          
          # Create C wrapper
          cat > "${WRAPPER_C}" << EOF
          #!/bin/bash
          exec "${CLANG_C}" -target aarch64-linux-android21 --sysroot="${PREBUILT_DIR}/sysroot" "\$@"
          EOF
          
          # Create C++ wrapper
          cat > "${WRAPPER_CXX}" << EOF
          #!/bin/bash
          exec "${CLANG_CXX}" -target aarch64-linux-android21 --sysroot="${PREBUILT_DIR}/sysroot" "\$@"
          EOF
          
          chmod +x "${WRAPPER_C}" "${WRAPPER_CXX}"
          
          # Test our wrapper scripts
          echo "=== Testing wrapper scripts ==="
          if "${WRAPPER_C}" --version >/dev/null 2>&1; then
            echo "✓ C wrapper working"
            CLANG_C="${WRAPPER_C}"
          else
            echo "✗ C wrapper failed, using direct binary"
          fi
          
          if "${WRAPPER_CXX}" --version >/dev/null 2>&1; then
            echo "✓ C++ wrapper working"
            CLANG_CXX="${WRAPPER_CXX}"
          else
            echo "✗ C++ wrapper failed, using direct binary"
          fi
          
          # Create compatibility directory structure
          EXPECTED_DIR="${NDK_DIR}/platforms/android-21/arch-arm64"
          if [ ! -d "${EXPECTED_DIR}" ]; then
            echo "Creating compatibility directory structure..."
            mkdir -p "${EXPECTED_DIR}"
            SYSROOT="${PREBUILT_DIR}/sysroot"
            if [ -d "${SYSROOT}" ]; then
              ln -sf "${SYSROOT}/usr" "${EXPECTED_DIR}/usr"
              echo "Created symlink from ${SYSROOT}/usr to ${EXPECTED_DIR}/usr"
            fi
          fi
          
          # Export environment variables
          echo "CC=${CLANG_C}" >> $GITHUB_ENV
          echo "CXX=${CLANG_CXX}" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=${NDK_DIR}/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV
          echo "ANDROID_ABI=arm64-v8a" >> $GITHUB_ENV
          echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
          echo "ANDROID_NDK=${NDK_DIR}" >> $GITHUB_ENV
          echo "CMAKE_C_COMPILER=${CLANG_C}" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER=${CLANG_CXX}" >> $GITHUB_ENV
          
          echo "=== ARM64 native NDK setup complete ==="
          echo "  CC: ${CLANG_C}"
          echo "  CXX: ${CLANG_CXX}"
          echo "  NDK: ${NDK_DIR}"
          echo "  Prebuilt: ${PREBUILT_DIR}"
          echo "  Running natively on: $(uname -m)"
          echo "  Clang version: $(${CLANG_C} --version | head -1)"

      - name: Setup OpenBLAS
        shell: bash
        run: |
          echo "Setting up OpenBLAS for Android ARM64..."
          OPENBLAS_JAR="openblas-0.3.19-1.5.7-android-arm64.jar"
          OPENBLAS_HOME="${GITHUB_WORKSPACE}/openblas_home"
          OPENBLAS_DIR="${OPENBLAS_HOME}/lib/arm64-v8a"
          
          mkdir -p "${OPENBLAS_HOME}"
          cd "${OPENBLAS_HOME}"
          
          echo "Downloading ${OPENBLAS_JAR}..."
          wget -q "https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.19-1.5.7/${OPENBLAS_JAR}"
          unzip -q "${OPENBLAS_JAR}"
          
          # Create symlink for library consistency
          if [ -f "${OPENBLAS_DIR}/libopenblas.so" ] && [ ! -f "${OPENBLAS_DIR}/libopenblas.so.0" ]; then
            ln -s "${OPENBLAS_DIR}/libopenblas.so" "${OPENBLAS_DIR}/libopenblas.so.0"
          fi
          
          # Set environment variables
          echo "OPENBLAS_PATH=${OPENBLAS_DIR}" >> "$GITHUB_ENV"
          echo "OPENBLAS_HOME=${OPENBLAS_HOME}" >> "$GITHUB_ENV"
          
          echo "OpenBLAS setup complete at: ${OPENBLAS_DIR}"
          ls -la "${OPENBLAS_DIR}/"

      - name: Setup ARM Compute Library
        if: matrix.helper == 'armcompute'
        shell: bash
        run: |
          echo "Setting up ARM Compute Library for Android ARM64..."
          ARMCOMPUTE_VERSION="v25.04"
          ARMCOMPUTE_HOME="${GITHUB_WORKSPACE}/armcompute_home"
          ARMCOMPUTE_PACKAGE="arm_compute-${ARMCOMPUTE_VERSION}-android-aarch64-cpu-bin"
          
          mkdir -p "${ARMCOMPUTE_HOME}"
          cd "${ARMCOMPUTE_HOME}"
          
          echo "Downloading ARM Compute Library ${ARMCOMPUTE_VERSION}..."
          wget -q "https://github.com/ARM-software/ComputeLibrary/releases/download/${ARMCOMPUTE_VERSION}/${ARMCOMPUTE_PACKAGE}.tar.gz"
          tar -xzf "${ARMCOMPUTE_PACKAGE}.tar.gz"
          
          # Set environment variables
          ARMCOMPUTE_ROOT="${ARMCOMPUTE_HOME}/${ARMCOMPUTE_PACKAGE}"
          echo "ARMCOMPUTE_ROOT=${ARMCOMPUTE_ROOT}" >> "$GITHUB_ENV"
          echo "ARMCOMPUTE_HOME=${ARMCOMPUTE_HOME}" >> "$GITHUB_ENV"
          
          echo "ARM Compute Library setup complete at: ${ARMCOMPUTE_ROOT}"
          ls -la "${ARMCOMPUTE_ROOT}/"

      - name: Configure Maven command
        shell: bash
        run: |
          echo "Configuring Maven build command..."
          
          # Base configuration
          LIBND4J_CLASSIFIER="android-arm64"
          
          # Determine modules to build
          if [ "${{ github.event.inputs.libnd4jUrl }}" != '' ]; then
             MODULES=':nd4j-native,:nd4j-native-preset'
             echo "Using pre-built libnd4j from: ${{ github.event.inputs.libnd4jUrl }}"
          else
             MODULES=':nd4j-native,:nd4j-native-preset,:libnd4j'
             echo "Building libnd4j from source"
          fi
          
          # Critical: Add CMake arguments for Android cross-compilation
          CMAKE_ARGS="-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} \
            -DANDROID_ABI=${ANDROID_ABI} \
            -DANDROID_PLATFORM=${ANDROID_PLATFORM} \
            -DANDROID_NDK=${ANDROID_NDK} \
            -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} \
            -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} \
            -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
            -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
            -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY"
          
          # Base Maven command
          BASE_COMMAND="mvn ${{ matrix.mvn_ext }} \
            -Dlibnd4j.generate.flatc=ON --no-transfer-progress \
            -Posx-aarch64-protoc \
            -pl ${MODULES} \
            -Pcpu \
             --no-transfer-progress \
            -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} \
            -Dhttp.keepAlive=false \
            -Dmaven.wagon.http.pool=false \
            -Dmaven.wagon.http.retryHandler.count=3 \
            -Possrh \
            -DskipTestResourceEnforcement=true \
            -Dmaven.javadoc.failOnError=false \
            -Djavacpp.platform=${LIBND4J_CLASSIFIER} \
            -Dlibnd4j.cmake=\"${CMAKE_ARGS}\" \
            -Pcpu \
            --also-make \
            --batch-mode \
            deploy \
            -DskipTests"
          
          # Add helper-specific extensions
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
             HELPER_FLAGS="-Dlibnd4j.helper=${{ matrix.helper }} \
               -Djavacpp.platform.extension=-${{ matrix.helper }} \
               -Dlibnd4j.classifier=${LIBND4J_CLASSIFIER}-${{ matrix.helper }}"
             echo "Enabling ARM Compute Library helper"
          else
             HELPER_FLAGS=""
             echo "Building without helper libraries"
          fi
          
          # Combine command
          FINAL_COMMAND="${BASE_COMMAND} ${HELPER_FLAGS}"
          
          # Set environment variables
          echo "LIBND4J_CLASSIFIER=${LIBND4J_CLASSIFIER}" >> $GITHUB_ENV
          echo "MAVEN_COMMAND=${FINAL_COMMAND}" >> $GITHUB_ENV
          
          echo "Maven command configured:"
          echo "${FINAL_COMMAND}"
          echo ""
          echo "CMake arguments:"
          echo "${CMAKE_ARGS}"

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event.inputs.debug_enabled == 'true' }}
        with:
          limit-access-to-actor: true

      - name: Build with Maven
        shell: bash
        env:
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
          RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
          SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
          RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
          MAVEN_USERNAME: ${{ secrets.CENTRAL_SONATYPE_TOKEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.CENTRAL_SONATYPE_TOKEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          MAVEN_OPTS: -Xmx2g
          PROTO_EXEC: /opt/protobuf/bin/protoc
        run: |
          echo "Starting Maven build for Android ARM64..."
          
          # Setup PATH
          export PATH="/opt/protobuf/bin:/opt/cmake/bin:$PATH"
          
          # Setup LD_LIBRARY_PATH
          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${OPENBLAS_PATH}"
          
          # Print environment info
          echo "Build environment:"
          echo "  Java version: $(java -version 2>&1 | head -1)"
          echo "  Maven version: $(mvn -version | head -1)"
          echo "  Android NDK: ${ANDROID_NDK_ROOT}"
          echo "  OpenBLAS: ${OPENBLAS_PATH}"
          echo "  CC: ${CC}"
          echo "  CXX: ${CXX}"
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
            echo "  ARM Compute: ${ARMCOMPUTE_ROOT}"
          fi
          echo "  Build threads: ${{ github.event.inputs.buildThreads }}"
          echo ""
          
          # Execute Maven build
          echo "Executing Maven command:"
          echo "${MAVEN_COMMAND}"
          echo ""
          
          if [ "${PERFORM_RELEASE}" == "1" ]; then
              echo "Performing release build..."
              bash "${GITHUB_WORKSPACE}/release-specified-component.sh" \
                "${RELEASE_VERSION}" \
                "${SNAPSHOT_VERSION}" \
                "${RELEASE_REPO_ID}" \
                "${MAVEN_COMMAND}"
          else
              echo "Performing snapshot build..."
              eval "${MAVEN_COMMAND}"
          fi
          
          echo "Maven build completed successfully"

      - name: Cleanup swap and temporary files
        if: always()
        shell: bash
        run: |
          echo "Cleaning up temporary files..."
          
          # Remove swap file
          sudo swapoff /swapfile 2>/dev/null || true
          sudo rm -f /swapfile 2>/dev/null || true
          
          # Clean up NDK if not cached
          if [ "${{ steps.cache-arm64-ndk.outputs.cache-hit }}" != 'true' ]; then
            echo "NDK was downloaded fresh, keeping for cache"
          fi
          
          # Clean up temporary build files
          rm -rf /tmp/maven-* 2>/dev/null || true
          
          echo "Cleanup completed"