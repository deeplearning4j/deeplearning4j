on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 2

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: central

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:

      runsOn:
        description: 'System to run on'
        required: false
        default: ubuntu-22.04-arm

      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

      skipLLVMBuild:
        description: 'Skip LLVM toolchain build (use for testing)'
        required: false
        default: false

jobs:
  android-arm64:
    strategy:
      fail-fast: false
      matrix:
        helper: [armcompute, ""]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
          - debug_enabled: ${{ github.event.inputs.debug_enabled }}
          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
          - release_version: ${{ github.event.inputs.releaseVersion }}
          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
          - server_id: ${{ github.event.inputs.serverId }}
          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
          - build_threads: ${{ github.event.inputs.buildThreads }}
    runs-on: ${{ github.event.inputs.runsOn }}
    timeout-minutes: 600  # 10 hour timeout for LLVM build
    steps:
      - name: Clean workspace
        uses: AutoModality/action-clean@v1

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Cache protobuf install
        uses: actions/cache@v4
        id: cache-protobuf-arm
        with:
          path: /opt/protobuf
          key: ${{ runner.os }}-protobuf-arm-v1

      - name: Install protobuf
        uses: ./.github/actions/install-protobuf-linux
        if: steps.cache-protobuf-arm.outputs.cache-hit != 'true'

      - name: Cache CMake install
        uses: actions/cache@v4
        id: cache-cmake
        with:
          path: /opt/cmake
          key: ${{ runner.os }}-cmake-v1

      - name: Install CMake
        uses: ./.github/actions/install-cmake-linux
        if: steps.cache-cmake.outputs.cache-hit != 'true'

      - name: Set up Java for publishing
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id: ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven'

      - name: Cache Patched Android NDK
        uses: actions/cache@v4
        id: cache-patched-ndk
        with:
          path: ${{ github.workspace }}/android-ndk-r27b
          key: android-ndk-r27b-aarch64-patched-v2

      - name: Cache LLVM Toolchain Source
        uses: actions/cache@v4
        id: cache-llvm-source
        with:
          path: ${{ github.workspace }}/llvm-toolchain
          key: llvm-toolchain-source-${{ github.run_id }}
          restore-keys: |
            llvm-toolchain-source-

      - name: Cache LLVM Build Output
        uses: actions/cache@v4
        id: cache-llvm-build
        with:
          path: ${{ github.workspace }}/llvm-toolchain/out
          key: llvm-toolchain-build-aarch64-v1

      - name: Cache Patcher Repository
        uses: actions/cache@v4
        id: cache-patcher
        with:
          path: ${{ github.workspace }}/patcher_repo
          key: patcher-repo-v1

      - name: Setup and Patch Android NDK for ARM64 Linux
        id: setup-ndk
        shell: bash
        run: |
          set -e  # Exit on any error
          
          NDK_VERSION="r27b"
          NDK_DIR="${GITHUB_WORKSPACE}/android-ndk-${NDK_VERSION}"
          LLVM_TOOLCHAIN_DIR="${GITHUB_WORKSPACE}/llvm-toolchain"
          PATCHER_DIR="${GITHUB_WORKSPACE}/patcher_repo"
          
          # Install required packages for building LLVM toolchain
          echo "Installing build dependencies..."
          sudo apt-get update -qq
          sudo apt-get install -y \
            clang \
            bison \
            llvm \
            llvm-dev \
            python3 \
            lld \
            ninja-build \
            cmake \
            crossbuild-essential-arm64 \
            repo \
            git \
            wget \
            unzip \
            curl
          
          if [ ! -d "${NDK_DIR}" ] || [ ! -f "${NDK_DIR}/.patched" ]; then
            echo "Setting up patched NDK for ARM64 Linux..."
          
            # Download official Google NDK first
            if [ ! -d "${NDK_DIR}" ]; then
              echo "Downloading official Google Android NDK ${NDK_VERSION}..."
              NDK_URL="https://dl.google.com/android/repository/android-ndk-r27b-linux.zip"
              wget -q --timeout=60 --tries=3 "${NDK_URL}" -O ndk.zip
              unzip -q ndk.zip -d "${GITHUB_WORKSPACE}"
              rm ndk.zip
          
              if [ ! -d "${NDK_DIR}" ]; then
                echo "ERROR: NDK directory not found after extraction"
                exit 1
              fi
            fi
          
            # Clone patcher repository if not cached
            if [ ! -d "${PATCHER_DIR}/.git" ]; then
              echo "Cloning patcher repository..."
              rm -rf "${PATCHER_DIR}"
              git clone --depth 1 https://github.com/snownf/ndk-aarch64-linux.git "${PATCHER_DIR}"
            fi
          
            # Skip LLVM build if requested (for testing)
            if [ "${{ github.event.inputs.skipLLVMBuild }}" == "true" ]; then
              echo "Skipping LLVM build as requested"
              echo "Using system clang as fallback..."
          
              # Create minimal patched toolchain using system clang
              TOOLCHAIN_BIN="${NDK_DIR}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          
              # Backup original clang and create wrapper
              [ -f "${TOOLCHAIN_BIN}/clang" ] && mv "${TOOLCHAIN_BIN}/clang" "${TOOLCHAIN_BIN}/clang.original"
          
              cat > "${TOOLCHAIN_BIN}/clang" << 'EOF'
          #!/bin/bash
          exec /usr/bin/clang "$@"
          EOF
              chmod +x "${TOOLCHAIN_BIN}/clang"
          
              # Mark as patched
              touch "${NDK_DIR}/.patched"
          
            else
              # Check if we have cached LLVM build
              if [ ! -f "${LLVM_TOOLCHAIN_DIR}/out/stage2/bin/clang" ]; then
                echo "Building LLVM toolchain for ARM64..."
                echo "WARNING: This will take 2-4 hours on first run."
          
                # Prepare directories
                mkdir -p "${LLVM_TOOLCHAIN_DIR}"
          
                # Step 1: Download LLVM toolchain source code if not cached
                if [ ! -f "${LLVM_TOOLCHAIN_DIR}/.repo/manifest.xml" ]; then
                  echo "Downloading LLVM toolchain source (30-60 minutes)..."
                  cd "${LLVM_TOOLCHAIN_DIR}"
          
                  # Initialize with timeout
                  timeout 1800 repo init -u https://android.googlesource.com/platform/manifest -b llvm-toolchain || {
                    echo "ERROR: repo init failed or timed out"
                    exit 1
                  }
          
                  # Sync with aggressive settings for CI
                  echo "Syncing LLVM source code..."
                  timeout 10800 repo sync -c -j8 --fail-fast --force-sync || {
                    echo "ERROR: repo sync failed or timed out"
                    exit 1
                  }
                else
                  echo "Using cached LLVM source code"
                fi
          
                # Step 2: Apply patches
                echo "Applying ARM64 patches to LLVM build system..."
                cd "${LLVM_TOOLCHAIN_DIR}/toolchain/llvm_android"
          
                # Backup and replace
                [ -d patches ] && mv patches ../patches_backup
                rm -rf *
                cp -rf "${PATCHER_DIR}/"* .
                [ -d ../patches_backup ] && mv ../patches_backup patches
          
                # Step 3: Build the toolchain
                echo "Building LLVM toolchain (2-4 hours)..."
                cd "${LLVM_TOOLCHAIN_DIR}"
          
                # Build with reasonable parallelism for CI
                python3 toolchain/llvm_android/build.py \
                  --no-build windows \
                  --skip-tests \
                  --single-stage \
                  --no-musl \
                  -j$(nproc)
          
                if [ ! -f "${LLVM_TOOLCHAIN_DIR}/out/stage2/bin/clang" ]; then
                  echo "ERROR: LLVM toolchain build failed - clang binary not found"
                  # List what we do have
                  find "${LLVM_TOOLCHAIN_DIR}/out" -name "clang*" -type f 2>/dev/null || echo "No clang binaries found"
                  exit 1
                fi
          
                echo "LLVM toolchain build completed successfully"
              else
                echo "Using cached LLVM toolchain build"
              fi
          
              # Step 4: Replace NDK binary files with ARM64-compatible ones
              echo "Patching NDK with ARM64-compatible binaries..."
          
              NDK_BIN_DIR="${NDK_DIR}/toolchains/llvm/prebuilt/linux-x86_64/bin"
              NDK_LIB_DIR="${NDK_DIR}/toolchains/llvm/prebuilt/linux-x86_64/lib"
          
              # Backup original binaries
              [ -f "${NDK_BIN_DIR}/clang" ] && mv "${NDK_BIN_DIR}/clang" "${NDK_BIN_DIR}/clang.original"
          
              # Copy ARM64 LLVM binaries
              echo "Copying clang binaries..."
              cp -f "${LLVM_TOOLCHAIN_DIR}/out/stage2/bin/clang"* "${NDK_BIN_DIR}/" 2>/dev/null || true
          
              echo "Copying LLVM tools..."
              cp -f "${LLVM_TOOLCHAIN_DIR}/out/stage2/bin/llvm-"* "${NDK_BIN_DIR}/" 2>/dev/null || true
          
              echo "Copying linker..."
              cp -f "${LLVM_TOOLCHAIN_DIR}/out/stage2/bin/lld"* "${NDK_BIN_DIR}/" 2>/dev/null || true
          
              echo "Copying clang library..."
              if [ -d "${LLVM_TOOLCHAIN_DIR}/out/stage2/lib/clang" ]; then
                rm -rf "${NDK_LIB_DIR}/clang"
                cp -rf "${LLVM_TOOLCHAIN_DIR}/out/stage2/lib/clang" "${NDK_LIB_DIR}/"
              fi
          
              # Copy system tools
              cp -f /usr/bin/make "${NDK_DIR}/prebuilt/linux-x86_64/bin/" 2>/dev/null || true
              cp -f /usr/bin/yasm "${NDK_DIR}/prebuilt/linux-x86_64/bin/" 2>/dev/null || true
          
              # Fix permissions
              chmod +x "${NDK_BIN_DIR}/"*
          
              echo "NDK patching completed successfully"
            fi
          
            # Mark as patched
            touch "${NDK_DIR}/.patched"
          else
            echo "Using cached patched NDK"
          fi
          
          # Set environment variables
          echo "ANDROID_NDK_ROOT=${NDK_DIR}" >> $GITHUB_ENV
          echo "ANDROID_NDK=${NDK_DIR}" >> $GITHUB_ENV
          
          # Use the patched toolchain
          TOOLCHAIN_BIN="${NDK_DIR}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          SYSROOT="${NDK_DIR}/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          
          echo "ANDROID_TOOLCHAIN_BIN=${TOOLCHAIN_BIN}" >> $GITHUB_ENV
          echo "ANDROID_SYSROOT=${SYSROOT}" >> $GITHUB_ENV
          
          # Test the patched toolchain
          echo "Testing patched Android toolchain..."
          if "${TOOLCHAIN_BIN}/aarch64-linux-android21-clang" --version >/dev/null 2>&1; then
            echo "SUCCESS: Patched toolchain works!"
            "${TOOLCHAIN_BIN}/aarch64-linux-android21-clang" --version | head -1
            echo "Binary type: $(file "${TOOLCHAIN_BIN}/clang")"
          else
            echo "ERROR: Patched toolchain test failed"
            echo "Available clang binaries:"
            ls -la "${TOOLCHAIN_BIN}"/clang* 2>/dev/null || echo "None found"
            exit 1
          fi
          
          # Create CMake toolchain file
          echo "Creating CMake toolchain file..."
          mkdir -p "${GITHUB_WORKSPACE}/cmake"
          
          cat > "${GITHUB_WORKSPACE}/cmake/android-arm64.cmake" << EOF
          # CMake toolchain file for Android ARM64 cross-compilation
          set(CMAKE_SYSTEM_NAME Android)
          set(CMAKE_SYSTEM_VERSION 21)
          set(CMAKE_ANDROID_ARCH_ABI arm64-v8a)
          set(CMAKE_ANDROID_NDK ${NDK_DIR})
          set(CMAKE_ANDROID_STL_TYPE c++_shared)
          
          # Use the patched toolchain
          set(CMAKE_SYSROOT ${SYSROOT})
          set(CMAKE_C_COMPILER ${TOOLCHAIN_BIN}/aarch64-linux-android21-clang)
          set(CMAKE_CXX_COMPILER ${TOOLCHAIN_BIN}/aarch64-linux-android21-clang++)
          
          # Set find root path modes
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
          
          # Additional flags
          set(CMAKE_C_FLAGS_INIT "-fPIC")
          set(CMAKE_CXX_FLAGS_INIT "-fPIC")
          
          # Set make program
          set(CMAKE_MAKE_PROGRAM /usr/bin/make)
          EOF
          
          echo "NDK setup completed successfully"
          echo "Using toolchain: ${TOOLCHAIN_BIN}"
          echo "Using sysroot: ${SYSROOT}"

      - name: Setup OpenBLAS
        shell: bash
        run: |
          echo "Setting up OpenBLAS for Android ARM64..."
          OPENBLAS_JAR="openblas-0.3.19-1.5.7-android-arm64.jar"
          OPENBLAS_HOME="${GITHUB_WORKSPACE}/openblas_home"
          OPENBLAS_DIR="${OPENBLAS_HOME}/lib/arm64-v8a"
          
          mkdir -p "${OPENBLAS_HOME}"
          cd "${OPENBLAS_HOME}"
          
          echo "Downloading ${OPENBLAS_JAR}..."
          wget -q "https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.19-1.5.7/${OPENBLAS_JAR}"
          unzip -q "${OPENBLAS_JAR}"
          
          # Create symlink for library consistency
          if [ -f "${OPENBLAS_DIR}/libopenblas.so" ] && [ ! -f "${OPENBLAS_DIR}/libopenblas.so.0" ]; then
            ln -s "${OPENBLAS_DIR}/libopenblas.so" "${OPENBLAS_DIR}/libopenblas.so.0"
          fi
          
          # Set environment variables
          echo "OPENBLAS_PATH=${OPENBLAS_DIR}" >> "$GITHUB_ENV"
          echo "OPENBLAS_HOME=${OPENBLAS_HOME}" >> "$GITHUB_ENV"
          
          echo "OpenBLAS setup complete at: ${OPENBLAS_DIR}"

      - name: Setup ARM Compute Library
        if: matrix.helper == 'armcompute'
        shell: bash
        run: |
          echo "Setting up ARM Compute Library for Android ARM64..."
          ARMCOMPUTE_VERSION="v25.04"
          ARMCOMPUTE_HOME="${GITHUB_WORKSPACE}/armcompute_home"
          ARMCOMPUTE_PACKAGE="arm_compute-${ARMCOMPUTE_VERSION}-android-aarch64-cpu-bin"
          
          mkdir -p "${ARMCOMPUTE_HOME}"
          cd "${ARMCOMPUTE_HOME}"
          
          echo "Downloading ARM Compute Library ${ARMCOMPUTE_VERSION}..."
          wget -q "https://github.com/ARM-software/ComputeLibrary/releases/download/${ARMCOMPUTE_VERSION}/${ARMCOMPUTE_PACKAGE}.tar.gz"
          tar -xzf "${ARMCOMPUTE_PACKAGE}.tar.gz"
          
          # Set environment variables
          ARMCOMPUTE_ROOT="${ARMCOMPUTE_HOME}/${ARMCOMPUTE_PACKAGE}"
          echo "ARMCOMPUTE_ROOT=${ARMCOMPUTE_ROOT}" >> "$GITHUB_ENV"
          echo "ARMCOMPUTE_HOME=${ARMCOMPUTE_HOME}" >> "$GITHUB_ENV"
          
          echo "ARM Compute Library setup complete at: ${ARMCOMPUTE_ROOT}"

      - name: Configure Maven command
        shell: bash
        run: |
          echo "Configuring Maven build command..."
          
          # Base configuration
          LIBND4J_CLASSIFIER="android-arm64"
          CMAKE_TOOLCHAIN_FILE="${GITHUB_WORKSPACE}/cmake/android-arm64.cmake"
          
          # Verify toolchain file exists
          if [ ! -f "${CMAKE_TOOLCHAIN_FILE}" ]; then
            echo "ERROR: CMake toolchain file not found at ${CMAKE_TOOLCHAIN_FILE}"
            exit 1
          fi
          
          # Determine modules to build
          if [ "${{ github.event.inputs.libnd4jUrl }}" != '' ]; then
             MODULES=':nd4j-native,:nd4j-native-preset'
             echo "Using pre-built libnd4j from: ${{ github.event.inputs.libnd4jUrl }}"
          else
             MODULES=':nd4j-native,:nd4j-native-preset,:libnd4j'
             echo "Building libnd4j from source"
          fi
          
          # Android/ARM64 specific CMake arguments
          CMAKE_ARGS="-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} \
            -DSD_ANDROID_BUILD=true \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -DANDROID_NDK=${ANDROID_NDK} \
            -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
            -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
            -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY"
          
          # Base Maven command
          BASE_COMMAND="mvn ${{ matrix.mvn_ext }} \
            -Dlibnd4j.generate.flatc=ON \
            --no-transfer-progress \
            -Posx-aarch64-protoc \
            -pl ${MODULES} \
            -Pcpu \
            -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} \
            -Dhttp.keepAlive=false \
            -Dmaven.wagon.http.pool=false \
            -Dmaven.wagon.http.retryHandler.count=3 \
            -Possrh \
            -DskipTestResourceEnforcement=true \
            -Dmaven.javadoc.failOnError=false \
            -Djavacpp.platform=${LIBND4J_CLASSIFIER} \
            -Dlibnd4j.cmake=\"${CMAKE_ARGS}\" \
            --also-make \
            --batch-mode \
            deploy \
            -DskipTests"
          
          # Add helper-specific extensions
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
             HELPER_FLAGS="-Dlibnd4j.helper=${{ matrix.helper }} \
               -Djavacpp.platform.extension=-${{ matrix.helper }} \
               -Dlibnd4j.classifier=${LIBND4J_CLASSIFIER}-${{ matrix.helper }}"
             echo "Enabling ARM Compute Library helper"
          else
             HELPER_FLAGS=""
             echo "Building without helper libraries"
          fi
          
          # Combine command
          FINAL_COMMAND="${BASE_COMMAND} ${HELPER_FLAGS}"
          
          # Set environment variables
          echo "LIBND4J_CLASSIFIER=${LIBND4J_CLASSIFIER}" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}" >> $GITHUB_ENV
          echo "MAVEN_COMMAND=${FINAL_COMMAND}" >> $GITHUB_ENV

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event.inputs.debug_enabled == 'true' }}
        with:
          limit-access-to-actor: true

      - name: Debug NDK and compilers
        shell: bash
        run: |
          echo "=== NDK and Compiler Debug Information ==="
          
          TOOLCHAIN_BIN="${ANDROID_TOOLCHAIN_BIN}"
          
          echo "NDK Path: ${ANDROID_NDK}"
          echo "Toolchain bin directory: ${TOOLCHAIN_BIN}"
          echo "Sysroot: ${ANDROID_SYSROOT}"
          echo ""
          
          echo "Testing compilers:"
          echo "aarch64-linux-android21-clang:"
          "${TOOLCHAIN_BIN}/aarch64-linux-android21-clang" --version 2>&1 | head -1 || echo "clang failed"
          echo ""
          
          echo "File type of clang binary:"
          file "${TOOLCHAIN_BIN}/clang"
          echo ""
          
          echo "CMake toolchain file:"
          cat "${CMAKE_TOOLCHAIN_FILE}"
          echo ""
          
          # Test simple compilation
          echo "Testing simple compilation:"
          echo 'int main() { return 0; }' > test.c
          if "${TOOLCHAIN_BIN}/aarch64-linux-android21-clang" --sysroot="${ANDROID_SYSROOT}" -o test test.c; then
            echo "SUCCESS: Simple C compilation works"
            file test
          else
            echo "ERROR: Simple C compilation failed"
          fi
          rm -f test test.c

      - name: Build with Maven
        shell: bash
        env:
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
          RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
          SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
          RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
          MAVEN_USERNAME: ${{ secrets.CENTRAL_SONATYPE_TOKEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.CENTRAL_SONATYPE_TOKEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          MAVEN_OPTS: -Xmx2g
          PROTO_EXEC: /opt/protobuf/bin/protoc
        run: |
          echo "Starting Maven build for Android ARM64..."
          
          # Setup PATH
          export PATH="/opt/protobuf/bin:/opt/cmake/bin:$PATH"
          
          # Setup LD_LIBRARY_PATH
          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${OPENBLAS_PATH}"
          
          # Print environment info
          echo "=== Build Environment ==="
          echo "  Java version: $(java -version 2>&1 | head -1)"
          echo "  Maven version: $(mvn -version | head -1)"
          echo "  CMake version: $(cmake --version | head -1)"
          echo "  Protoc version: $(protoc --version)"
          echo "  Android NDK: ${ANDROID_NDK_ROOT}"
          echo "  CMake toolchain: ${CMAKE_TOOLCHAIN_FILE}"
          echo "  OpenBLAS: ${OPENBLAS_PATH}"
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
            echo "  ARM Compute: ${ARMCOMPUTE_ROOT}"
          fi
          echo "  Build threads: ${{ github.event.inputs.buildThreads }}"
          echo "  Platform classifier: ${LIBND4J_CLASSIFIER}"
          echo ""
          
          # Execute Maven build
          echo "=== Executing Maven Build ==="
          
          if [ "${PERFORM_RELEASE}" == "1" ]; then
              echo "Performing release build..."
              bash "${GITHUB_WORKSPACE}/release-specified-component.sh" \
                "${RELEASE_VERSION}" \
                "${SNAPSHOT_VERSION}" \
                "${RELEASE_REPO_ID}" \
                "${MAVEN_COMMAND}"
          else
              echo "Performing snapshot build..."
              eval "${MAVEN_COMMAND}"
          fi
          
          echo "Maven build completed successfully"

      - name: Cleanup swap and temporary files
        if: always()
        shell: bash
        run: |
          echo "Cleaning up temporary files..."
          
          # Remove swap file
          sudo swapoff /swapfile 2>/dev/null || true
          sudo rm -f /swapfile 2>/dev/null || true
          
          # Clean up temporary build files
          rm -rf /tmp/maven-* 2>/dev/null || true
          
          echo "Cleanup completed"