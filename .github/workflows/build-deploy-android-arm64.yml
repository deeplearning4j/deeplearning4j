on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 2

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: central

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:

      runsOn:
        description: 'System to run on'
        required: false
        default: ubuntu-22.04-arm

      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  android-arm64:
    strategy:
      fail-fast: false
      matrix:
        helper: [armcompute, ""]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
          - debug_enabled: ${{ github.event.inputs.debug_enabled }}
          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
          - release_version: ${{ github.event.inputs.releaseVersion }}
          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
          - server_id: ${{ github.event.inputs.serverId }}
          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
          - build_threads: ${{ github.event.inputs.buildThreads }}
    runs-on: ${{ github.event.inputs.runsOn }}
    steps:
      - name: Clean workspace
        uses: AutoModality/action-clean@v1

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Cache protobuf install
        uses: actions/cache@v4
        id: cache-protobuf-arm
        with:
          path: /opt/protobuf
          key: ${{ runner.os }}-protobuf-arm-v1

      - name: Install protobuf
        uses: ./.github/actions/install-protobuf-linux
        if: steps.cache-protobuf-arm.outputs.cache-hit != 'true'

      - name: Cache CMake install
        uses: actions/cache@v4
        id: cache-cmake
        with:
          path: /opt/cmake
          key: ${{ runner.os }}-cmake-v1

      - name: Install CMake
        uses: ./.github/actions/install-cmake-linux
        if: steps.cache-cmake.outputs.cache-hit != 'true'

      - name: Set up Java for publishing
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id: ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven'

      - name: Cache Android NDK
        uses: actions/cache@v4
        id: cache-android-ndk
        with:
          path: ${{ github.workspace }}/android-ndk-r27b
          key: android-ndk-r27b-google-patched-v1

      - name: Setup Google Android NDK with Patches
        id: setup-ndk
        shell: bash
        run: |
          NDK_VERSION="r27b"
          NDK_DIR="${GITHUB_WORKSPACE}/android-ndk-${NDK_VERSION}"
          
          if [ ! -d "${NDK_DIR}" ]; then
            echo "Downloading official Google Android NDK ${NDK_VERSION}..."
            NDK_URL="https://dl.google.com/android/repository/android-ndk-r27b-linux.zip"
          
            # Download with retries and better error handling
            for attempt in 1 2 3; do
              echo "Download attempt ${attempt}/3..."
              if wget -q --timeout=60 --tries=3 "${NDK_URL}" -O ndk.zip; then
                echo "Download successful"
                break
              else
                echo "Download attempt ${attempt} failed"
                if [ ${attempt} -eq 3 ]; then
                  echo "ERROR: Failed to download NDK after 3 attempts"
                  exit 1
                fi
                sleep 10
              fi
            done
          
            # Verify download
            if [ ! -f "ndk.zip" ] || [ ! -s "ndk.zip" ]; then
              echo "ERROR: Downloaded NDK file is missing or empty"
              exit 1
            fi
          
            echo "Extracting NDK..."
            if ! unzip -q ndk.zip -d "${GITHUB_WORKSPACE}"; then
              echo "ERROR: Failed to extract NDK"
              exit 1
            fi
            rm ndk.zip
          
            # Verify extraction
            if [ ! -d "${NDK_DIR}" ]; then
              echo "ERROR: NDK directory not found after extraction"
              ls -la "${GITHUB_WORKSPACE}/" | grep -i ndk || echo "No NDK directories found"
              exit 1
            fi
          else
            echo "Using cached NDK at ${NDK_DIR}"
          fi
          
          # Set environment variables
          echo "ndk-path=${NDK_DIR}" >> $GITHUB_OUTPUT
          echo "${NDK_DIR}" >> $GITHUB_PATH
          echo "ANDROID_NDK_ROOT=${NDK_DIR}" >> $GITHUB_ENV
          echo "ANDROID_NDK=${NDK_DIR}" >> $GITHUB_ENV
          
          # Find correct toolchain path - Google NDK has x86_64 prebuilt tools
          TOOLCHAIN_BIN="${NDK_DIR}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          SYSROOT="${NDK_DIR}/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          
          if [ ! -d "${TOOLCHAIN_BIN}" ]; then
            echo "ERROR: Toolchain bin directory not found at ${TOOLCHAIN_BIN}"
            echo "Available toolchain directories:"
            find "${NDK_DIR}" -path "*/toolchains/llvm/prebuilt/*/bin" -type d || echo "None found"
            exit 1
          fi
          
          echo "Found toolchain at: ${TOOLCHAIN_BIN}"
          echo "Found sysroot at: ${SYSROOT}"
          
          # Create platform directories for compatibility
          mkdir -p "${NDK_DIR}/platforms/android-21/arch-arm64/usr/lib"
          mkdir -p "${NDK_DIR}/platforms/android-21/arch-arm64/usr/include"

          # Copy sysroot files for compatibility
          if [ -d "${SYSROOT}/usr/lib/aarch64-linux-android/21" ]; then
            cp -r "${SYSROOT}/usr/lib/aarch64-linux-android/21/"* "${NDK_DIR}/platforms/android-21/arch-arm64/usr/lib/" 2>/dev/null || true
          fi
          
          if [ -d "${SYSROOT}/usr/include" ]; then
            cp -r "${SYSROOT}/usr/include/"* "${NDK_DIR}/platforms/android-21/arch-arm64/usr/include/" 2>/dev/null || true
          fi
          
          echo "Installing system clang and cross-compilation tools..."
          sudo apt-get update -qq
          sudo apt-get install -y \
            clang-15 \
            llvm-15 \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            qemu-user-static \
            binfmt-support
          
          echo "Setting up working clang toolchain for ARM64 host..."
          
          # The Google NDK x86_64 binaries need to be patched to work on ARM64
          CLANG_BINARY="${TOOLCHAIN_BIN}/clang-18"
          CLANGPP_BINARY="${TOOLCHAIN_BIN}/clang++"
          CLANG_SYMLINK="${TOOLCHAIN_BIN}/clang"
          
          # Backup original binaries if they exist
          [ -f "${CLANG_BINARY}" ] && mv "${CLANG_BINARY}" "${CLANG_BINARY}.google-original"
          
          # Remove broken symlinks
          rm -f "${CLANG_SYMLINK}" "${CLANGPP_BINARY}"
          
          # Fix permissions on NDK linker
          echo "Fixing NDK linker permissions..."
          chmod +x "${TOOLCHAIN_BIN}/lld" 2>/dev/null || true
          chmod +x "${TOOLCHAIN_BIN}/ld.lld" 2>/dev/null || true
          
          # Create working clang-18 wrapper using system clang
          cat > "${CLANG_BINARY}" << 'EOF'
          #!/bin/bash
          # Working clang wrapper for Android cross-compilation using system clang
          SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
          # SCRIPT_DIR is: .../android-ndk-r27b/toolchains/llvm/prebuilt/linux-x86_64/bin
          # We need to go up 5 levels to get to android-ndk-r27b
          NDK_ROOT="$(dirname "$(dirname "$(dirname "$(dirname "$(dirname "${SCRIPT_DIR}")")")")")"
          SYSROOT="${NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          
          if [ ! -d "${SYSROOT}" ]; then
            echo "ERROR: Cannot find sysroot at ${SYSROOT}"
            echo "SCRIPT_DIR: ${SCRIPT_DIR}"
            echo "NDK_ROOT: ${NDK_ROOT}"
            echo "Expected path structure:"
            echo "  SCRIPT_DIR/../../../../.. should be NDK_ROOT"
            exit 1
          fi

          # Use the lld linker from the same directory as this script
          LLD_PATH="${SCRIPT_DIR}/lld"

          # Filter out any existing -fuse-ld arguments and force our own
          ARGS=()
          for arg in "$@"; do
            if [[ "$arg" != -fuse-ld=* ]]; then
              ARGS+=("$arg")
            fi
          done

          # Use system clang with Android target and NDK linker
          exec /usr/bin/clang-15 \
            --target=aarch64-linux-android21 \
            --sysroot="${SYSROOT}" \
            -fuse-ld="${LLD_PATH}" \
            "${ARGS[@]}"
          EOF
          
          chmod +x "${CLANG_BINARY}"
          
          # Patch the API-specific wrapper scripts
          echo "Patching API-specific wrapper scripts..."
          
          ANDROID_CLANG="${TOOLCHAIN_BIN}/aarch64-linux-android21-clang"
          ANDROID_CLANGPP="${TOOLCHAIN_BIN}/aarch64-linux-android21-clang++"
          
          if [ -f "${ANDROID_CLANG}" ]; then
            cp "${ANDROID_CLANG}" "${ANDROID_CLANG}.original"
          
            cat > "${ANDROID_CLANG}" << 'EOF'
          #!/bin/bash
          # Patched Android clang wrapper using system clang
          SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
          # SCRIPT_DIR is: .../android-ndk-r27b/toolchains/llvm/prebuilt/linux-x86_64/bin
          # We need to go up 5 levels to get to android-ndk-r27b
          NDK_ROOT="$(dirname "$(dirname "$(dirname "$(dirname "$(dirname "${SCRIPT_DIR}")")")")")"
          SYSROOT="${NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          
          if [ ! -d "${SYSROOT}" ]; then
            echo "ERROR: Cannot find sysroot at ${SYSROOT}"
            echo "SCRIPT_DIR: ${SCRIPT_DIR}"
            echo "NDK_ROOT: ${NDK_ROOT}"
            echo "Expected path structure:"
            echo "  SCRIPT_DIR/../../../../.. should be NDK_ROOT"
            exit 1
          fi

          # Use the lld linker from the same directory
          LLD_PATH="${SCRIPT_DIR}/lld"

          exec /usr/bin/clang-15 \
            --target=aarch64-linux-android21 \
            --sysroot="${SYSROOT}" \
            -fuse-ld="${LLD_PATH}" \
            "$@"
          EOF
            chmod +x "${ANDROID_CLANG}"
          fi
          
          if [ -f "${ANDROID_CLANGPP}" ]; then
            cp "${ANDROID_CLANGPP}" "${ANDROID_CLANGPP}.original"
          
            cat > "${ANDROID_CLANGPP}" << 'EOF'
          #!/bin/bash
          # Patched Android clang++ wrapper using system clang
          SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
          # SCRIPT_DIR is: .../android-ndk-r27b/toolchains/llvm/prebuilt/linux-x86_64/bin
          # We need to go up 5 levels to get to android-ndk-r27b
          NDK_ROOT="$(dirname "$(dirname "$(dirname "$(dirname "$(dirname "${SCRIPT_DIR}")")")")")"
          SYSROOT="${NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          
          if [ ! -d "${SYSROOT}" ]; then
            echo "ERROR: Cannot find sysroot at ${SYSROOT}"
            echo "SCRIPT_DIR: ${SCRIPT_DIR}"
            echo "NDK_ROOT: ${NDK_ROOT}"
            echo "Expected path structure:"
            echo "  SCRIPT_DIR/../../../../.. should be NDK_ROOT"
            exit 1
          fi

          # Use the lld linker from the same directory
          LLD_PATH="${SCRIPT_DIR}/lld"

          exec /usr/bin/clang-15 \
            --target=aarch64-linux-android21 \
            --sysroot="${SYSROOT}" \
            -fuse-ld="${LLD_PATH}" \
            "$@"
          EOF
            chmod +x "${ANDROID_CLANGPP}"
          fi
          
          # Create symlinks
          ln -sf clang-18 "${CLANG_SYMLINK}"
          ln -sf clang-18 "${CLANGPP_BINARY}"
          
          # Test the patched setup
          echo "Testing patched clang setup:"
          if "${CLANG_BINARY}" --version >/dev/null 2>&1; then
            echo "SUCCESS: clang-18 wrapper works!"
            "${CLANG_BINARY}" --version 2>&1 | head -1
          else
            echo "ERROR: clang-18 wrapper failed"
            "${CLANG_BINARY}" --version
            exit 1
          fi
          
          if "${CLANG_SYMLINK}" --version >/dev/null 2>&1; then
            echo "SUCCESS: clang symlink works!"
          else
            echo "ERROR: clang symlink failed"
            exit 1
          fi
          
          if "${CLANGPP_BINARY}" --version >/dev/null 2>&1; then
            echo "SUCCESS: clang++ symlink works!"
          else
            echo "ERROR: clang++ symlink failed"
            exit 1
          fi
          
          # Test the patched API-specific wrappers
          echo "Testing patched API-specific wrapper scripts:"
          if "${ANDROID_CLANG}" --version >/dev/null 2>&1; then
            echo "SUCCESS: Patched aarch64-linux-android21-clang works!"
          else
            echo "ERROR: Patched aarch64-linux-android21-clang failed"
            exit 1
          fi
          
          if "${ANDROID_CLANGPP}" --version >/dev/null 2>&1; then
            echo "SUCCESS: Patched aarch64-linux-android21-clang++ works!"
          else
            echo "ERROR: Patched aarch64-linux-android21-clang++ failed"
            exit 1
          fi
          
          # Create CMake toolchain file
          echo "Creating CMake toolchain file..."
          mkdir -p "${GITHUB_WORKSPACE}/cmake"
          
          # CRITICAL: Use the x86_64 toolchain consistently - don't mix paths!
          cat > "${GITHUB_WORKSPACE}/cmake/android-arm64.cmake" << EOF
          # CMake toolchain file for Android ARM64 cross-compilation
          set(CMAKE_SYSTEM_NAME Android)
          set(CMAKE_SYSTEM_VERSION 21)
          set(CMAKE_ANDROID_ARCH_ABI arm64-v8a)
          set(CMAKE_ANDROID_NDK ${NDK_DIR})
          set(CMAKE_ANDROID_STL_TYPE c++_shared)
          
          # IMPORTANT: Use x86_64 sysroot consistently with x86_64 toolchain
          set(CMAKE_SYSROOT ${SYSROOT})
          
          # IMPORTANT: Use x86_64 toolchain paths - these are the patched ones
          set(CMAKE_C_COMPILER ${TOOLCHAIN_BIN}/aarch64-linux-android21-clang)
          set(CMAKE_CXX_COMPILER ${TOOLCHAIN_BIN}/aarch64-linux-android21-clang++)
          
          # Set find root path modes
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
          
          # Additional flags
          set(CMAKE_C_FLAGS_INIT "-fPIC")
          set(CMAKE_CXX_FLAGS_INIT "-fPIC")
          
          # Force the linker to use the correct path
          set(CMAKE_EXE_LINKER_FLAGS_INIT "-fuse-ld=${TOOLCHAIN_BIN}/lld")
          set(CMAKE_SHARED_LINKER_FLAGS_INIT "-fuse-ld=${TOOLCHAIN_BIN}/lld")
          EOF
          
          echo "CMake toolchain file created at: ${GITHUB_WORKSPACE}/cmake/android-arm64.cmake"
          echo "Using toolchain: ${TOOLCHAIN_BIN}"
          echo "Using sysroot: ${SYSROOT}"
          
          # IMPORTANT: Verify that the toolchain file has correct paths
          echo "Verifying CMake toolchain file contents:"
          cat "${GITHUB_WORKSPACE}/cmake/android-arm64.cmake"
          
          # Double-check that we're using x86_64 paths
          if [[ "${TOOLCHAIN_BIN}" != *"linux-x86_64"* ]]; then
            echo "ERROR: TOOLCHAIN_BIN should contain linux-x86_64 but got: ${TOOLCHAIN_BIN}"
            exit 1
          fi
          
          if [[ "${SYSROOT}" != *"linux-x86_64"* ]]; then
            echo "ERROR: SYSROOT should contain linux-x86_64 but got: ${SYSROOT}"
            exit 1
          fi
          
          # Store toolchain bin path for later use
          echo "ANDROID_TOOLCHAIN_BIN=${TOOLCHAIN_BIN}" >> $GITHUB_ENV
          echo "ANDROID_SYSROOT=${SYSROOT}" >> $GITHUB_ENV
          
          echo "NDK setup completed successfully"

      - name: Setup OpenBLAS
        shell: bash
        run: |
          echo "Setting up OpenBLAS for Android ARM64..."
          OPENBLAS_JAR="openblas-0.3.19-1.5.7-android-arm64.jar"
          OPENBLAS_HOME="${GITHUB_WORKSPACE}/openblas_home"
          OPENBLAS_DIR="${OPENBLAS_HOME}/lib/arm64-v8a"
          
          mkdir -p "${OPENBLAS_HOME}"
          cd "${OPENBLAS_HOME}"
          
          echo "Downloading ${OPENBLAS_JAR}..."
          wget -q "https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.19-1.5.7/${OPENBLAS_JAR}"
          unzip -q "${OPENBLAS_JAR}"
          
          # Create symlink for library consistency
          if [ -f "${OPENBLAS_DIR}/libopenblas.so" ] && [ ! -f "${OPENBLAS_DIR}/libopenblas.so.0" ]; then
            ln -s "${OPENBLAS_DIR}/libopenblas.so" "${OPENBLAS_DIR}/libopenblas.so.0"
          fi
          
          # Set environment variables
          echo "OPENBLAS_PATH=${OPENBLAS_DIR}" >> "$GITHUB_ENV"
          echo "OPENBLAS_HOME=${OPENBLAS_HOME}" >> "$GITHUB_ENV"
          
          echo "OpenBLAS setup complete at: ${OPENBLAS_DIR}"
          ls -la "${OPENBLAS_DIR}/"

      - name: Setup ARM Compute Library
        if: matrix.helper == 'armcompute'
        shell: bash
        run: |
          echo "Setting up ARM Compute Library for Android ARM64..."
          ARMCOMPUTE_VERSION="v25.04"
          ARMCOMPUTE_HOME="${GITHUB_WORKSPACE}/armcompute_home"
          ARMCOMPUTE_PACKAGE="arm_compute-${ARMCOMPUTE_VERSION}-android-aarch64-cpu-bin"
          
          mkdir -p "${ARMCOMPUTE_HOME}"
          cd "${ARMCOMPUTE_HOME}"
          
          echo "Downloading ARM Compute Library ${ARMCOMPUTE_VERSION}..."
          wget -q "https://github.com/ARM-software/ComputeLibrary/releases/download/${ARMCOMPUTE_VERSION}/${ARMCOMPUTE_PACKAGE}.tar.gz"
          tar -xzf "${ARMCOMPUTE_PACKAGE}.tar.gz"
          
          # Set environment variables
          ARMCOMPUTE_ROOT="${ARMCOMPUTE_HOME}/${ARMCOMPUTE_PACKAGE}"
          echo "ARMCOMPUTE_ROOT=${ARMCOMPUTE_ROOT}" >> "$GITHUB_ENV"
          echo "ARMCOMPUTE_HOME=${ARMCOMPUTE_HOME}" >> "$GITHUB_ENV"
          
          echo "ARM Compute Library setup complete at: ${ARMCOMPUTE_ROOT}"
          ls -la "${ARMCOMPUTE_ROOT}/"

      - name: Configure Maven command
        shell: bash
        run: |
          echo "Configuring Maven build command..."
          
          # Base configuration
          LIBND4J_CLASSIFIER="android-arm64"
          CMAKE_TOOLCHAIN_FILE="${GITHUB_WORKSPACE}/cmake/android-arm64.cmake"
          
          # Verify toolchain file exists
          if [ ! -f "${CMAKE_TOOLCHAIN_FILE}" ]; then
            echo "ERROR: CMake toolchain file not found at ${CMAKE_TOOLCHAIN_FILE}"
            exit 1
          fi
          
          # Determine modules to build
          if [ "${{ github.event.inputs.libnd4jUrl }}" != '' ]; then
             MODULES=':nd4j-native,:nd4j-native-preset'
             echo "Using pre-built libnd4j from: ${{ github.event.inputs.libnd4jUrl }}"
          else
             MODULES=':nd4j-native,:nd4j-native-preset,:libnd4j'
             echo "Building libnd4j from source"
          fi
          
          # Android/ARM64 specific CMake arguments
          CMAKE_ARGS="-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} \
            -DSD_ANDROID_BUILD=true \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -DANDROID_NDK=${ANDROID_NDK} \
            -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
            -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
            -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY"
          
          # Base Maven command
          BASE_COMMAND="mvn ${{ matrix.mvn_ext }} \
            -Dlibnd4j.generate.flatc=ON \
            --no-transfer-progress \
            -Posx-aarch64-protoc \
            -pl ${MODULES} \
            -Pcpu \
            -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} \
            -Dhttp.keepAlive=false \
            -Dmaven.wagon.http.pool=false \
            -Dmaven.wagon.http.retryHandler.count=3 \
            -Possrh \
            -DskipTestResourceEnforcement=true \
            -Dmaven.javadoc.failOnError=false \
            -Djavacpp.platform=${LIBND4J_CLASSIFIER} \
            -Dlibnd4j.cmake=\"${CMAKE_ARGS}\" \
            --also-make \
            --batch-mode \
            deploy \
            -DskipTests"
          
          # Add helper-specific extensions
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
             HELPER_FLAGS="-Dlibnd4j.helper=${{ matrix.helper }} \
               -Djavacpp.platform.extension=-${{ matrix.helper }} \
               -Dlibnd4j.classifier=${LIBND4J_CLASSIFIER}-${{ matrix.helper }}"
             echo "Enabling ARM Compute Library helper"
          else
             HELPER_FLAGS=""
             echo "Building without helper libraries"
          fi
          
          # Combine command
          FINAL_COMMAND="${BASE_COMMAND} ${HELPER_FLAGS}"
          
          # Set environment variables
          echo "LIBND4J_CLASSIFIER=${LIBND4J_CLASSIFIER}" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}" >> $GITHUB_ENV
          echo "MAVEN_COMMAND=${FINAL_COMMAND}" >> $GITHUB_ENV
          
          echo "Maven command configured:"
          echo "${FINAL_COMMAND}"
          echo ""
          echo "CMake arguments:"
          echo "${CMAKE_ARGS}"

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event.inputs.debug_enabled == 'true' }}
        with:
          limit-access-to-actor: true

      - name: Debug NDK and compilers
        shell: bash
        run: |
          echo "=== NDK and Compiler Debug Information ==="
          
          TOOLCHAIN_BIN="${ANDROID_TOOLCHAIN_BIN}"
          
          echo "NDK Path: ${ANDROID_NDK}"
          echo "Toolchain bin directory: ${TOOLCHAIN_BIN}"
          echo "Sysroot: ${ANDROID_SYSROOT}"
          echo ""
          
          echo "Testing compilers:"
          echo "aarch64-linux-android21-clang:"
          "${TOOLCHAIN_BIN}/aarch64-linux-android21-clang" --version 2>&1 | head -1 || echo "clang failed"
          echo "aarch64-linux-android21-clang++:"
          "${TOOLCHAIN_BIN}/aarch64-linux-android21-clang++" --version 2>&1 | head -1 || echo "clang++ failed"
          echo ""
          
          echo "Environment variables:"
          echo "ANDROID_NDK: ${ANDROID_NDK}"
          echo "ANDROID_NDK_ROOT: ${ANDROID_NDK_ROOT}"
          echo "ANDROID_TOOLCHAIN_BIN: ${ANDROID_TOOLCHAIN_BIN}"
          echo "ANDROID_SYSROOT: ${ANDROID_SYSROOT}"
          echo ""
          
          echo "CMake toolchain file exists: $(test -f "${CMAKE_TOOLCHAIN_FILE}" && echo 'Yes' || echo 'No')"
          if [ -f "${CMAKE_TOOLCHAIN_FILE}" ]; then
            echo "Toolchain file path: ${CMAKE_TOOLCHAIN_FILE}"
            echo "Toolchain file contents:"
            cat "${CMAKE_TOOLCHAIN_FILE}"
          fi
          
          # Test simple compilation
          echo ""
          echo "Testing simple compilation:"
          echo 'int main() { return 0; }' > test.c
          if "${TOOLCHAIN_BIN}/aarch64-linux-android21-clang" --sysroot="${ANDROID_SYSROOT}" -o test test.c; then
            echo "SUCCESS: Simple C compilation works"
            file test
          else
            echo "ERROR: Simple C compilation failed"
          fi
          rm -f test test.c

      - name: Build with Maven
        shell: bash
        env:
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
          RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
          SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
          RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
          MAVEN_USERNAME: ${{ secrets.CENTRAL_SONATYPE_TOKEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.CENTRAL_SONATYPE_TOKEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          MAVEN_OPTS: -Xmx2g
          PROTO_EXEC: /opt/protobuf/bin/protoc
        run: |
          echo "Starting Maven build for Android ARM64..."
          
          # Setup PATH
          export PATH="/opt/protobuf/bin:/opt/cmake/bin:$PATH"
          
          # Setup LD_LIBRARY_PATH
          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${OPENBLAS_PATH}"
          
          # Print environment info
          echo "=== Build Environment ==="
          echo "  Java version: $(java -version 2>&1 | head -1)"
          echo "  Maven version: $(mvn -version | head -1)"
          echo "  CMake version: $(cmake --version | head -1)"
          echo "  Protoc version: $(protoc --version)"
          echo "  Android NDK: ${ANDROID_NDK_ROOT}"
          echo "  CMake toolchain: ${CMAKE_TOOLCHAIN_FILE}"
          echo "  OpenBLAS: ${OPENBLAS_PATH}"
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
            echo "  ARM Compute: ${ARMCOMPUTE_ROOT}"
          fi
          echo "  Build threads: ${{ github.event.inputs.buildThreads }}"
          echo "  Platform classifier: ${LIBND4J_CLASSIFIER}"
          echo ""
          
          # Final compiler verification
          echo "=== Final Compiler Verification ==="
          TOOLCHAIN_BIN="${ANDROID_TOOLCHAIN_BIN}"
          
          echo "Testing final compiler setup:"
          "${TOOLCHAIN_BIN}/clang++" --version || {
            echo "ERROR: clang++ is not working!"
            echo "Attempting to recreate symlink..."
            rm -f "${TOOLCHAIN_BIN}/clang++"
            ln -sf clang-18 "${TOOLCHAIN_BIN}/clang++"
            echo "Retesting..."
            "${TOOLCHAIN_BIN}/clang++" --version || {
              echo "FATAL: Cannot get clang++ working"
              exit 1
            }
          }
          echo ""
          
          # Execute Maven build
          echo "=== Executing Maven Build ==="
          echo "Maven command:"
          echo "${MAVEN_COMMAND}"
          echo ""
          
          if [ "${PERFORM_RELEASE}" == "1" ]; then
              echo "Performing release build..."
              bash "${GITHUB_WORKSPACE}/release-specified-component.sh" \
                "${RELEASE_VERSION}" \
                "${SNAPSHOT_VERSION}" \
                "${RELEASE_REPO_ID}" \
                "${MAVEN_COMMAND}"
          else
              echo "Performing snapshot build..."
              eval "${MAVEN_COMMAND}"
          fi
          
          echo "Maven build completed successfully"

      - name: Cleanup swap and temporary files
        if: always()
        shell: bash
        run: |
          echo "Cleaning up temporary files..."
          
          # Remove swap file
          sudo swapoff /swapfile 2>/dev/null || true
          sudo rm -f /swapfile 2>/dev/null || true
          
          # Clean up NDK if not cached
          if [ "${{ steps.cache-android-ndk.outputs.cache-hit }}" != 'true' ]; then
            echo "NDK was downloaded fresh, keeping for cache"
          fi
          
          # Clean up temporary build files
          rm -rf /tmp/maven-* 2>/dev/null || true
          
          echo "Cleanup completed"