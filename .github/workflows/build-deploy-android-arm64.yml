name: Build Android ARM64

on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 2

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: central

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:

      runsOn:
        description: 'System to run on'
        required: false
        default: ubuntu-22.04

      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

      androidApiLevel:
        description: 'Android API level to target'
        required: false
        default: 21

jobs:
  android-arm64:
    strategy:
      fail-fast: false
      matrix:
        helper: [armcompute, ""]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
          - debug_enabled: ${{ github.event.inputs.debug_enabled }}
          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
          - release_version: ${{ github.event.inputs.releaseVersion }}
          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
          - server_id: ${{ github.event.inputs.serverId }}
          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
          - build_threads: ${{ github.event.inputs.buildThreads }}
          - android_api_level: ${{ github.event.inputs.androidApiLevel }}
    runs-on: ${{ github.event.inputs.runsOn }}
    
    steps:
      - name: Clean workspace
        uses: AutoModality/action-clean@v1

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Configure swap space
        shell: bash
        run: |
          echo "Setting up 4GB swap file..."
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo sysctl vm.swappiness=20
          echo "Swap configuration complete:"
          free -h

      - name: Cache protobuf install
        uses: actions/cache@v4
        id: cache-protobuf-arm
        with:
          path: /opt/protobuf
          key: ${{ runner.os }}-protobuf-arm-v1

      - name: Install protobuf
        uses: ./.github/actions/install-protobuf-linux
        if: steps.cache-protobuf-arm.outputs.cache-hit != 'true'

      - name: Cache CMake install
        uses: actions/cache@v4
        id: cache-cmake
        with:
          path: /opt/cmake
          key: ${{ runner.os }}-cmake-v1

      - name: Install CMake
        uses: ./.github/actions/install-cmake-linux
        if: steps.cache-cmake.outputs.cache-hit != 'true'

      - name: Set up Java for publishing
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id: ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven'

      - name: Cache Android NDK
        uses: actions/cache@v4
        id: cache-android-ndk
        with:
          path: ${{ github.workspace }}/android-ndk-r27b
          key: android-ndk-r27b-${{ runner.os }}-${{ runner.arch }}-v2

      - name: Setup Android NDK
        id: setup-ndk
        shell: bash
        run: |
          NDK_VERSION="r27b"
          NDK_DIR="${GITHUB_WORKSPACE}/android-ndk-${NDK_VERSION}"
          
          echo "Setting up Android NDK ${NDK_VERSION}..."
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner Arch: ${{ runner.arch }}"
          echo "Target NDK directory: ${NDK_DIR}"
          
          if [ ! -d "${NDK_DIR}" ] || [ ! -f "${NDK_DIR}/ndk-build" ]; then
            echo "NDK not found in cache or incomplete, downloading..."
          
            # Determine the correct NDK download URL based on runner architecture
            if [ "${{ runner.arch }}" = "ARM64" ] || [ "${{ runner.arch }}" = "arm64" ]; then
              # For ARM64 runners (like GitHub's ARM64 runners)
              NDK_URL="https://github.com/lzhiyong/termux-ndk/releases/download/android-ndk/android-ndk-r27b-aarch64.zip"
              echo "Using ARM64 NDK for ARM64 runner"
            else
              # For x86_64 runners
              NDK_URL="https://dl.google.com/android/repository/android-ndk-r27b-linux.zip"
              echo "Using x86_64 NDK for x86_64 runner"
            fi
          
            echo "Downloading from: ${NDK_URL}"
          
            # Download with retry logic
            MAX_RETRIES=3
            RETRY_COUNT=0
          
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if wget -q --show-progress --progress=bar:force:noscroll "${NDK_URL}" -O ndk.zip; then
                echo "Download successful"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "Download failed, retry ${RETRY_COUNT}/${MAX_RETRIES}"
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "ERROR: Failed to download NDK after ${MAX_RETRIES} attempts"
                  exit 1
                fi
                sleep 5
              fi
            done
          
            # Extract NDK
            echo "Extracting NDK..."
            unzip -q ndk.zip -d "${GITHUB_WORKSPACE}"
            rm ndk.zip
          
            # Verify extraction
            if [ ! -f "${NDK_DIR}/ndk-build" ]; then
              echo "ERROR: NDK extraction failed or incomplete"
              ls -la "${GITHUB_WORKSPACE}/"
              exit 1
            fi
          
            echo "NDK downloaded and extracted successfully"
          else
            echo "Using cached NDK at ${NDK_DIR}"
          fi
          
          # Set NDK environment variables
          echo "ndk-path=${NDK_DIR}" >> $GITHUB_OUTPUT
          echo "ANDROID_NDK_ROOT=${NDK_DIR}" >> $GITHUB_ENV
          echo "ANDROID_NDK=${NDK_DIR}" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=${NDK_DIR}" >> $GITHUB_ENV
          echo "ANDROID_VERSION=${{ matrix.android_api_level }}" >> $GITHUB_ENV
          
          # Verify NDK structure and create compatibility directories
          echo "Verifying NDK structure..."
          
          # Check for modern NDK structure
          TOOLCHAIN_DIR="${NDK_DIR}/toolchains/llvm/prebuilt"
          if [ -d "${TOOLCHAIN_DIR}" ]; then
            echo "✓ Found modern NDK structure with unified toolchain"
          
            # Detect the correct prebuilt directory
            if [ -d "${TOOLCHAIN_DIR}/linux-x86_64" ]; then
              PREBUILT_DIR="${TOOLCHAIN_DIR}/linux-x86_64"
            elif [ -d "${TOOLCHAIN_DIR}/linux-aarch64" ]; then
              PREBUILT_DIR="${TOOLCHAIN_DIR}/linux-aarch64"
            else
              echo "ERROR: Could not find prebuilt toolchain directory"
              ls -la "${TOOLCHAIN_DIR}/"
              exit 1
            fi
          
            echo "✓ Using prebuilt toolchain: ${PREBUILT_DIR}"
          
            # Verify sysroot exists
            SYSROOT="${PREBUILT_DIR}/sysroot"
            if [ ! -d "${SYSROOT}" ]; then
              echo "ERROR: Sysroot not found at ${SYSROOT}"
              exit 1
            fi
          
            echo "✓ Sysroot verified: ${SYSROOT}"
          
            # Create legacy platform structure for CMake compatibility
            LEGACY_PLATFORM_DIR="${NDK_DIR}/platforms/android-${{ matrix.android_api_level }}/arch-arm64"
            if [ ! -d "${LEGACY_PLATFORM_DIR}" ]; then
              echo "Creating legacy platform directory for CMake compatibility..."
              mkdir -p "${LEGACY_PLATFORM_DIR}"
          
              # Create symbolic links to sysroot contents
              if [ -d "${SYSROOT}/usr" ]; then
                ln -sf "${SYSROOT}/usr" "${LEGACY_PLATFORM_DIR}/usr"
                echo "✓ Created symbolic link to sysroot/usr"
              fi
            fi
          
            # Verify compilers exist
            API_LEVEL="${{ matrix.android_api_level }}"
            CLANG_PATH="${PREBUILT_DIR}/bin/aarch64-linux-android${API_LEVEL}-clang"
            CLANGXX_PATH="${PREBUILT_DIR}/bin/aarch64-linux-android${API_LEVEL}-clang++"
          
            if [ -f "${CLANG_PATH}" ] && [ -f "${CLANGXX_PATH}" ]; then
              echo "✓ Found API-specific compilers"
            elif [ -f "${PREBUILT_DIR}/bin/clang" ] && [ -f "${PREBUILT_DIR}/bin/clang++" ]; then
              echo "✓ Found generic clang compilers"
            else
              echo "ERROR: No suitable compilers found"
              ls -la "${PREBUILT_DIR}/bin/"
              exit 1
            fi
          
          else
            echo "ERROR: Modern NDK toolchain structure not found"
            echo "Expected: ${TOOLCHAIN_DIR}"
            ls -la "${NDK_DIR}/"
            exit 1
          fi
          
          # Final verification
          if [ -f "${NDK_DIR}/ndk-build" ]; then
            echo "✓ NDK verification successful"
            echo "NDK version: $(cat ${NDK_DIR}/source.properties 2>/dev/null | grep Pkg.Revision || echo 'Version info not available')"
            echo "NDK path: ${NDK_DIR}"
          else
            echo "ERROR: NDK installation verification failed"
            exit 1
          fi
          
          # Set additional environment variables for the build
          echo "ANDROID_NATIVE_API_LEVEL=${{ matrix.android_api_level }}" >> $GITHUB_ENV

      - name: Setup OpenBLAS
        shell: bash
        run: |
          echo "Setting up OpenBLAS for Android ARM64..."
          OPENBLAS_VERSION="0.3.28-1.5.11"
          OPENBLAS_JAR="openblas-${OPENBLAS_VERSION}-android-arm64.jar"
          OPENBLAS_HOME="${GITHUB_WORKSPACE}/openblas_home"
          OPENBLAS_DIR="${OPENBLAS_HOME}/lib/arm64-v8a"
          
          mkdir -p "${OPENBLAS_HOME}"
          cd "${OPENBLAS_HOME}"
          
          echo "Downloading ${OPENBLAS_JAR}..."
          # Use the version from the error log
          MAVEN_URL="https://repo1.maven.org/maven2/org/bytedeco/openblas/${OPENBLAS_VERSION}/${OPENBLAS_JAR}"
          
          if wget -q "${MAVEN_URL}"; then
            echo "✓ Downloaded OpenBLAS successfully"
          else
            echo "ERROR: Failed to download OpenBLAS from ${MAVEN_URL}"
            exit 1
          fi
          
          unzip -q "${OPENBLAS_JAR}"
          
          # Verify the library files exist
          if [ -d "${OPENBLAS_DIR}" ]; then
            echo "✓ OpenBLAS library directory found: ${OPENBLAS_DIR}"
            ls -la "${OPENBLAS_DIR}/"
          
            # Create symlink for library consistency if needed
            if [ -f "${OPENBLAS_DIR}/libopenblas.so" ] && [ ! -f "${OPENBLAS_DIR}/libopenblas.so.0" ]; then
              ln -s "${OPENBLAS_DIR}/libopenblas.so" "${OPENBLAS_DIR}/libopenblas.so.0"
              echo "✓ Created libopenblas.so.0 symlink"
            fi
          else
            echo "ERROR: OpenBLAS library directory not found"
            echo "Contents of ${OPENBLAS_HOME}:"
            find "${OPENBLAS_HOME}" -type f -name "*.so*" || true
            exit 1
          fi
          
          # Set environment variables
          echo "OPENBLAS_PATH=${OPENBLAS_DIR}" >> "$GITHUB_ENV"
          echo "OPENBLAS_HOME=${OPENBLAS_HOME}" >> "$GITHUB_ENV"
          
          echo "✓ OpenBLAS setup complete"

      - name: Setup ARM Compute Library
        if: matrix.helper == 'armcompute'
        shell: bash
        run: |
          echo "Setting up ARM Compute Library for Android ARM64..."
          ARMCOMPUTE_VERSION="v25.04"
          ARMCOMPUTE_HOME="${GITHUB_WORKSPACE}/armcompute_home"
          ARMCOMPUTE_PACKAGE="arm_compute-${ARMCOMPUTE_VERSION}-android-aarch64-cpu-bin"
          ARMCOMPUTE_URL="https://github.com/ARM-software/ComputeLibrary/releases/download/${ARMCOMPUTE_VERSION}/${ARMCOMPUTE_PACKAGE}.tar.gz"
          
          mkdir -p "${ARMCOMPUTE_HOME}"
          cd "${ARMCOMPUTE_HOME}"
          
          echo "Downloading ARM Compute Library ${ARMCOMPUTE_VERSION}..."
          echo "URL: ${ARMCOMPUTE_URL}"
          
          if wget -q --show-progress "${ARMCOMPUTE_URL}"; then
            echo "✓ Downloaded ARM Compute Library successfully"
          else
            echo "ERROR: Failed to download ARM Compute Library"
            exit 1
          fi
          
          tar -xzf "${ARMCOMPUTE_PACKAGE}.tar.gz"
          
          # Verify extraction
          ARMCOMPUTE_ROOT="${ARMCOMPUTE_HOME}/${ARMCOMPUTE_PACKAGE}"
          if [ -d "${ARMCOMPUTE_ROOT}" ]; then
            echo "✓ ARM Compute Library extracted successfully"
            echo "Contents:"
            ls -la "${ARMCOMPUTE_ROOT}/"
          else
            echo "ERROR: ARM Compute Library extraction failed"
            ls -la "${ARMCOMPUTE_HOME}/"
            exit 1
          fi
          
          # Set environment variables
          echo "ARMCOMPUTE_ROOT=${ARMCOMPUTE_ROOT}" >> "$GITHUB_ENV"
          echo "ARMCOMPUTE_HOME=${ARMCOMPUTE_HOME}" >> "$GITHUB_ENV"
          
          echo "✓ ARM Compute Library setup complete"

      - name: Configure Maven command
        shell: bash
        run: |
          echo "Configuring Maven build command..."
          
          # Base configuration
          LIBND4J_CLASSIFIER="android-arm64"
          
          # Determine modules to build
          if [ "${{ github.event.inputs.libnd4jUrl }}" != '' ]; then
             MODULES=':nd4j-native,:nd4j-native-preset'
             echo "Using pre-built libnd4j from: ${{ github.event.inputs.libnd4jUrl }}"
             echo "LIBND4J_HOME=${{ github.event.inputs.libnd4jUrl }}" >> "$GITHUB_ENV"
          else
             MODULES=':nd4j-native,:nd4j-native-preset,:libnd4j'
             echo "Building libnd4j from source"
          fi
          
          # Base Maven command with improved Android-specific settings
          BASE_COMMAND="mvn ${{ matrix.mvn_ext }} \
            -Dlibnd4j.generate.flatc=ON \
            -Posx-aarch64-protoc \
            -pl ${MODULES} \
            -Pcpu \
            -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} \
            -Dhttp.keepAlive=false \
            -Dmaven.wagon.http.pool=false \
            -Dmaven.wagon.http.retryHandler.count=3 \
            -Possrh \
            -DskipTestResourceEnforcement=true \
            -Dmaven.javadoc.failOnError=false \
            -Djavacpp.platform=${LIBND4J_CLASSIFIER} \
            -Djavacpp.platform.android=true \
            --also-make \
            --batch-mode \
            deploy \
            -DskipTests"
          
          # Add helper-specific extensions
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
             HELPER_FLAGS="-Dlibnd4j.helper=${{ matrix.helper }} \
               -Djavacpp.platform.extension=-${{ matrix.helper }} \
               -Dlibnd4j.classifier=${LIBND4J_CLASSIFIER}-${{ matrix.helper }}"
             echo "Enabling ARM Compute Library helper"
          else
             HELPER_FLAGS=""
             echo "Building without helper libraries"
          fi
          
          # Combine command
          FINAL_COMMAND="${BASE_COMMAND} ${HELPER_FLAGS}"
          
          # Set environment variables
          echo "LIBND4J_CLASSIFIER=${LIBND4J_CLASSIFIER}" >> $GITHUB_ENV
          echo "MAVEN_COMMAND=${FINAL_COMMAND}" >> $GITHUB_ENV
          
          echo "Maven command configured successfully"

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event.inputs.debug_enabled == 'true' }}
        with:
          limit-access-to-actor: true

      - name: Build with Maven
        shell: bash
        env:
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
          RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
          SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
          RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
          MAVEN_USERNAME: ${{ secrets.CENTRAL_SONATYPE_TOKEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.CENTRAL_SONATYPE_TOKEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          MAVEN_OPTS: -Xmx2g
          PROTO_EXEC: /opt/protobuf/bin/protoc
        run: |
          echo "Starting Maven build for Android ARM64..."
          echo "============================================"
          
          # Setup PATH
          export PATH="/opt/protobuf/bin:/opt/cmake/bin:$PATH"
          
          # Setup LD_LIBRARY_PATH
          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${OPENBLAS_PATH}"
          
          # Verify Android environment
          echo "Android Environment Verification:"
          echo "  ANDROID_NDK_ROOT: ${ANDROID_NDK_ROOT}"
          echo "  ANDROID_VERSION: ${ANDROID_VERSION}"
          echo "  ANDROID_NATIVE_API_LEVEL: ${ANDROID_NATIVE_API_LEVEL}"
          
          # Verify NDK
          if [ -f "${ANDROID_NDK_ROOT}/ndk-build" ]; then
            echo "  ✓ NDK verified: ${ANDROID_NDK_ROOT}"
          else
            echo "  ✗ NDK verification failed"
            exit 1
          fi
          
          # Verify OpenBLAS
          if [ -d "${OPENBLAS_PATH}" ]; then
            echo "  ✓ OpenBLAS verified: ${OPENBLAS_PATH}"
            echo "    OpenBLAS libraries:"
            ls -la "${OPENBLAS_PATH}/"*.so* 2>/dev/null || echo "    No .so files found"
          else
            echo "  ✗ OpenBLAS verification failed"
            exit 1
          fi
          
          # Verify ARM Compute if enabled
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
            if [ -d "${ARMCOMPUTE_ROOT}" ]; then
              echo "  ✓ ARM Compute verified: ${ARMCOMPUTE_ROOT}"
            else
              echo "  ✗ ARM Compute verification failed"
              exit 1
            fi
          fi
          
          # Print build environment info
          echo ""
          echo "Build Environment:"
          echo "  Java version: $(java -version 2>&1 | head -1)"
          echo "  Maven version: $(mvn -version | head -1)"
          echo "  Build threads: ${{ github.event.inputs.buildThreads }}"
          echo "  Helper: ${{ matrix.helper }}"
          echo "  API Level: ${{ matrix.android_api_level }}"
          echo ""
          
          # Verify toolchain file exists
          TOOLCHAIN_FILE="${GITHUB_WORKSPACE}/cmake/android-arm64.cmake"
          if [ ! -f "${TOOLCHAIN_FILE}" ]; then
            echo "ERROR: Android toolchain file not found: ${TOOLCHAIN_FILE}"
            echo "Available cmake files:"
            ls -la "${GITHUB_WORKSPACE}/cmake/" || echo "cmake directory not found"
            exit 1
          else
            echo "  ✓ Toolchain file found: ${TOOLCHAIN_FILE}"
          fi
          
          # Execute Maven build
          echo ""
          echo "Executing Maven build..."
          echo "Command: ${MAVEN_COMMAND}"
          echo "============================================"
          
          # Set error handling
          set -e
          
          if [ "${PERFORM_RELEASE}" == "1" ]; then
              echo "Performing release build..."
              bash "${GITHUB_WORKSPACE}/release-specified-component.sh" \
                "${RELEASE_VERSION}" \
                "${SNAPSHOT_VERSION}" \
                "${RELEASE_REPO_ID}" \
                "${MAVEN_COMMAND}"
          else
              echo "Performing snapshot build..."
              eval "${MAVEN_COMMAND}"
          fi
          
          echo ""
          echo "✓ Maven build completed successfully"

      - name: Cleanup resources
        if: always()
        shell: bash
        run: |
          echo "Cleaning up resources..."
          
          # Remove swap file
          sudo swapoff /swapfile 2>/dev/null || true
          sudo rm -f /swapfile 2>/dev/null || true
          echo "✓ Swap file removed"
          
          # Clean up temporary build files (but keep NDK cache)
          rm -rf /tmp/maven-* 2>/dev/null || true
          echo "✓ Temporary files cleaned"
          
          # Show disk usage
          echo "Final disk usage:"
          df -h
          
          echo "✓ Cleanup completed"

