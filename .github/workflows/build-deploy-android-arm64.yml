on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 2

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: central

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:

      runsOn:
        description: 'System to run on'
        required: false
        default: ubuntu-22.04-arm

      debug_enabled:
        description: 'Enable debug session'
        required: false
        default: 'false'

jobs:
  android-arm64:
    strategy:
      fail-fast: false
      matrix:
        helper: [armcompute, ""]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
          - release_version: ${{ github.event.inputs.releaseVersion }}
          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
          - server_id: ${{ github.event.inputs.serverId }}
          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
          - build_threads: ${{ github.event.inputs.buildThreads }}
    runs-on: ${{ github.event.inputs.runsOn }}
    timeout-minutes: 720
    steps:
      - name: Clean workspace
        uses: AutoModality/action-clean@v1

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Free Disk Space (Initial)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Cache protobuf install
        uses: actions/cache@v4
        id: cache-protobuf-arm
        with:
          path: /opt/protobuf
          key: ${{ runner.os }}-protobuf-arm-v1

      - name: Install protobuf
        uses: ./.github/actions/install-protobuf-linux
        if: steps.cache-protobuf-arm.outputs.cache-hit != 'true'

      - name: Cache CMake install
        uses: actions/cache@v4
        id: cache-cmake
        with:
          path: /opt/cmake
          key: ${{ runner.os }}-cmake-v1

      - name: Install CMake
        uses: ./.github/actions/install-cmake-linux
        if: steps.cache-cmake.outputs.cache-hit != 'true'

      - name: Install system dependencies
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            ninja-build \
            build-essential \
            crossbuild-essential-arm64 \
            clang \
            lld \
            llvm-dev \
            llvm-tools

      - name: Set up Java for publishing
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id: ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven'

      - name: Cache Official Android NDK
        uses: actions/cache@v4
        id: cache-ndk
        with:
          path: ${{ github.workspace }}/android-ndk-r27c
          key: android-ndk-r27c-hybrid-v1

      - name: Download and Setup Hybrid Android NDK
        shell: bash
        run: |
          NDK_HOME="${GITHUB_WORKSPACE}/android-ndk-r27c"
          
          # Download official NDK if not cached
          if [ ! -d "${NDK_HOME}" ]; then
            echo "Downloading official Android NDK r27c..."
            cd "${GITHUB_WORKSPACE}"
            wget --progress=dot:giga "https://dl.google.com/android/repository/android-ndk-r27c-linux.zip"
            unzip -q "android-ndk-r27c-linux.zip"
            rm "android-ndk-r27c-linux.zip"
          fi
          
          NDK_PREBUILT_DIR="${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64"
          
          # Create hybrid NDK by replacing x86_64 binaries with native ARM64 versions
          if [ ! -f "${NDK_PREBUILT_DIR}/bin/clang.hybrid_created" ]; then
            echo "Creating hybrid NDK with native ARM64 toolchain..."
          
            # Backup original binaries
            if [ ! -d "${NDK_PREBUILT_DIR}/bin.original" ]; then
              cp -r "${NDK_PREBUILT_DIR}/bin" "${NDK_PREBUILT_DIR}/bin.original"
            fi
          
            # Replace core binaries with system versions (native ARM64)
            cp /usr/bin/clang "${NDK_PREBUILT_DIR}/bin/clang"
            cp /usr/bin/clang++ "${NDK_PREBUILT_DIR}/bin/clang++"
          
            # Replace LLVM tools
            for tool in lld llvm-ar llvm-ranlib llvm-strip llvm-objcopy llvm-objdump; do
              if which "$tool" >/dev/null 2>&1; then
                cp "/usr/bin/$tool" "${NDK_PREBUILT_DIR}/bin/"
              fi
            done
          
            # Create wrapper scripts for Android cross-compilation
            cat > "${NDK_PREBUILT_DIR}/bin/aarch64-linux-android21-clang" << 'EOF'
          #!/bin/bash
          exec "$(dirname "$0")/clang" --target=aarch64-linux-android21 --sysroot="$(dirname "$0")/../sysroot" "$@"
          EOF
          
            cat > "${NDK_PREBUILT_DIR}/bin/aarch64-linux-android21-clang++" << 'EOF'
          #!/bin/bash
          exec "$(dirname "$0")/clang++" --target=aarch64-linux-android21 --sysroot="$(dirname "$0")/../sysroot" "$@"
          EOF
          
            chmod +x "${NDK_PREBUILT_DIR}/bin/aarch64-linux-android21-clang"
            chmod +x "${NDK_PREBUILT_DIR}/bin/aarch64-linux-android21-clang++"
          
            # Mark as hybrid created
            touch "${NDK_PREBUILT_DIR}/bin/clang.hybrid_created"
          
            echo "Hybrid NDK created successfully"
          else
            echo "Using cached hybrid NDK"
          fi
          
          # Set environment variables
          echo "ANDROID_NDK_ROOT=${NDK_HOME}" >> $GITHUB_ENV
          echo "ANDROID_NDK=${NDK_HOME}" >> $GITHUB_ENV
          echo "ANDROID_TOOLCHAIN_BIN=${NDK_PREBUILT_DIR}/bin" >> $GITHUB_ENV
          echo "ANDROID_SYSROOT=${NDK_PREBUILT_DIR}/sysroot" >> $GITHUB_ENV

      - name: Test Hybrid NDK
        shell: bash
        run: |
          echo "=== Testing Hybrid NDK ==="
          
          # Test basic functionality
          echo "Testing clang version:"
          "${ANDROID_TOOLCHAIN_BIN}/clang" --version | head -1
          
          echo ""
          echo "Testing Android cross-compilation:"
          cat > test_android.cpp << 'EOF'
          #include <iostream>
          int main() {
              std::cout << "Hello from hybrid NDK!" << std::endl;
              return 0;
          }
          EOF
          
          if "${ANDROID_TOOLCHAIN_BIN}/aarch64-linux-android21-clang++" \
             -o test_android test_android.cpp 2>/dev/null; then
            echo "✓ Android cross-compilation successful"
            file test_android
          else
            echo "✗ Android cross-compilation failed"
            exit 1
          fi
          
          rm -f test_android.cpp test_android

      - name: Free Disk Space (Before Build)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: false
          dotnet: false
          haskell: false
          large-packages: false
          docker-images: false
          swap-storage: false

      - name: Setup OpenBLAS
        shell: bash
        run: |
          echo "Setting up OpenBLAS for Android ARM64..."
          OPENBLAS_JAR="openblas-0.3.19-1.5.7-android-arm64.jar"
          OPENBLAS_HOME="${GITHUB_WORKSPACE}/openblas_home"
          OPENBLAS_DIR="${OPENBLAS_HOME}/lib/arm64-v8a"
          
          mkdir -p "${OPENBLAS_HOME}"
          cd "${OPENBLAS_HOME}"
          
          wget -q "https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.19-1.5.7/${OPENBLAS_JAR}"
          unzip -q "${OPENBLAS_JAR}"
          
          if [ -f "${OPENBLAS_DIR}/libopenblas.so" ] && [ ! -f "${OPENBLAS_DIR}/libopenblas.so.0" ]; then
            ln -s "${OPENBLAS_DIR}/libopenblas.so" "${OPENBLAS_DIR}/libopenblas.so.0"
          fi
          
          echo "OPENBLAS_PATH=${OPENBLAS_DIR}" >> "$GITHUB_ENV"
          echo "OPENBLAS_HOME=${OPENBLAS_HOME}" >> "$GITHUB_ENV"

      - name: Setup ARM Compute Library
        if: matrix.helper == 'armcompute'
        shell: bash
        run: |
          echo "Setting up ARM Compute Library for Android ARM64..."
          ARMCOMPUTE_VERSION="v25.04"
          ARMCOMPUTE_HOME="${GITHUB_WORKSPACE}/armcompute_home"
          ARMCOMPUTE_PACKAGE="arm_compute-${ARMCOMPUTE_VERSION}-android-aarch64-cpu-bin"
          
          mkdir -p "${ARMCOMPUTE_HOME}"
          cd "${ARMCOMPUTE_HOME}"
          
          wget -q "https://github.com/ARM-software/ComputeLibrary/releases/download/${ARMCOMPUTE_VERSION}/${ARMCOMPUTE_PACKAGE}.tar.gz"
          tar -xzf "${ARMCOMPUTE_PACKAGE}.tar.gz"
          
          ARMCOMPUTE_ROOT="${ARMCOMPUTE_HOME}/${ARMCOMPUTE_PACKAGE}"
          echo "ARMCOMPUTE_ROOT=${ARMCOMPUTE_ROOT}" >> "$GITHUB_ENV"
          echo "ARMCOMPUTE_HOME=${ARMCOMPUTE_HOME}" >> "$GITHUB_ENV"

      - name: Configure Maven Build Command
        shell: bash
        run: |
          LIBND4J_CLASSIFIER="android-arm64"
          
          if [ "${{ github.event.inputs.libnd4jUrl }}" != '' ]; then
             MODULES=':nd4j-native,:nd4j-native-preset'
          else
             MODULES=':nd4j-native,:nd4j-native-preset,:libnd4j'
          fi
          
          CMAKE_ARGS="-DCMAKE_TOOLCHAIN_FILE=cmake/android-arm64.cmake \
            -G Ninja \
            -DSD_ANDROID_BUILD=true \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -DANDROID_NDK=${ANDROID_NDK} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja \
            -DBLAS_LIBRARIES=${OPENBLAS_PATH}/libopenblas.so \
            -DLAPACK_LIBRARIES=${OPENBLAS_PATH}/libopenblas.so"
          
          BASE_COMMAND="mvn ${{ matrix.mvn_ext }} \
            -Dlibnd4j.generate.flatc=ON \
            --no-transfer-progress \
            -Posx-aarch64-protoc \
            -pl ${MODULES} \
            -Pcpu \
            -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} \
            -Dhttp.keepAlive=false \
            -Dmaven.wagon.http.pool=false \
            -Dmaven.wagon.http.retryHandler.count=3 \
            -Possrh \
            -DskipTestResourceEnforcement=true \
            -Dmaven.javadoc.failOnError=false \
            -Djavacpp.platform=${LIBND4J_CLASSIFIER} \
            -Dlibnd4j.cmake=\"${CMAKE_ARGS}\" \
            --also-make \
            --batch-mode \
            deploy \
            -DskipTests"
          
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
             HELPER_FLAGS="-Dlibnd4j.helper=${{ matrix.helper }} \
               -Djavacpp.platform.extension=-${{ matrix.helper }} \
               -Dlibnd4j.classifier=${LIBND4J_CLASSIFIER}-${{ matrix.helper }}"
          else
             HELPER_FLAGS=""
          fi
          
          FINAL_COMMAND="${BASE_COMMAND} ${HELPER_FLAGS}"
          
          echo "LIBND4J_CLASSIFIER=${LIBND4J_CLASSIFIER}" >> $GITHUB_ENV
          echo "MAVEN_COMMAND=${FINAL_COMMAND}" >> $GITHUB_ENV

      - name: Debug Hybrid NDK Setup
        shell: bash
        run: |
          echo "=== Hybrid NDK Setup Debug Information ==="
          echo "NDK: ${ANDROID_NDK}"
          echo "Toolchain bin: ${ANDROID_TOOLCHAIN_BIN}"
          echo "Sysroot: ${ANDROID_SYSROOT}"
          echo "CMake toolchain: cmake/android-arm64.cmake"
          echo ""
          
          echo "Hybrid NDK verification:"
          echo "Original vs current clang:"
          if [ -f "${ANDROID_TOOLCHAIN_BIN}/../bin.original/clang" ]; then
            echo "Original: $(file "${ANDROID_TOOLCHAIN_BIN}/../bin.original/clang")"
          fi
          echo "Current:  $(file "${ANDROID_TOOLCHAIN_BIN}/clang")"
          echo ""
          
          echo "Compiler functionality test:"
          if "${ANDROID_TOOLCHAIN_BIN}/clang" --version >/dev/null 2>&1; then
            echo "✓ Clang runs successfully"
            "${ANDROID_TOOLCHAIN_BIN}/clang" --version | head -1
          else
            echo "✗ Clang execution failed"
          fi
          
          echo ""
          echo "Android cross-compilation test:"
          echo 'int main() { return 42; }' > quick_test.c
          if "${ANDROID_TOOLCHAIN_BIN}/clang" \
             --target=aarch64-linux-android21 \
             --sysroot="${ANDROID_SYSROOT}" \
             -o quick_test quick_test.c 2>/dev/null; then
            echo "✓ Android cross-compilation works"
            file quick_test
          else
            echo "✗ Android cross-compilation failed"
          fi
          rm -f quick_test.c quick_test
          
          echo ""
          echo "Available LLVM tools in hybrid NDK:"
          ls -la "${ANDROID_TOOLCHAIN_BIN}/" | grep -E "(clang|llvm|lld)" || echo "No LLVM tools found"
          
          echo ""
          echo "NDK wrapper scripts status:"
          for wrapper in aarch64-linux-android21-clang aarch64-linux-android21-clang++; do
            if [ -f "${ANDROID_TOOLCHAIN_BIN}/${wrapper}" ]; then
              echo "✓ ${wrapper} exists"
            else
              echo "✗ ${wrapper} missing"
            fi
          done

      - name: Build with Maven (Hybrid NDK)
        shell: bash
        env:
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
          RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
          SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
          RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
          MAVEN_USERNAME: ${{ secrets.CENTRAL_SONATYPE_TOKEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.CENTRAL_SONATYPE_TOKEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          MAVEN_OPTS: -Xmx3g
          PROTO_EXEC: /opt/protobuf/bin/protoc
        run: |
          echo "Starting Maven build with hybrid ARM64 Android NDK..."
          
          export PATH="/opt/protobuf/bin:/opt/cmake/bin:${ANDROID_TOOLCHAIN_BIN}:/usr/bin:$PATH"
          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${OPENBLAS_PATH}"
          
          echo "=== Build Environment ==="
          which java
          export JAVA_HOME="${JAVA_HOME_11_X64:-$JAVA_HOME_11_arm64}" 
          echo "JAVA_HOME SET TO ${JAVA_HOME}"
          echo "Java: $(java -version 2>&1 | head -1)"
          echo "Maven: $(mvn -version | head -1)"
          echo "CMake: $(cmake --version | head -1)"
          echo "Ninja: $(ninja --version)"
          echo "Protoc: $(protoc --version)"
          echo "Host arch: $(uname -m)"
          echo "NDK: ${ANDROID_NDK_ROOT}"
          echo "OpenBLAS: ${OPENBLAS_PATH}"
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
            echo "ARM Compute: ${ARMCOMPUTE_ROOT}"
          fi
          echo "Build threads: ${{ github.event.inputs.buildThreads }}"
          echo "Platform: ${LIBND4J_CLASSIFIER}"
          echo ""
          
          # Final verification of hybrid toolchain
          if "${ANDROID_TOOLCHAIN_BIN}/clang" --version >/dev/null 2>&1; then
            echo "✓ Hybrid ARM64 Android toolchain verified"
            echo "Clang version: $("${ANDROID_TOOLCHAIN_BIN}/clang" --version | head -1)"
          else
            echo "✗ WARNING: Hybrid toolchain verification failed"
            echo "Available compilers in ${ANDROID_TOOLCHAIN_BIN}:"
            ls -la "${ANDROID_TOOLCHAIN_BIN}/" | grep clang || echo "No clang found"
          fi
          
          echo ""
          echo "=== Executing Maven Build ==="
          
          if [ "${PERFORM_RELEASE}" == "1" ]; then
              bash "${GITHUB_WORKSPACE}/release-specified-component.sh" \
                "${RELEASE_VERSION}" \
                "${SNAPSHOT_VERSION}" \
                "${RELEASE_REPO_ID}" \
                "${MAVEN_COMMAND}"
          else
              eval "${MAVEN_COMMAND}"
          fi
          
          echo "Maven build completed successfully"

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event.inputs.debug_enabled == 'true' }}
        with:
          limit-access-to-actor: true

      - name: Verify Build Artifacts
        if: always()
        shell: bash
        run: |
          echo "=== Build Artifact Verification ==="
          
          if [ -d "nd4j/nd4j-backends/nd4j-backend-impls/nd4j-native/target" ]; then
            echo "Found nd4j-native target directory"
            find nd4j/nd4j-backends/nd4j-backend-impls/nd4j-native/target -name "*.jar" -o -name "*.so" | head -10
          fi
          
          if [ -d "libnd4j" ]; then
            echo "Checking libnd4j build artifacts..."
            find libnd4j -name "*.so" -o -name "*.a" | grep -E "(arm64|aarch64|android)" | head -10
          fi
          
          echo ""
          echo "Searching for Android ARM64 specific artifacts:"
          find . -name "*android*arm64*" -o -name "*arm64*android*" 2>/dev/null | head -10

      - name: Cleanup Build Artifacts
        if: always()
        shell: bash
        run: |
          echo "Cleaning up temporary files..."
          rm -rf /tmp/maven-* 2>/dev/null || true
          
          echo "Cleanup completed"