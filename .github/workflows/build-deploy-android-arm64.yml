on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 2

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: central

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:

      runsOn:
        description: 'System to run on'
        required: false
        default: ubuntu-22.04-arm

      debug_enabled:
        description: 'Enable debug session'
        required: false
        default: 'false'

jobs:
  android-arm64:
    strategy:
      fail-fast: false
      matrix:
        helper: [armcompute, ""]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
          - release_version: ${{ github.event.inputs.releaseVersion }}
          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
          - server_id: ${{ github.event.inputs.serverId }}
          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
          - build_threads: ${{ github.event.inputs.buildThreads }}
    runs-on: ${{ github.event.inputs.runsOn }}
    timeout-minutes: 720
    steps:
      - name: Clean workspace
        uses: AutoModality/action-clean@v1

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Free Disk Space (Initial)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Cache protobuf install
        uses: actions/cache@v4
        id: cache-protobuf-arm
        with:
          path: /opt/protobuf
          key: ${{ runner.os }}-protobuf-arm-v1

      - name: Install protobuf
        uses: ./.github/actions/install-protobuf-linux
        if: steps.cache-protobuf-arm.outputs.cache-hit != 'true'

      - name: Cache CMake install
        uses: actions/cache@v4
        id: cache-cmake
        with:
          path: /opt/cmake
          key: ${{ runner.os }}-cmake-v1

      - name: Install CMake
        uses: ./.github/actions/install-cmake-linux
        if: steps.cache-cmake.outputs.cache-hit != 'true'

      - name: Install system dependencies
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            ninja-build \
            build-essential \
            clang \
            lld \
            llvm-dev

      - name: Set up Java for publishing
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id: ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven'

      - name: Cache Official Android NDK
        uses: actions/cache@v4
        id: cache-ndk
        with:
          path: ${{ github.workspace }}/android-ndk-r27c
          key: android-ndk-r27c-hybrid-v1

      - name: Download and Setup Hybrid Android NDK
        shell: bash
        run: |
          NDK_HOME="${GITHUB_WORKSPACE}/android-ndk-r27c"
          
          if [ ! -d "${NDK_HOME}" ]; then
            echo "Downloading official Android NDK r27c..."
            cd "${GITHUB_WORKSPACE}"
            wget --progress=dot:giga "https://dl.google.com/android/repository/android-ndk-r27c-linux.zip"
            unzip -q "android-ndk-r27c-linux.zip"
            rm "android-ndk-r27c-linux.zip"
          fi
          
          NDK_PREBUILT_DIR="${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64"
          
          if [ ! -f "${NDK_PREBUILT_DIR}/bin/clang.hybrid_created" ]; then
            echo "Creating hybrid NDK - keeping original wrapper scripts but replacing clang binaries..."
          
            # Backup original binaries
            if [ ! -d "${NDK_PREBUILT_DIR}/bin.original" ]; then
              cp -r "${NDK_PREBUILT_DIR}/bin" "${NDK_PREBUILT_DIR}/bin.original"
            fi
          
            # Replace only the underlying clang binaries that the wrapper scripts call
            # Keep ALL original NDK wrapper scripts - they know how to find Android libraries
            cp /usr/bin/clang "${NDK_PREBUILT_DIR}/bin/clang"
            cp /usr/bin/clang++ "${NDK_PREBUILT_DIR}/bin/clang++"
          
            # Replace LLVM tools if available
            for tool in lld llvm-ar llvm-ranlib llvm-strip llvm-objcopy llvm-objdump; do
              if which "$tool" >/dev/null 2>&1; then
                cp "/usr/bin/$tool" "${NDK_PREBUILT_DIR}/bin/"
              fi
            done
          
            # Don't modify the wrapper scripts - they contain NDK-specific logic for finding libraries
            # The original 201-byte wrapper scripts know how to set up Android library paths correctlyNDK_PREBUILT_DIR}/bin/${wrapper}" "${NDK_PREBUILT_DIR}/bin/${wrapper}.original"
          
                # Create new wrapper that adds proper library paths
                cat > "${NDK_PREBUILT_DIR}/bin/${wrapper}" << 'EOF'
          #!/bin/bash
          # Hybrid NDK wrapper for aarch64-linux-android21-clang
          SCRIPT_DIR="$(dirname "$0")"
          NDK_ROOT="$(dirname "$(dirname "$(dirname "$(dirname "$SCRIPT_DIR")")")")"
          
          # Add Android runtime library paths
          ANDROID_LIBS="${SCRIPT_DIR}/../lib64"
          GCC_LIBS="${SCRIPT_DIR}/../lib/gcc/aarch64-linux-android/4.9.x"
          
          # Determine if this is clang or clang++
          if [[ "$0" == *"clang++" ]]; then
            COMPILER="${SCRIPT_DIR}/clang++"
          else
            COMPILER="${SCRIPT_DIR}/clang"
          fi
          
          exec "${COMPILER}" \
            --target=aarch64-linux-android21 \
            --sysroot="${SCRIPT_DIR}/../sysroot" \
            -B"${SCRIPT_DIR}" \
            -L"${ANDROID_LIBS}" \
            $([ -d "${GCC_LIBS}" ] && echo "-L${GCC_LIBS}") \
            "$@"
          EOF
                chmod +x "${NDK_PREBUILT_DIR}/bin/${wrapper}"
              fi
            done
          
            touch "${NDK_PREBUILT_DIR}/bin/clang.hybrid_created"
            echo "Hybrid NDK created - fixed wrapper scripts for system clang"
          else
            echo "Using cached hybrid NDK"
          fi
          
          echo "ANDROID_NDK_ROOT=${NDK_HOME}" >> $GITHUB_ENV
          echo "ANDROID_NDK=${NDK_HOME}" >> $GITHUB_ENV
          echo "ANDROID_TOOLCHAIN_BIN=${NDK_PREBUILT_DIR}/bin" >> $GITHUB_ENV
          echo "ANDROID_SYSROOT=${NDK_PREBUILT_DIR}/sysroot" >> $GITHUB_ENV

      - name: Free Disk Space (Before Build)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: false
          dotnet: false
          haskell: false
          large-packages: false
          docker-images: false
          swap-storage: false

      - name: Setup OpenBLAS
        shell: bash
        run: |
          echo "Setting up OpenBLAS for Android ARM64..."
          OPENBLAS_JAR="openblas-0.3.19-1.5.7-android-arm64.jar"
          OPENBLAS_HOME="${GITHUB_WORKSPACE}/openblas_home"
          OPENBLAS_DIR="${OPENBLAS_HOME}/lib/arm64-v8a"
          
          mkdir -p "${OPENBLAS_HOME}"
          cd "${OPENBLAS_HOME}"
          
          wget -q "https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.19-1.5.7/${OPENBLAS_JAR}"
          unzip -q "${OPENBLAS_JAR}"
          
          if [ -f "${OPENBLAS_DIR}/libopenblas.so" ] && [ ! -f "${OPENBLAS_DIR}/libopenblas.so.0" ]; then
            ln -s "${OPENBLAS_DIR}/libopenblas.so" "${OPENBLAS_DIR}/libopenblas.so.0"
          fi
          
          echo "OPENBLAS_PATH=${OPENBLAS_DIR}" >> "$GITHUB_ENV"
          echo "OPENBLAS_HOME=${OPENBLAS_HOME}" >> "$GITHUB_ENV"

      - name: Setup ARM Compute Library
        if: matrix.helper == 'armcompute'
        shell: bash
        run: |
          echo "Setting up ARM Compute Library for Android ARM64..."
          ARMCOMPUTE_VERSION="v25.04"
          ARMCOMPUTE_HOME="${GITHUB_WORKSPACE}/armcompute_home"
          ARMCOMPUTE_PACKAGE="arm_compute-${ARMCOMPUTE_VERSION}-android-aarch64-cpu-bin"
          
          mkdir -p "${ARMCOMPUTE_HOME}"
          cd "${ARMCOMPUTE_HOME}"
          
          wget -q "https://github.com/ARM-software/ComputeLibrary/releases/download/${ARMCOMPUTE_VERSION}/${ARMCOMPUTE_PACKAGE}.tar.gz"
          tar -xzf "${ARMCOMPUTE_PACKAGE}.tar.gz"
          
          ARMCOMPUTE_ROOT="${ARMCOMPUTE_HOME}/${ARMCOMPUTE_PACKAGE}"
          echo "ARMCOMPUTE_ROOT=${ARMCOMPUTE_ROOT}" >> "$GITHUB_ENV"
          echo "ARMCOMPUTE_HOME=${ARMCOMPUTE_HOME}" >> "$GITHUB_ENV"

      - name: Build with Maven (Hybrid NDK)
        shell: bash
        env:
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
          RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
          SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
          RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
          MAVEN_USERNAME: ${{ secrets.CENTRAL_SONATYPE_TOKEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.CENTRAL_SONATYPE_TOKEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          MAVEN_OPTS: -Xmx3g
          PROTO_EXEC: /opt/protobuf/bin/protoc
        run: |
          export PATH="/opt/protobuf/bin:/opt/cmake/bin:${ANDROID_TOOLCHAIN_BIN}:/usr/bin:$PATH"
          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${OPENBLAS_PATH}"
          export JAVA_HOME="${JAVA_HOME_11_X64:-$JAVA_HOME_11_arm64}" 
          
          LIBND4J_CLASSIFIER="android-arm64"
          
          if [ "${{ github.event.inputs.libnd4jUrl }}" != '' ]; then
             MODULES=':nd4j-native,:nd4j-native-preset'
          else
             MODULES=':nd4j-native,:nd4j-native-preset,:libnd4j'
          fi
          
          CMAKE_ARGS="-DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/libnd4j/cmake/android-arm64.cmake \
            -G Ninja \
            -DSD_ANDROID_BUILD=true \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -DANDROID_NDK=${ANDROID_NDK} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja \
            -DBLAS_LIBRARIES=${OPENBLAS_PATH}/libopenblas.so \
            -DLAPACK_LIBRARIES=${OPENBLAS_PATH}/libopenblas.so"
          
          BASE_COMMAND="mvn ${{ matrix.mvn_ext }} \
            -Dlibnd4j.generate.flatc=ON \
            --no-transfer-progress \
            -Posx-aarch64-protoc \
            -pl ${MODULES} \
            -Pcpu \
            -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} \
            -Dhttp.keepAlive=false \
            -Dmaven.wagon.http.pool=false \
            -Dmaven.wagon.http.retryHandler.count=3 \
            -Possrh \
            -DskipTestResourceEnforcement=true \
            -Dmaven.javadoc.failOnError=false \
            -Djavacpp.platform=${LIBND4J_CLASSIFIER} \
            -Dlibnd4j.cmake=\"${CMAKE_ARGS}\" \
            --also-make \
            --batch-mode \
            deploy \
            -DskipTests"
          
          if [ "${{ matrix.helper }}" == "armcompute" ]; then
             HELPER_FLAGS="-Dlibnd4j.helper=${{ matrix.helper }} \
               -Djavacpp.platform.extension=-${{ matrix.helper }} \
               -Dlibnd4j.classifier=${LIBND4J_CLASSIFIER}-${{ matrix.helper }}"
          else
             HELPER_FLAGS=""
          fi
          
          MAVEN_COMMAND="${BASE_COMMAND} ${HELPER_FLAGS}"
          
          if [ "${PERFORM_RELEASE}" == "1" ]; then
              bash "${GITHUB_WORKSPACE}/release-specified-component.sh" \
                "${RELEASE_VERSION}" \
                "${SNAPSHOT_VERSION}" \
                "${RELEASE_REPO_ID}" \
                "${MAVEN_COMMAND}"
          else
              eval "${MAVEN_COMMAND}"
          fi

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event.inputs.debug_enabled == 'true' }}
        with:
          limit-access-to-actor: true

      - name: Verify Build Artifacts
        if: always()
        shell: bash
        run: |
          if [ -d "nd4j/nd4j-backends/nd4j-backend-impls/nd4j-native/target" ]; then
            find nd4j/nd4j-backends/nd4j-backend-impls/nd4j-native/target -name "*.jar" -o -name "*.so" | head -10
          fi
          
          if [ -d "libnd4j" ]; then
            find libnd4j -name "*.so" -o -name "*.a" | grep -E "(arm64|aarch64|android)" | head -10
          fi

      - name: Cleanup Build Artifacts
        if: always()
        shell: bash
        run: |
          rm -rf /tmp/maven-* 2>/dev/null || true