on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: '2'
      releaseVersion:
        description: 'Release version target'
        required: false
        default: '1.0.0-M3'
      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: '1.0.0-SNAPSHOT'
      debug_enabled:
        description: 'Enable debug session'
        required: false
        default: 'false'

jobs:
  build-native-android-toolchain:
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 720 # Set a very long timeout, as building LLVM takes hours.

    steps:
      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          path: main_project # Checkout your project to a subdirectory

      - name: Install System Dependencies
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            repo clang bison llvm lld ninja-build cmake git curl wget unzip \
            python3-pip build-essential gcc-aarch64-linux-gnu \
            crossbuild-essential-arm64

      - name: Cache NDK Toolchain Source
        id: cache-llvm-toolchain
        uses: actions/cache@v4
        with:
          path: llvm-toolchain
          key: ${{ runner.os }}-llvm-toolchain-source-v1

      - name: Download NDK Toolchain Source
        if: steps.cache-llvm-toolchain.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p llvm-toolchain
          cd llvm-toolchain
          repo init -u https://android.googlesource.com/platform/manifest -b llvm-toolchain --depth=1
          repo sync -c --no-tags -j$(nproc)

      - name: Build Native ARM64 Toolchain
        shell: bash
        run: |
          # Clone the SnowNF patch repository
          git clone https://github.com/SnowNF/ndk-aarch64-linux.git

          # Apply the patches as per the guide
          echo "Applying SnowNF patches..."
          cd llvm-toolchain/toolchain/llvm_android
          mv patches ../patches.bak
          rm -rf *
          cp -rf ../../../ndk-aarch64-linux/* .
          mv ../patches.bak patches
          cd ../../..

          # Build the native toolchain
          echo "Starting native toolchain build... this will take a very long time."
          cd llvm-toolchain
          python3 toolchain/llvm_android/build.py --no-build windows --skip-tests --single-stage --no-musl

      - name: Assemble Native Hybrid NDK
        id: assemble-ndk
        shell: bash
        run: |
          # 1. Download a standard NDK release
          echo "Downloading standard Android NDK r27c..."
          wget --progress=dot:giga "https://dl.google.com/android/repository/android-ndk-r27c-linux.zip"
          unzip -q "android-ndk-r27c-linux.zip"
          rm "android-ndk-r27c-linux.zip"
          
          # 2. Define NDK path
          NDK_HOME="${GITHUB_WORKSPACE}/android-ndk-r27c"
          NDK_PREBUILT_BIN="${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          NDK_PREBUILT_LIB="${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib"
          
          # 3. Path to our newly built ARM64 tools
          NATIVE_TOOLCHAIN_OUT="${GITHUB_WORKSPACE}/llvm-toolchain/out/stage2"
          
          # 4. Replace x86_64 binaries with our native ARM64 versions
          echo "Replacing NDK binaries with native ARM64 versions..."
          cp -fr ${NATIVE_TOOLCHAIN_OUT}/bin/clang* ${NDK_PREBUILT_BIN}/
          cp -fr ${NATIVE_TOOLCHAIN_OUT}/lib/clang ${NDK_PREBUILT_LIB}/
          
          # Add other tools like lld, llvm-ar etc.
          for tool in lld llvm-ar llvm-ranlib llvm-strip llvm-objcopy llvm-objdump; do
            cp -f "${NATIVE_TOOLCHAIN_OUT}/bin/$tool" "${NDK_PREBUILT_BIN}/"
          done
          
          echo "âœ… Native Hybrid NDK created at ${NDK_HOME}"
          echo "ANDROID_NDK_HOME=${NDK_HOME}" >> $GITHUB_ENV

      - name: Setup Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Project with Native NDK
        shell: bash
        run: |
          # Navigate into your project directory
          cd main_project
          
          export ANDROID_NDK=${ANDROID_NDK_HOME}
          export JAVA_HOME="${JAVA_HOME_11_X64:-$JAVA_HOME_11_arm64}" 
          
          # The toolchain file should now correctly pick up the native compilers
          CMAKE_ARGS="-DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/main_project/libnd4j/cmake/android-arm64.cmake \
            -G Ninja \
            -DSD_ANDROID_BUILD=true \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -DANDROID_NDK=${ANDROID_NDK}"

          mvn install -B -V \
            -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} \
            -Djavacpp.platform=android-arm64 \
            -Dlibnd4j.cmake="${CMAKE_ARGS}" \
            -DskipTests

      - name: Setup tmate session on failure
        if: failure() && github.event.inputs.debug_enabled == 'true'
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true