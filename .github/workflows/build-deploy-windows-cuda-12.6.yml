# Workflow for CUDA 12.6 Windows build with Robust MSVC Installation
on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 4
      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0
      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3
      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT
      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:
      serverId:
        description: 'Server id to publish to'
        required: false
        default: central
      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:
      libnd4jUrl:
        description: 'Whether to download libnd4j using https://github.com/KonduitAI/gh-actions-libnd4j-urls/ for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:
      runsOn:
        description: 'System to run on'
        required: false
        default: windows-2022
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  windows-x86_64-cuda-12-6:
    strategy:
      fail-fast: false
      matrix:
        helper: [ cudnn,"" ]
        extension: [ "" ]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
            experimental: true
            name: Extra maven flags
          - debug_enabled: ${{ github.event.inputs.debug_enabled }}
            experimental: true
            name: Debug enabled
          - runs_on: ${{ github.event.inputs.runsOn }}
            experimental: true
            name: OS to run on
          - libnd4j_file_download: ${{ github.event.inputs.libnd4jUrl }}
            experimental: true
            name: OS to run on
          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
            experimental: true
            name: Whether to deploy to release staging or not
          - release_version: ${{ github.event.inputs.releaseVersion }}
            experimental: true
            name: Release version
          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
            experimental: true
            name: Snapshot version
          - server_id: ${{ github.event.inputs.serverId }}
            experimental: true
            name: Server id
          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
            experimental: true
            name: The release repository to run on
          - mvn_flags: ${{ github.event.inputs.mvnFlags }}
            experimental: true
            name: Extra maven flags to use as part of the build
          - build_threads: ${{ github.event.inputs.buildThreads }}
            experimental: true
            name: The number of threads to build libnd4j with

    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v4

      - name: Free Disk Space (Windows)
        shell: powershell
        run: |
          Write-Host "Initial disk space:"
          Get-PSDrive C | Select-Object Used,Free
          Remove-Item -Path "$env:ProgramData\Microsoft\Windows Defender\Scans\History\*" -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Removed Windows Defender scan history"
          Remove-Item -Path "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Cleared Windows temp folders"
          Remove-Item -Path "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Cleared Windows Update download cache"
          if (Test-Path -Path "C:\npm\cache") {
            Remove-Item -Path "C:\npm\cache\*" -Recurse -Force -ErrorAction SilentlyContinue
            Write-Host "Cleared NPM cache"
          }
          choco cache remove -y -ErrorAction SilentlyContinue
          Write-Host "Cleared Chocolatey cache"
          if (Test-Path -Path "$env:ProgramData\Microsoft\.NET\*.backup") {
            Remove-Item -Path "$env:ProgramData\Microsoft\.NET\*.backup" -Recurse -Force -ErrorAction SilentlyContinue
            Write-Host "Removed .NET backup folders"
          }
          if (Test-Path -Path "$env:LOCALAPPDATA\Microsoft\Azure\*") {
            Remove-Item -Path "$env:LOCALAPPDATA\Microsoft\Azure\*" -Recurse -Force -ErrorAction SilentlyContinue
            Write-Host "Cleared Azure artifacts cache"
          }
          Start-Process -FilePath "dism.exe" -ArgumentList "/online /Cleanup-Image /StartComponentCleanup" -NoNewWindow -Wait -ErrorAction SilentlyContinue
          Write-Host "Optimized Windows Component Store"
          Write-Host "Final disk space:"
          Get-PSDrive C | Select-Object Used,Free

      - name: Setup Robust MSVC Environment
        shell: powershell
        run: |
          Write-Host "=== Starting Robust MSVC Setup Process ==="
          
          # Function to check if VS components are properly installed
          function Test-VSInstallation {
            param([string]$Path)
            if (-not (Test-Path $Path)) { return $false }
            $vcvarsPath = Join-Path $Path "VC\Auxiliary\Build\vcvars64.bat"
            $msvcToolsPath = Join-Path $Path "VC\Tools\MSVC"
            return (Test-Path $vcvarsPath) -and (Test-Path $msvcToolsPath) -and ((Get-ChildItem $msvcToolsPath -Directory).Count -gt 0)
          }
          
          # Function to properly uninstall VS using the installer
          function Uninstall-VSInstallation {
            param([string]$InstallPath)
            Write-Host "Uninstalling VS installation at: $InstallPath"
          
            # Try using vs_installer.exe first
            $installerExe = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
            if (Test-Path $installerExe) {
              Write-Host "Using vs_installer.exe to uninstall..."
              $uninstallArgs = @("uninstall", "--installPath", "`"$InstallPath`"", "--quiet", "--force")
              $process = Start-Process -FilePath $installerExe -ArgumentList $uninstallArgs -Wait -PassThru -NoNewWindow
              Write-Host "Uninstaller exit code: $($process.ExitCode)"
              Start-Sleep -Seconds 15  # Wait for uninstall to complete
            }
          
            # If installer method fails or installer not found, try alternative uninstall
            if (Test-Path $InstallPath) {
              $localUninstaller = Join-Path $InstallPath "vs_installer.exe"
              if (Test-Path $localUninstaller) {
                Write-Host "Using local vs_installer.exe..."
                $process = Start-Process -FilePath $localUninstaller -ArgumentList "uninstall", "--quiet", "--force" -Wait -PassThru -NoNewWindow
                Write-Host "Local uninstaller exit code: $($process.ExitCode)"
                Start-Sleep -Seconds 15
              }
            }
          
            # Force remove remaining files if still present
            if (Test-Path $InstallPath) {
              Write-Host "Force removing remaining files at: $InstallPath"
              Remove-Item -Path $InstallPath -Recurse -Force -ErrorAction SilentlyContinue
            }
          }
          
          # Always perform complete uninstall of existing VS installations
          Write-Host "=== Uninstalling ALL existing Visual Studio installations ==="
          $vsPaths = @(
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools", 
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Community",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise",
            "${env:ProgramFiles}\Microsoft Visual Studio\2019\BuildTools",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools",
            "${env:ProgramFiles}\Microsoft Visual Studio\2019\Community",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community",
            "${env:ProgramFiles}\Microsoft Visual Studio\2019\Enterprise",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Enterprise"
          )
          
          # Stop all VS related processes first
          Write-Host "Stopping Visual Studio related processes..."
          Get-Process | Where-Object {
            $_.ProcessName -like "*vs_*" -or 
            $_.ProcessName -eq "vs_installer" -or 
            $_.ProcessName -eq "VSIXInstaller" -or
            $_.ProcessName -like "*devenv*" -or
            $_.ProcessName -like "*MSBuild*"
          } | Stop-Process -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 10
          
          # Use vswhere to find all installations and uninstall them properly
          $vsWherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (Test-Path $vsWherePath) {
            Write-Host "Using vswhere to find all VS installations..."
            $installations = & $vsWherePath -all -property installationPath
            if ($installations) {
              foreach ($installPath in $installations) {
                if (-not ([string]::IsNullOrWhiteSpace($installPath)) -and (Test-Path $installPath -PathType Container)) {
                  Uninstall-VSInstallation -InstallPath $installPath
                }
              }
            }
          }
          
          # Also check our predefined paths and uninstall any found
          foreach ($path in $vsPaths) {
            if (Test-Path $path) {
              Uninstall-VSInstallation -InstallPath $path
            }
          }
          
          # Clean VS Installer directory completely
          $installerDir = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer"
          if (Test-Path $installerDir) {
            Write-Host "Removing VS Installer directory..."
            Remove-Item -Path $installerDir -Recurse -Force -ErrorAction SilentlyContinue
          }
          
          # Clean the main VS directory if empty
          $vsRootDir = "${env:ProgramFiles(x86)}\Microsoft Visual Studio"
          if (Test-Path $vsRootDir) {
            $remainingItems = Get-ChildItem $vsRootDir -ErrorAction SilentlyContinue
            if (-not $remainingItems) {
              Write-Host "Removing empty VS root directory..."
              Remove-Item -Path $vsRootDir -Force -ErrorAction SilentlyContinue
            }
          }
          
          # Clean registry entries
          Write-Host "Cleaning Visual Studio registry entries..."
          $regPaths = @(
            "HKLM:\SOFTWARE\Microsoft\VisualStudio",
            "HKLM:\SOFTWARE\WOW6432Node\Microsoft\VisualStudio",
            "HKLM:\SOFTWARE\Microsoft\VSCommon",
            "HKLM:\SOFTWARE\WOW6432Node\Microsoft\VSCommon"
          )
          foreach ($regPath in $regPaths) {
            if (Test-Path $regPath) {
              Remove-Item -Path $regPath -Recurse -Force -ErrorAction SilentlyContinue
            }
          }
          
          Write-Host "=== Complete uninstall finished, proceeding with fresh installation ==="
          
          # Now proceed with fresh installation
          Write-Host "=== Installing fresh Visual Studio Build Tools ==="
          
          # Download and install with better error handling
          Write-Host "Downloading Visual Studio Build Tools installer..."
            $installerUrl = "https://aka.ms/vs/17/release.ltsc.17.8/vs_buildtools.exe"
            $installerPath = Join-Path $env:TEMP "vs_buildtools_$(Get-Date -Format 'yyyyMMdd_HHmmss').exe"
          
            try {
              Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath -UseBasicParsing -TimeoutSec 300
              Write-Host "Downloaded installer to: $installerPath"
            } catch {
              Write-Error "Failed to download VS installer: $($_.Exception.Message)"
              exit 1
            }
          
            if (-not (Test-Path $installerPath) -or (Get-Item $installerPath).Length -lt 1MB) {
              Write-Error "Downloaded installer is missing or too small"
              exit 1
            }
          
            Write-Host "Installing Visual Studio Build Tools with comprehensive components..."
            $installArgs = @(
              "--quiet",
              "--wait", 
              "--norestart",
              "--nocache",
              "--installPath", "`"${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools`"",
              "--add", "Microsoft.VisualStudio.Workload.VCTools",
              "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64",
              "--add", "Microsoft.VisualStudio.Component.VC.CMake.Project",
              "--add", "Microsoft.VisualStudio.Component.Windows11SDK.22621",
              "--add", "Microsoft.VisualStudio.Component.VC.ATL",
              "--add", "Microsoft.VisualStudio.Component.VC.ATLMFC",
              "--includeRecommended"
            )
          
            Write-Host "Executing installer with args: $($installArgs -join ' ')"
            $process = Start-Process -FilePath $installerPath -ArgumentList $installArgs -Wait -PassThru -NoNewWindow
          
            Write-Host "Installer completed with exit code: $($process.ExitCode)"
          
            # Clean up installer
            Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          
          # Verify installation succeeded
          Start-Sleep -Seconds 10  # Give filesystem time to settle
          $workingVSPath = "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools"
          
          if (-not (Test-VSInstallation -Path $workingVSPath)) {
            # Try alternative installation path
            $workingVSPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools"
            if (-not (Test-VSInstallation -Path $workingVSPath)) {
              Write-Error "VS installation verification failed. Installation was not successful."
              Write-Host "Checking what was actually installed..."
              $checkPaths = @(
                "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools",
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools"
              )
              foreach ($path in $checkPaths) {
                if (Test-Path $path) {
                  Write-Host "Found path: $path"
                  Write-Host "Contents: $(Get-ChildItem $path -Name -ErrorAction SilentlyContinue)"
                }
              }
              exit 1
            }
          }
          
          Write-Host "VS Build Tools installation verified successfully at: $workingVSPath"
          
          # Set up environment variables
          Write-Host "=== Setting up MSVC Environment ==="
          $vcvarsPath = Join-Path $workingVSPath "VC\Auxiliary\Build\vcvars64.bat"
          $msvcBasePath = Join-Path $workingVSPath "VC\Tools\MSVC"
          
          if (-not (Test-Path $vcvarsPath)) {
            Write-Error "vcvars64.bat not found at: $vcvarsPath"
            exit 1
          }
          
          if (-not (Test-Path $msvcBasePath)) {
            Write-Error "MSVC tools not found at: $msvcBasePath"
            exit 1
          }
          
          # Get latest MSVC version
          $msvcVersions = Get-ChildItem $msvcBasePath -Directory | Sort-Object Name -Descending
          if ($msvcVersions.Count -eq 0) {
            Write-Error "No MSVC versions found in $msvcBasePath"
            exit 1
          }
          
          $latestVersion = $msvcVersions[0]
          $msvcPath = $latestVersion.FullName
          Write-Host "Using MSVC version: $($latestVersion.Name) at: $msvcPath"
          
          # Export VS path for later steps
          echo "VS_INSTALLATION_PATH=$workingVSPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "MSVC_VERSION=$($latestVersion.Name)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCToolsInstallDir=$msvcPath\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          Write-Host "=== MSVC Setup Process Completed Successfully ==="

      - name: Set mvn build command based on matrix
        shell: powershell
        run: |
          if ( "${{ matrix.libnd4j_file_download }}" -ne "" ) {
            $modules=" :nd4j-cuda-12.6-preset,:nd4j-cuda-12.6"
          } elseif ( "${{ matrix.helper }}" -ne "" ) {
            $modules=":nd4j-cuda-12.6-preset,:nd4j-cuda-12.6,libnd4j"
          } elseif ( "${{ matrix.helper }}" -eq "" ) {
            $modules=":nd4j-cuda-12.6-preset,:nd4j-cuda-12.6,libnd4j,:nd4j-cuda-12.6-platform"
          }
          $command="mvn ${{ matrix.mvn_ext }}  -Pcuda -Dlibnd4j.cuda.compile.skip=false -Dlibnd4j.chip=cuda -Pcuda --also-make -pl $modules -Dlibnd4j.compute=`"8.6 9.0`" -Dlibnd4j.cpu.compile.skip=true -Dlibnd4j.buildthreads=${{ matrix.build_threads }} -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3 -Possrh -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} -Djavacpp.platform=windows-x86_64 -Dlibnd4j.platform=windows-x86_64 -Pcuda -Dlibnd4j.chip=cuda deploy -DskipTests"
          if ( "${{ matrix.helper }}" -ne ""  -And "${{ matrix.extension }}" -ne "" ) {
            $mvn_ext=" -Dlibnd4j.chip=cuda -Dlibnd4j.classifier=windows-x86_64-cuda-12.6-${{ matrix.helper }}-${{matrix.extension}} -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.helper }}-${{ matrix.extension }} -Dlibnd4j.helper=${{ matrix.helper }} -Pcuda -Dlibnd4j.chip=cuda deploy -DskipTests"
            $libnd4j_download_file_url="windows-cuda-12.6-${{ matrix.extension }}-${{ matrix.helper }}"
          } elseif ( "${{ matrix.helper }}" -ne "" ) {
            $mvn_ext=" -Dlibnd4j.classifier=windows-x86_64-cuda-12.6-${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.helper }} -Djavacpp.platform.extension=-${{ matrix.helper }} -Djavacpp.platform=windows-x86_64 -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.platform=windows-x86_64 -Pcuda -Dlibnd4j.chip=cuda deploy -DskipTests"
            $libnd4j_download_file_url="windows-cuda-12.6-${{ matrix.helper }}"
          } else {
            $libnd4j_download_file_url="windows-cuda-12.6"
            $mvn_ext=" -Dlibnd4j.classifier=windows-x86_64-cuda-12.6"
          }
          $command2= -join("$($command)","$($mvn_ext)");
          $to_write = -join("COMMAND=","$($command2)");
          if ( "${{ matrix.libnd4j_file_download }}" -ne "") {
            Write-Host "Adding libnd4j download URL to GITHUB_ENV"
            $libnd4j_url_to_write = -join("LIBND4J_FILE_NAME=","$(${{ matrix.libnd4j_file_download }}/$libnd4j_download_file_url)");
            echo $libnd4j_url_to_write | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          Write-Host "Setting command for helper ${{ matrix.helper }} and extension ${{ matrix.extension }} to $($command2) and the libnd4j bootstrap file name to $($libnd4j_download_file_url)"
          echo $command2 | Out-File -FilePath "$env:GITHUB_WORKSPACE/mvn-command.bat" -Encoding utf8
          echo $to_write | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install MSYS2 and dependencies
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base-devel git tar pkg-config unzip p7zip zip autoconf autoconf-archive automake patch
            mingw-w64-x86_64-make mingw-w64-x86_64-gnupg mingw-w64-x86_64-cmake mingw-w64-x86_64-nasm
            mingw-w64-x86_64-toolchain mingw-w64-x86_64-libtool mingw-w64-x86_64-gcc mingw-w64-x86_64-gcc-fortran
            mingw-w64-x86_64-libwinpthread-git mingw-w64-x86_64-SDL mingw-w64-x86_64-ragel

      - name: Cache cuda install
        uses: actions/cache@v4
        id: cache-cuda-126
        with:
          path: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
          key: ${{ matrix.runs_on }}-cuda-12.6-${{ matrix.helper }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ matrix.runs_on }}-cuda-12.6-${{ matrix.helper }}-

      - name: Install CUDA 12.6 (if not cached)
        if: steps.cache-cuda-126.outputs.cache-hit != 'true'
        shell: powershell
        env:
          CUDA_VERSION: "12.6"
        run: |
          Write-Host "Downloading and executing CUDA install script..."
          $scriptUrl = "https://raw.githubusercontent.com/KonduitAI/cuda-install/refs/heads/master/.github/actions/install-cuda-windows/install_cuda_windows.ps1"
          $scriptPath = ".\install_cuda_windows.ps1"
          
          try {
            Invoke-WebRequest -Uri $scriptUrl -OutFile $scriptPath -UseBasicParsing -TimeoutSec 300
            Write-Host "Script downloaded successfully"
            & $scriptPath
          } catch {
            Write-Error "Failed to download or execute CUDA install script: $($_.Exception.Message)"
            exit 1
          }

      - name: Set up Java for publishing to GitHub Packages
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          server-id: ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          cache: 'maven'

      - name: Setup Windows PATH and Compiler Environment
        shell: powershell
        run: |
          Write-Host "=== Setting up Windows PATH and Compiler Environment ==="
          
          # Use the VS path we verified earlier
          $vsPath = $env:VS_INSTALLATION_PATH
          if (-not $vsPath -or -not (Test-Path $vsPath)) {
            Write-Error "VS installation path not found in environment: $vsPath"
            exit 1
          }
          
          Write-Host "Using verified VS installation at: $vsPath"
          Write-Host "Using MSVC version: $env:MSVC_VERSION"
          
          # Setup vcvars environment
          $vcvarsPath = "$vsPath\VC\Auxiliary\Build\vcvars64.bat"
          if (-not (Test-Path $vcvarsPath)) {
            Write-Error "vcvars64.bat not found at $vcvarsPath"
            exit 1
          }
          
          Write-Host "Setting up MSVC environment using: $vcvarsPath"
          
          # Capture environment from vcvars64.bat with better error handling
          $tempBatch = [System.IO.Path]::GetTempFileName() + ".bat"
          $tempOutput = [System.IO.Path]::GetTempFileName() + ".txt"
          
          @"
          @echo off
          call "$vcvarsPath" 2>nul
          if %ERRORLEVEL% NEQ 0 (
            echo VCVARS_ERROR: Failed to initialize Visual Studio environment >&2
            exit /b 1
          )
          set > "$tempOutput"
          "@ | Out-File -FilePath $tempBatch -Encoding ASCII
          
          $result = Start-Process -FilePath "cmd.exe" -ArgumentList "/c", "`"$tempBatch`"" -Wait -PassThru -NoNewWindow
          
          if ($result.ExitCode -ne 0) {
            Write-Error "Failed to initialize Visual Studio environment"
            if (Test-Path $tempOutput) {
              Write-Host "Error output:"
              Get-Content $tempOutput
            }
            exit 1
          }
          
          if (-not (Test-Path $tempOutput)) {
            Write-Error "Environment capture failed - output file not created"
            exit 1
          }
          
          # Parse and set environment variables
          $envVarsSet = 0
          Get-Content $tempOutput | ForEach-Object {
            if ($_ -match '^([^=]+)=(.*)$') {
              $name = $matches[1]
              $value = $matches[2]
              # Skip problematic variables
              if ($name -notmatch '^(TEMP|TMP|RANDOM|PROMPT)') {
                try {
                  [Environment]::SetEnvironmentVariable($name, $value, 'Process')
                  echo "$name=$value" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                  $envVarsSet++
                } catch {
                  Write-Warning "Failed to set environment variable $name"
                }
              }
            }
          }
          
          Write-Host "Successfully set $envVarsSet environment variables from vcvars64.bat"
          
          # Clean up temp files
          Remove-Item $tempBatch, $tempOutput -ErrorAction SilentlyContinue
          
          # Setup CUDA paths
          $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6"
          $msysPath = "C:\msys64\mingw64\bin;C:\msys64\usr\bin"
          
          Write-Host "Setting CUDA paths..."
          echo "CUDA_PATH=$cudaPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDNN_ROOT_DIR=$cudaPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          $newPath = "$msysPath;$cudaPath\bin;$cudaPath\libnvvp;"
          Write-Host "Adding to PATH: $newPath"
          echo $newPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          Write-Host "=== Environment Verification ==="
          Write-Host "VS Installation: $vsPath"
          Write-Host "MSVC Version: $env:MSVC_VERSION"
          Write-Host "VCToolsInstallDir: $env:VCToolsInstallDir"
          Write-Host "CUDA_PATH: $cudaPath"

      - name: Verify Build Environment
        shell: cmd
        run: |
          echo "=== Build Environment Verification ==="
          echo "Checking for required tools..."
          
          where cl.exe >nul 2>&1
          if %ERRORLEVEL% NEQ 0 (
            echo "ERROR: cl.exe not found in PATH"
            echo "Current PATH: %PATH%"
            echo "VCToolsInstallDir: %VCToolsInstallDir%"
            exit /b 1
          )
          
          where nvcc.exe >nul 2>&1
          if %ERRORLEVEL% NEQ 0 (
            echo "ERROR: nvcc.exe not found in PATH" 
            echo "Current PATH: %PATH%"
            echo "CUDA_PATH: %CUDA_PATH%"
            exit /b 1
          )
          
          echo "=== Tool Verification Successful ==="
          echo "Microsoft C++ Compiler:"
          where cl.exe
          cl.exe 2>&1 | findstr "Microsoft"
          
          echo "NVIDIA CUDA Compiler:"
          where nvcc.exe  
          nvcc.exe --version | findstr "release"
          
          echo "Environment Variables:"
          echo "VS_INSTALLATION_PATH: %VS_INSTALLATION_PATH%"
          echo "MSVC_VERSION: %MSVC_VERSION%"
          echo "VCToolsInstallDir: %VCToolsInstallDir%"
          echo "CUDA_PATH: %CUDA_PATH%"
          echo "CUDNN_ROOT_DIR: %CUDNN_ROOT_DIR%"

      - name: Run cuda build
        shell: cmd
        env:
          MAVEN_USERNAME: ${{ secrets.CENTRAL_SONATYPE_TOKEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.CENTRAL_SONATYPE_TOKEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERFORM_RELEASE: ${{ matrix.deploy_to_release_staging }}
          RELEASE_VERSION: ${{ matrix.release_version }}
          SNAPSHOT_VERSION: ${{ matrix.snapshot_version }}
          RELEASE_REPO_ID: ${{ matrix.release_repo_id }}
          PUBLISH_TO: central
          LIBND4J_HOME_SUFFIX: cuda
          HELPER: ${{ matrix.helper }}
          EXTENSION: ${{ matrix.extension }}
          MAVEN_OPTS: "-Xmx2g"
        run: |
          echo "=== CUDA Build Started ==="
          echo "Libnd4j build threads: ${{ matrix.build_threads }}"
          echo "Deploy to release staging: %PERFORM_RELEASE%"
          echo "Release version: %RELEASE_VERSION%"
          echo "Snapshot version: %SNAPSHOT_VERSION%"
          echo "Debug enabled: ${{ matrix.debug_enabled }}"
          echo "Libnd4j URL input: %LIBND4J_FILE_NAME%"
          echo "Maven flags input: ${{ matrix.mvn_flags }}"
          echo "Server id: ${{ matrix.server_id }}"
          echo "Release repo id: %RELEASE_REPO_ID%"
          echo "CUDA Path from env: %CUDA_PATH%"
          echo "CUDNN Root Dir from env: %CUDNN_ROOT_DIR%"
          echo "VCToolsInstallDir: %VCToolsInstallDir%"
          
          echo "=== Build Process ==="
          set MSYSTEM=MINGW64
          echo "Running cuda build..."
          echo "Maven command from file:"
          type "%GITHUB_WORKSPACE%\mvn-command.bat"
          bash ./change-cuda-versions.sh 12.6
          
          Rem Ensure CUDNN_ROOT_DIR is set if needed by cmake; often CUDA_PATH is sufficient
          if not defined CUDNN_ROOT_DIR set CUDNN_ROOT_DIR=%CUDA_PATH%
          
          if "%PERFORM_RELEASE%"=="1" (
             echo "Running release build..."
            bash "%GITHUB_WORKSPACE%/bootstrap-libnd4j-from-url.sh" windows cuda 12.6 "%HELPER%" "%EXTENSION%"
            bash "./release-specified-component.sh" "%RELEASE_VERSION%" "%SNAPSHOT_VERSION%" "%RELEASE_REPO_ID%"
          ) else (
            echo "Running snapshot build..."
            bash "%GITHUB_WORKSPACE%/bootstrap-libnd4j-from-url.sh" windows cuda 12.6 "%HELPER%" "%EXTENSION%"
            call "%GITHUB_WORKSPACE%\mvn-command.bat"
          )