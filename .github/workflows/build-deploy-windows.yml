on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 4

      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M3

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: central

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used)"
        required: false
        default:

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:


      runsOn:
        description: 'OS to run on'
        required: false
        default: windows-2022

      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
jobs:
  windows-x86_64:
    strategy:
      fail-fast: false
      matrix:
        helper: [ onednn,"" ]
        extension: [ avx2,avx512,"" ]
        include:
          - mvn_ext: ${{ github.event.inputs.mvnFlags }}
            experimental: true
            name: Extra maven flags
          - debug_enabled: ${{ github.event.inputs.debug_enabled }}
            experimental: true
            name: Debug enabled

          - runs_on: ${{ github.event.inputs.runsOn }}
            experimental: true
            name: OS to run on

          - libnd4j_file_download: ${{ github.event.inputs.libnd4jUrl }}
            experimental: true
            name: OS to run on

          - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging }}
            experimental: true
            name: Whether to deploy to release staging or not

          - release_version: ${{ github.event.inputs.releaseVersion }}
            experimental: true
            name: Release version

          - snapshot_version: ${{ github.event.inputs.snapshotVersion }}
            experimental: true
            name: Snapshot version

          - server_id: ${{ github.event.inputs.serverId }}
            experimental: true
            name: Server id

          - release_repo_id: ${{ github.event.inputs.releaseRepoId }}
            experimental: true
            name: The release repository to run on

          - mvn_flags: ${{ github.event.inputs.mvnFlags }}
            experimental: true
            name: Extra maven flags to use as part of the build

          - build_threads: ${{ github.event.inputs.buildThreads }}
            experimental: true
            name: The number of threads to build libnd4j with



    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v2
      
      - name: Free Disk Space (Windows)
        shell: powershell
        run: |
          # Show initial disk space
          Write-Host "Initial disk space:"
          Get-PSDrive C | Select-Object Used,Free
          
          # Remove Windows Defender scan history
          Remove-Item -Path "$env:ProgramData\Microsoft\Windows Defender\Scans\History\*" -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Removed Windows Defender scan history"
          
          # Clear Windows temp folders
          Remove-Item -Path "$env:SystemRoot\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Cleared Windows temp folders"
          
          # Clear Windows Update cache safely (without stopping/starting service)
          try {
              Remove-Item -Path "$env:SystemRoot\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
              Write-Host "Cleared Windows Update download cache"
          }
          catch {
              Write-Host "Could not clear Windows Update cache. Continuing..."
          }
          
          # Clean package manager caches
          if (Test-Path -Path "C:\npm\cache") {
              Remove-Item -Path "C:\npm\cache\*" -Recurse -Force -ErrorAction SilentlyContinue
              Write-Host "Cleared NPM cache"
          }
          
          choco cache remove -y -ErrorAction SilentlyContinue
          Write-Host "Cleared Chocolatey cache"
          
          # Remove Docker images if Docker is installed
          try {
              if (Get-Command "docker" -ErrorAction SilentlyContinue) {
                  docker image prune -a -f
                  docker container prune -f
                  docker volume prune -f
                  Write-Host "Pruned Docker resources"
              }
          }
          catch {
              Write-Host "Failed to prune Docker resources. Continuing..."
          }
          
          # Remove .NET SDK/Runtime backup folders
          if (Test-Path -Path "$env:ProgramData\Microsoft\.NET\*.backup") {
              Remove-Item -Path "$env:ProgramData\Microsoft\.NET\*.backup" -Recurse -Force -ErrorAction SilentlyContinue
              Write-Host "Removed .NET backup folders"
          }
          
          # Clear Azure artifacts cache
          if (Test-Path -Path "$env:LOCALAPPDATA\Microsoft\Azure\*") {
              Remove-Item -Path "$env:LOCALAPPDATA\Microsoft\Azure\*" -Recurse -Force -ErrorAction SilentlyContinue
              Write-Host "Cleared Azure artifacts cache"
          }
          
          # Optimize Windows Component Store
          try {
              Start-Process -FilePath "dism.exe" -ArgumentList "/online /Cleanup-Image /StartComponentCleanup" -NoNewWindow -Wait
              Write-Host "Optimized Windows Component Store"
          }
          catch {
              Write-Host "Failed to optimize Windows Component Store. Continuing..."
          }
          
          # Show final disk space
          Write-Host "Final disk space:"
          Get-PSDrive C | Select-Object Used,Free
      
      - name: Set mvn build command based on matrix
        shell: powershell
        run: |
            if ( "${{ matrix.libnd4j_file_download }}" -ne "" ) {
              $modules=" :nd4j-native-preset,:nd4j-native"
            } elseif ( "${{ matrix.helper }}" -ne "" ) {
              $modules=":nd4j-native-preset,:nd4j-native,libnd4j"
            }  elseif ( "${{ matrix.extension }}" -ne "" ) {
              $modules=":nd4j-native-preset,:nd4j-native,libnd4j"
            }  else {
              $modules=":nd4j-native-preset,:nd4j-native,libnd4j,:nd4j-native-platform"
            }
          
            $command="mvn  ${{ matrix.mvn_ext }} -Dlibnd4j.generate.flatc=ON -pl $modules -Pcpu -Dlibnd4j.buildthreads=${{ matrix.build_threads }} -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3   -Possrh -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} -Djavacpp.platform=windows-x86_64   -Dlibnd4j.platform=windows-x86_64 deploy -DskipTests --also-make"
            if ( "${{ matrix.helper }}" -ne ""  -And "${{ matrix.extension }}" -ne "" ) {
               $mvn_ext=" -Dlibnd4j.classifier=windows-x86_64-${{ matrix.helper }}-${{matrix.extension}} -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.helper }}-${{ matrix.extension }}  -Dlibnd4j.helper=${{ matrix.helper }}  -Dlibnd4j.platform=windows-x86_64    deploy -DskipTests"
            } elseif ( "${{ matrix.helper }}" -ne "" ) {
                $mvn_ext=" -Dlibnd4j.classifier=windows-x86_64-${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.helper }} -Djavacpp.platform.extension=-${{ matrix.helper }} -Djavacpp.platform=windows-x86_64  -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.platform=windows-x86_64   deploy -DskipTests"
            }  elseif ( "${{ matrix.extension }}" -ne "" ) {
                  $mvn_ext=" -Dlibnd4j.classifier=windows-x86_64-${{matrix.extension}} -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.extension }}"
            } else {
               $mvn_ext=" -Dlibnd4j.classifier=windows-x86_64"
            }

            if  (  "${{ matrix.libnd4j_file_download }}" -ne  "")  {
                   echo "Adding libnd4j download"
                   $libnd4j_url_to_write = -join("LIBND4J_FILE_NAME=","$(${{ matrix.libnd4j_file_download }}/$libnd4j_download_file_url)");
                   echo $libnd4j_url_to_write  | Out-File -FilePath  "$env:GITHUB_ENV" -Encoding utf8 -Append
            }

            $command2 = -join("$($command)","$($mvn_ext)");
            $to_write = -join("COMMAND=","$($command2)");
            echo "Setting command for helper ${{ matrix.helper }} and extension ${{ matrix.extension }} to $($command2)"
            echo $command2  | Out-File -FilePath   "$env:GITHUB_WORKSPACE/mvn-command.bat" -Encoding utf8 -Append
            echo $to_write  | Out-File -FilePath  "$env:GITHUB_ENV" -Encoding utf8 -Append


      - name: Set up Java for publishing to GitHub Packages
        uses: konduitai/setup-java@main
        with:
          java-version: 11
          distribution: 'temurin'
          server-id:   ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
        


      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: base-devel  git tar pkg-config unzip p7zip zip autoconf autoconf-archive automake patch   mingw-w64-x86_64-make --noconfirm mingw-w64-x86_64-gnupg mingw-w64-x86_64-cmake mingw-w64-x86_64-nasm mingw-w64-x86_64-toolchain mingw-w64-x86_64-libtool mingw-w64-x86_64-gcc  mingw-w64-x86_64-gcc-fortran mingw-w64-x86_64-libwinpthread-git mingw-w64-x86_64-SDL mingw-w64-x86_64-ragel
      - name: Setup windows path
        shell: powershell
        run: echo "C:\msys64\mingw64\bin;C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Setup libnd4j home if a download url is specified
        shell: powershell
        run: |
            mkdir "%GITHUB_WORKSPACE%/openblas_home"
            cd "%GITHUB_WORKSPACE%/openblas_home"
            wget https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.28-1.5.11/openblas-0.3.28-1.5.11-windows-x86_64.jar
            unzip openblas-0.3.28-1.5.11-windows-x86_64.jar
            cd ..
            echo "OPENBLAS_PATH=${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/windows-x86_64/" | Out-File -FilePath  "$env:GITHUB_ENV" -Encoding utf8 -Append
        if: ${{ matrix.libnd4j_file_download != '' }}
      - name: Run windows cpu build
        shell: cmd
        run: |
              echo "libnd4j build threads ${{ matrix.build_threads }}"
              echo "deploy to release staging repo or not ${{ matrix.deploy_to_release_staging }}"
              echo "release version ${{ matrix.release_version }}"
              echo "snapshot version ${{ matrix.snapshot_version }}"
              echo "debug enabled ${{ matrix.debug_enabled }}"
              echo "libnd4j url ${{ matrix.libnd4j_file_download }}"
              echo "maven flags ${{ matrix.mvn_flags }}"
              echo "snapshot version ${{ matrix.snapshot_version }}"
              echo "server id ${{ matrix.server_id }}"
              echo "release repo id ${{ matrix.release_repo_id }}"

              if "%PERFORM_RELEASE%"=="1" (
                   echo "Running release"
                   bash "%GITHUB_WORKSPACE%/bootstrap-libnd4j-from-url.sh" windows x86_64 "${{ matrix.helper }}" "${{ matrix.extension }}"
                   bash "%GITHUB_WORKSPACE%/release-specified-component.sh"  "%RELEASE_VERSION%" "%SNAPSHOT_VERSION%" "%RELEASE_REPO_ID%" "%COMMAND%"
              ) else (
                  if "%PERFORM_RELEASE%"==1 (
                        echo "Running release"
                         bash "%GITHUB_WORKSPACE%/release-specified-component.sh"  "%RELEASE_VERSION%" "%SNAPSHOT_VERSION%" "%RELEASE_REPO_ID%" "%COMMAND%"
                   ) else (
                      echo "Running snapshots"
                      call "%GITHUB_WORKSPACE%\mvn-command.bat"
                   )
              )
        env:
          MAVEN_GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_TO: central
          MAVEN_USERNAME: ${{ secrets.CENTRAL_SONATYPE_TOKEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.CENTRAL_SONATYPE_TOKEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          PERFORM_RELEASE: ${{ matrix.deploy_to_release_staging }}
          RELEASE_VERSION: ${{ matrix.release_version }}
          SNAPSHOT_VERSION: ${{ matrix.snapshot_version }}
          RELEASE_REPO_ID: ${{ matrix.release_repo_id }}
          GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          GPG_SIGNING_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          MODULES: ${{ matrix.mvn_flags }}
          HELPER: ${{ matrix.helper }}
          EXTENSION: ${{ matrix.extension }}
          LIBND4J_FILE_NAME: ${{ matrix.libnd4j_file_download }}
